#!/bin/sh

# this outputs an inital small loader which can be sourced for each 'class', e.g. for class 'wifi':
#
# idee: methode 'unload' ?
# idee: methode help?
# idee: $FUNCNAME fuellen ODER alle Vorkommen von FUNCNAME durch realen zur "compile-zeit" ersetzen
# idee: passend zur klasse automatisch einen bestimmten variablensatz aktivieren (z.b. $INTRANET bei pfilter)?
# idee: statistik anzeigen lassen per befehl: sed -n "s/^\(.*\) ().*/\1/p" $BASEDIR/${CLASS} | wc -l | sed 's/ //g'
# idee: netparam ohne *MTU|BRC|OLSR|MSK|LO*
# todo: option zum entfernen aller logmeldungen? (bzw. nur log-debug)
# todo: lade-log an/aus (loader/realclass)

if [ -e "$0.funtions" ]
	. $0.funtions		# fixme! remove me
else
	. $0.functions
fi

IFS=". "; read UP1 UP2 NOP </proc/uptime; unset IFS

DEBUG="$1"		# debug or empty
BASEDIR="/etc/kalua"	# scriptbase, simply throw your 'class'-files here e.g. wifi
LOADER="/tmp/loader_$$"	# scripts can source this file and automatically use all 'classes'
LOADER_FINAL="/tmp/loader"

while read LINE; do {
	case "$LINE" in
		MemTotal:*)
			set $LINE

			if [ $2 -gt 16500 ]; then
				POOLDIR="/tmp/kalua" 		# all function-scripts are rewritten (stripped) to this dir
			elif [ -e /sbin/uci ]; then
				POOLDIR="/etc/kalua_worker"	# safing ram, but use slower storage: fixme! check disk_free() and have a fallback
			else
				POOLDIR="/tmp/kalua"		# fallback for oldstyle-devices
			fi
	
			POOLDIR="/tmp/kalua"
			mkdir -p "$POOLDIR"
			break
		;;
	esac
} done </proc/meminfo

echo  >"$LOADER" "# generated by $0"
echo >>"$LOADER" "export TZ='CET-1CEST-2,M3.5.0/2,M10.5.0/3'"
echo >>"$LOADER" "_(){ ls -1 $POOLDIR|sort|sed 's/^/_/';}"
# echo >>"$LOADER" "x(){ . $POOLDIR/\$1;}"			# safes 350 bytes in combination with [3], but i like the speedcode

for CLASS in $( find $BASEDIR -type f -name "[a-z]"* ); do {	# only include lowercase names

	CLASS="$( basename $CLASS )"				# generate loader and add methods 'show'+'include'

	MAX_ARGS="$( _kalua_max_arguments "$BASEDIR/$CLASS" )"

	[ "$DEBUG" = "debug" ] && {
		DEBUG1="logger working in _$CLASS, calling \$1 with args ${MAX_ARGS#* };"	# omit first ARG
		DEBUG2="logger including _$CLASS subfunc \$1;"
		DEBUG3="|| logger -t $CLASS -s \"invalid call: \$1\""
	}

	cat >"$POOLDIR/${CLASS}" <<EOF
_${CLASS}(){ ${DEBUG1}_${CLASS}_\${1:-s} ${MAX_ARGS#* }${DEBUG3};}
_${CLASS}_show(){ sed -n "s/\(_${CLASS}_.*\)()/\1/p" $BASEDIR/${CLASS}|sort ;}
_${CLASS}_s(){ _${CLASS}_show ;}
_${CLASS}_include(){ :;}
EOF

	# fixme! do it *fast* when booting, and then do it *good-but-slow* after booting
	_kalua_strip_script "$BASEDIR/$CLASS" "$CLASS" "$DEBUG" >>"$POOLDIR/${CLASS}"

	if [ "$DEBUG" = "debug" ]; then
		. "$POOLDIR/${CLASS}"
		echo -en >>"$LOADER" "_${CLASS}(){ . $POOLDIR/$CLASS;${DEBUG2}_${CLASS} ${MAX_ARGS}${DEBUG3};}\n"
	else
#[3]		echo -en >>"$LOADER" "_${CLASS}(){ _=${CLASS};x \$_;${DEBUG2}_\${_}_\${1:-s} ${MAX_ARGS#* };}\n"
		echo -en >>"$LOADER" "_${CLASS}(){ . $POOLDIR/$CLASS;${DEBUG2}_${CLASS}_\${1:-s} ${MAX_ARGS#* };}\n"
	fi
} done

if [ -e /tmp/NETPARAM ]; then		# fixme! better concept needed
	. /tmp/NETPARAM
	
	while read LINE; do {
		case "$LINE" in
			*"="*)
				echo >>"$LOADER" -n "${LINE};"
			;;
		esac
	} done </tmp/NETPARAM
	
	echo -en >>"$LOADER" "WIFI_DEVS=$WIFIDEV\n"
else
	logger -s "$0 could'nt work with '/tmp/NETPARAM'"
fi

[ -e "/etc/variables_fff+" ] && . /etc/variables_fff+
echo >>"$LOADER" "FFF_PLUS_VERSION=$FFF_PLUS_VERSION;FFF_VERSION=$FFF_VERSION"

get_homedir_from_passwd()
{
	grep -e ^"${USER:-root}:" /etc/passwd | cut -d ":" -f 6
}

echo >>"$LOADER" "export HOME=$( get_homedir_from_passwd )"

for CLASS in $( find $BASEDIR -type f -name "[A-Z]"* ); do {
	cat "$CLASS"
} done >>"$LOADER"

mv "$LOADER" "$LOADER_FINAL"
. "$LOADER_FINAL"			# fixme! rely on external functions _log + _file ?

echo -n "$WIFIDEV" >/tmp/WIFIDEV	# is a hack for fast seeking our dev/ip
echo -n "$WIFIADR" >/tmp/WIFIADR

IFS=". "; read UP3 UP4 NOP </proc/uptime; unset IFS
TIME="$(( $UP3$UP4 - $UP1$UP2 ))"
TIME="$( echo $TIME | sed 's/^\(.*\)\(..\)$/\1.\2/' )sec"	# 386ms -> 3.86sec

_log do gen_loader daemon info "[OK] done '$LOADER_FINAL' (in $TIME, using $( _file diskusage $POOLDIR ) bytes in $POOLDIR) - you MUST reinclude the new loader with '. $LOADER_FINAL' if this is an interactive shell"
