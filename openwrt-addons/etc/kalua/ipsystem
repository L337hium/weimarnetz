_ipsystem_do ()
{
	local SYSTEM="$( uci get system.@profile[0].ipsystem )"

	_ipsystem ${SYSTEM:-ffweimar} "$1"
}

_ipsystem_ipv4_extract_octetts()	# fixme! code duplication in sanitizer()
{
	local ip="$1"
	local oldifs="$IFS"; IFS="."; set $ip; IFS="$oldifs"
	echo "local o1=$1; local o2=$2; local o3=$3; local o4=$4"
}

_ipsystem_amiga()			# lannet  = 10.10.x.128/25
{					# wifinet = 10.10.x.0/25
	local nodenumber="$1"
	local city=10
	local network=10
	local range_start=2
	local range_end=254
	local range_first_random=250

	  if [ -z "$nodenumber" ]; then

		nodenumber="$( uci get system.@profile[0].nodenumber )"
		[ -z "$nodenumber" ] && nodenumber=$( _math random_integer "$range_first_random" "$range_end" )

	elif [ "$nodenumber" = "random" ]; then

		nodenumber=$( _math random_integer "$range_first_random" "$range_end" )

	elif _sanitizer do "$nodenumber" ip4 check ; then	# ip2nodenumber()

		eval $( _ipsystem ipv4_extract_octetts "$nodenumber" )
		if [ $o1 -eq $network -a $o2 -eq $city ]; then
				echo "$o3"
				return 0
		else
			return 1
		fi
	fi

	# fixme! implement random-case()

	cat <<EOF
WIFINET=$network.$city.$nodenumber.0
WIFIBRC=$network.$city.$nodenumber.127
WIFI_ADDR=$network.$city.$nodenumber.1
WIFIADR=$network.$city.$nodenumber.1
WIFI_PRE=8
WIFI_DHCP_PRE=25
WIFIDHCPSTART=$network.$city.$nodenumber.2
WIFIDHCPNUM=122

LANADR=$network.$city.$nodenumber.129
LANMSK=255.255.255.128
LANDHCPSTART=130
LANDHCPNUM=125

WANADR=$network.$city.$nodenumber.125
WANMSK=255.255.255.252

OLSR_HNA=$network.$city.$nodenumber.0/24
NODE_NUMBER_RANDOM=false
FFF_CITY=$city
EOF
}

_ipsystem_ffsundi ()			# ARG1: - empty       -> has_nodenumber? -> output for my nodenumber
{					#  	- "random" or empty && no_nodenumber?  -> output for random nodenumber
	local NODE_NUMBER="$1"		#       - IP-address  -> output nodenumber
	local CITY="10"			#	- node-number -> output for this nodenumber, return 1 if not in range
	local NW="10"
	local RANGE_START="2"
	local RANGE_END="254"
	local RANGE_FIRST_RANDOM="220"

	  if [ -z "$NODE_NUMBER" ]; then

		NODE_NUMBER="$( uci get system.@profile[0].nodenumber )"
		[ -z "$NODE_NUMBER" ] && NODE_NUMBER=$( _math random_integer $RANGE_FIRST_RANDOM $RANGE_END )

	elif [ "$NODE_NUMBER" = "random" ]; then

		NODE_NUMBER=$( _math random_integer $RANGE_FIRST_RANDOM $RANGE_END )

	elif [ "$( echo $NODE_NUMBER | sed 's/[^\.]//g' )" = '...' ]; then	# is IPv4

		eval $(echo $NODE_NUMBER|sed -n 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/local OCT1=\1\nlocal OCT2=\2\nlocal OCT3=\3\nlocal OCT4=\4/p')

		[ $OCT1 -eq $NW ] && [ $OCT2 -eq $CITY ] && {
			  if [ $OCT3 -eq 10 ]; then                echo $OCT4		# input = wifi-ip4
			elif [ $OCT4 -ge 0 -a $OCT4 -le 63 ]; then echo $OCT3		# input = lan-ip4
			fi  
			return 0
		}

		return 1
	fi
	
	if [ 2>/dev/null "$NODE_NUMBER" -ge $RANGE_START -a "$NODE_NUMBER" -le $RANGE_END ]; then
			
		local S=0			# subnetstart 	e.g. network.city.100.${S}
		local N=$NODE_NUMBER		# nodenumber_id	e.g. network.city.${N}.0
		local RANDOM=false
		
		if [ "$NODE_NUMBER" -ge $RANGE_FIRST_RANDOM ]; then
			RANDOM=true
		fi
	else
		return 1
	fi

	cat<<EOF
NODE_NUMBER=$NODE_NUMBER
NODE_NUMBER_RANDOM=$RANDOM
OLSR_HNA=$NW.$CITY.$N.$S/25

LAN_ADR=$NW.$CITY.$N.$(( S + 1 ))
LAN_IP=$NW.$CITY.$N.$(( S + 1 ))/26
LAN_IP_1ST=$NW.$CITY.$N.$(( S + 2 ))/26
LAN_PRE=26
LAN_DHCP_PRE=26
LAN_DHCP_NUM=40
LAN_DHCP_LEASETIME=12h

WAN_ADR=$NW.$CITY.$N.$(( S + 61 ))
WAN_PRE=30
WAN_IP=$NW.$CITY.$N.$(( S + 61 ))/30

WIFI_ADR=$NW.$CITY.10.$NODE_NUMBER
WIFI_IP=$NW.$CITY.10.$NODE_NUMBER/8
WIFI_IP_1ST=$NW.$CITY.$NODE_NUMBER.97
WIFI_PRE=8
WIFI_DHCP_PRE=28
WIFI_DHCP_NUM=14
WIFI_DHCP_LEASETIME=2h

DHCP_LAN="$NW.$CITY.$NODE_NUMBER.$(( S + 2 ))/26,40,12h"
DHCP_WIFI="$NW.$CITY.$NODE_NUMBER.97/28,14,2h"
# ---
FFF_CITY=$CITY
FFF_NET=$NW
FFF_NODE=$NODE_NUMBER
FFF_HNA=$NW.$CITY.$N.$S/25
LANADR=$NW.$CITY.$N.$(( S + 1 ))
LAN1ST=$NW.$CITY.$N.$(( S + 2 ))
LANMSK=255.255.255.192
LANBRC=$NW.$CITY.$N.$(( S + 63 ))
LANNET=$NW.$CITY.$N.$S
LANPRE=26
LANDHCPSTART=$(( S + 2 ))
LANDHCPNUM=40
WIFIADR=$NW.$CITY.10.$NODE_NUMBER
WIFI1ST=$NW.$CITY.$NODE_NUMBER.97
WIFIMSK=255.255.255.240
WIFIBRC=$NW.$CITY.$N.111
WIFINET=$NW.$CITY.$N.96
WIFIPRE=28
WANADR=$NW.$CITY.$N.61
WAN1ST=$NW.$CITY.$N.62
WANMSK=255.255.255.252
WANBRC=$NW.$CITY.$N.63
WANNET=$NW.$CITY.$N.60
WANPRE=30
WIFIDHCPSTART=$NW.$CITY.$N.98
WIFIDHCPNUM=14
WIFIVPNSERVERADR=$NW.$CITY.$N.110
WIFIVPNCLIENTADR=$NW.$CITY.$N.109
WIFIVPNNET=$NW.$CITY.$N.108
WIFIVPNBRC=$NW.$CITY.$N.111
WIFIVPNPRE=30
ROAMING_IP4=172.31.$CITY.$NW
ROAMING_PRE=24
EOF
}

_ipsystem_classc ()
{
	_ipsystem ffweimar "$1" "168" "192" "1" "254" "250" "16"	# fixme!
	return $?
}

_ipsystem_leonardo ()
{
	_ipsystem ffweimar "$1" "10"
}

_ipsystem_ffweimar ()			# ARG1: - empty       -> has_nodenumber? -> output for my nodenumber
{					#  	- "random" or empty && no_nodenumber?  -> output for random nodenumber
	local NODE_NUMBER="$1"		#       - IP-address  -> output nodenumber
	local CITY="${2:-63}"		#	- node-number -> output for this nodenumber, return 1 if not in range
	local NW="${3:-10}"
	local RANGE_START="${4:-2}"
	local RANGE_END="${5:-1020}"
	local RANGE_FIRST_RANDOM="${6:-970}"
	local WIFI_MASK="${7:-8}"

	  if [ -z "$NODE_NUMBER" ]; then

		NODE_NUMBER="$( uci get system.@profile[0].nodenumber )"
		[ -z "$NODE_NUMBER" ] && NODE_NUMBER=$( _math random_integer $RANGE_FIRST_RANDOM $RANGE_END )

	elif [ "$NODE_NUMBER" = "random" ]; then

		NODE_NUMBER=$( _math random_integer $RANGE_FIRST_RANDOM $RANGE_END )

	elif [ "$( echo $NODE_NUMBER | sed 's/[^\.]//g' )" = '...' ]; then	# is IPv4
		
		eval $(echo $NODE_NUMBER|sed -n 's/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/local OCT1=\1\nlocal OCT2=\2\nlocal OCT3=\3\nlocal OCT4=\4/p')

		[ $OCT1 -eq $NW ] && [ $OCT2 -eq $CITY ] && {
		     	  if [ $OCT4 -gt 191 ]; then echo $(( $OCT3 + 765 ))
			elif [ $OCT4 -gt 127 ]; then echo $(( $OCT3 + 510 ))
			elif [ $OCT4 -gt  63 ]; then echo $(( $OCT3 + 255 ))
			else 			     echo     $OCT3; fi
			return 0
		}

		return 1
	fi
	
	if [ 2>/dev/null "$NODE_NUMBER" -ge $RANGE_START -a "$NODE_NUMBER" -le $RANGE_END ]; then
			
		local S=0			# subnetstart 	e.g. network.city.100.${S}
		local N=$NODE_NUMBER		# nodenumber_id	e.g. network.city.${N}.0
		local RANDOM=false
		
		  if [ "$NODE_NUMBER" -ge $RANGE_FIRST_RANDOM ]; then
			N=$(( $NODE_NUMBER - 765 ))
			S=192
			RANDOM=true
		elif [ "$NODE_NUMBER" -gt 765 ]; then
			N=$(( $NODE_NUMBER - 765 ))
			S=192
		elif [ "$NODE_NUMBER" -gt 510 ]; then
			N=$(( $NODE_NUMBER - 510 ))
			S=128
		elif [ "$NODE_NUMBER" -gt 255 ]; then
			N=$(( $NODE_NUMBER - 255 ))
			S=64
		fi
	else
		return 1
	fi

	cat<<EOF
NODE_NUMBER=$NODE_NUMBER
NODE_NUMBER_RANDOM=$RANDOM
OLSR_HNA=$NW.$CITY.$N.$S/26

LAN_ADR=$NW.$CITY.$N.$(( S + 33 ))
LAN_IP=$NW.$CITY.$N.$(( S + 33 ))/27
LAN_IP_1ST=$NW.$CITY.$N.$(( S + 34 ))/27
LAN_PRE=27
LAN_DHCP_PRE=27
LAN_DHCP_NUM=29
LAN_DHCP_LEASETIME=12h

WAN_ADR=$NW.$CITY.$N.$(( S + 25 ))
WAN_PRE=30
WAN_IP=$NW.$CITY.$N.$(( S + 25 ))/30

WIFI_ADR=$NW.$CITY.$N.$(( S + 1 ))
WIFI_IP=$NW.$CITY.$N.$(( S + 1 ))/$WIFI_MASK
WIFI_IP_1ST=$NW.$CITY.$N.$(( S + 2 ))
WIFI_PRE=8
WIFI_DHCP_PRE=28
WIFI_DHCP_NUM=13
WIFI_DHCP_LEASETIME=2h

DHCP_LAN="$NW.$CITY.$N.$(( S + 34 ))/27,29,12h"
DHCP_WIFI="$NW.$CITY.$N.$(( S + 2 ))/28,13,2h"
# ---
FFF_CITY=$CITY
FFF_NET=$NW
FFF_NODE=$NODE_NUMBER
FFF_HNA=$NW.$CITY.$N.$S/26
LANADR=$NW.$CITY.$N.$(( S + 33 ))
LAN1ST=$NW.$CITY.$N.$(( S + 34 ))
LANMSK=255.255.255.224
LANBRC=$NW.$CITY.$N.$(( S + 63 ))
LANNET=$NW.$CITY.$N.$(( S + 32 ))
LANPRE=27
LANDHCPSTART=$(( S + 34 ))
LANDHCPNUM=29
WIFIADR=$NW.$CITY.$N.$(( S + 1 ))
WIFI1ST=$NW.$CITY.$N.$(( S + 2 ))
WIFIMSK=255.255.255.224
WIFIBRC=$NW.$CITY.$N.$(( S + 31 ))
WIFINET=$NW.$CITY.$N.$S
WIFIPRE=27
WANADR=$NW.$CITY.$N.$(( S + 25 ))
WAN1ST=$NW.$CITY.$N.$(( S + 26 ))
WANMSK=255.255.255.252
WANBRC=$NW.$CITY.$N.$(( S + 27 ))
WANNET=$NW.$CITY.$N.$(( S + 24 ))
WANPRE=30
WIFIDHCPSTART=$NW.$CITY.$N.$(( S + 2 ))
WIFIDHCPNUM=13
WIFIVPNSERVERADR=$NW.$CITY.$N.$(( S + 30 ))
WIFIVPNCLIENTADR=$NW.$CITY.$N.$(( S + 29 ))
WIFIVPNNET=$NW.$CITY.$N.$(( S + 28 ))
WIFIVPNBRC=$NW.$CITY.$N.$(( S + 31 ))
WIFIVPNPRE=30
ROAMING_IP4=172.31.$CITY.$NW
ROAMING_PRE=24
EOF
}
