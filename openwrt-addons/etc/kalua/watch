#
# check a random neighbour for ssh/httpd || {
# 	udhcpc -i wlan0 -r 10.10.52.2 -n -q -r retter -S;reboot
# }
#

_watch_dhcp_space()
{
	local funcname="watch_dhcp_space"
	local line
	local file="/tmp/dhcp.leases"
	local max_lan="$( uci get dhcp.lan.limit )"
	local max_wifi="$( uci get dhcp.wlan.limit )"
	local clients_lan=0
	local clients_wifi=0
	local logprio="debug"
	local percent_border="80"

	while read line; do {
		set $line
		if fgrep -q "$3" "/tmp/CLIENTS_LAN"; then
			clients_lan=$(( $clients_lan + 1 ))
		else
			clients_wifi=$(( $clients_wifi + 1 ))
		fi
	} done <"$file"

	[ "$( uci get dhcp.lan.ignore )" = "1" ] || {
		[ $clients_lan -gt $(( (${max_lan:=0} * $percent_border) / 100 )) ] && {
			logprio="alert"
		}
	}

	[ "$( uci get dhcp.wifi.ignore )" = "1" ] || {
		[ $clients_wifi -gt $(( (${max_wifi:=0} * $percent_border) / 100 )) ] && {
			logprio="alert"
		}
	}

	_log do $funcname daemon $logprio "clients: lan: $clients_lan/$max_lan wifi: $clients_wifi/$max_wifi"
}


_watch_vpn ()
{
	local func="watch_vpn"

	pidof vtund >/dev/null && {
	        _log do $func daemon debug "daemon running"
	        grep -sq ^"Interface .*tap0" /etc/olsrd.conf /var/etc/olsrd.conf || {   # fixme! more abstraction: tun/tapXY + conf-filename
	        	_log do $FUNC daemon debug "daemon running but tunnel-device not used by olsr"
	        	return 1
		}
	        _log do $func daemon debug "tunnel-device is in olsr.conf"

	        ps | grep vtund | grep -q connecting && {
	        	_log do $func daemon debug "daemon running but connection seems broken"
	                return 1
	        }
	        _log do $func daemon debug "connection seems active"

	        neigh | grep -q "==" || {                            # fixme! implement: 'neigh has_tunnel_neigh'
	        	_log do $func daemon debug "no tunnel-olsr neighs?"
	                return 1
	        }
	        _log do $func daemon debug "tunnel-olsr neigh available"
	        return 0
	}
	                                                                                                                                                                                                                                                                                                                                                
	_log do $func daemon debug "daemon NOT running"
	return 1
}

_watch_local_proxy()
{
	local func="watch_local_proxy"
	local pidfile="/var/run/polipo.pid"

	[ -e /usr/sbin/polipo ] || {
		return 0
	}

	[ "$( uci get polipo.general.enabled )" = "1" ] || {
		return 0
	}

	local cache_path="$( uci get polipo.cache.diskCacheRoot )"
	if [ -z "$cache_path" ]; then
		return 0
	else
		# polipo.general.logFile=/tmp/usb0/polipo.log
		# this should try to read from disk-cache-device

		ls -1 "$cache_path/polipo.log" >/dev/null 2>/dev/null || {
			return 0
		}
	fi

	daemon_restart()
	{
		local reason="$1"

		[ -e "$pidfile" ] && {
			rm "$pidfile"
		}

		_log do $func daemon alert "$reason, restarting"

		pidof polipo >/dev/null && {
			_watch hanging_command polipo
			_watch hanging_command polipo
		}

		pidof polipo >/dev/null || {
			/etc/init.d/polipo start
		}
	}

	pidof polipo >/dev/null || {
		daemon_restart "polipo is not running"
		return 0
	}

	_wget do "http://127.0.0.1:8123/polipo/status?" 5 >"/tmp/${func}_$$"
	fgrep -q "Polipo status report" "/tmp/${func}_$$" || {
		daemon_restart "cannot fetch local status-page"
	}
	rm "/tmp/${func}_$$"

	# testdownload:
	# export http_proxy=http://127.0.0.1:8123
	# _wget do "http://bla"
}

_watch_archivsize ()
{
	local FILE="$1"
	local MAX_LINES="$2"
	local TEMP="/tmp/watch_archivsize_temp_$$"
	
	tail -n $MAX_LINES "$FILE" >"$TEMP"
	mv "$TEMP"  "$FILE"
}

_watch_system_time ()		# firmware-build-date is newer than unixtime?
{				# firmware-build-date + 1 year is older than date? (yes, i have seen _many_ routers with date 2020/2037!) -> set time
	local NTP_TIME_OK=	# fallback 347681 = 2009'aug-30                         

	local UNIXTIME="$( _system date unixtime )"
	      UNIXTIME="${UNIXTIME:=0}"

	[ $(( ${FFF_PLUS_VERSION:=347681} * 3600 ))            -gt $UNIXTIME ] && NTP_TIME_OK="false"
	[ $(( ${FFF_PLUS_VERSION:=347681} * 3600 + 135000000)) -lt $UNIXTIME ] && NTP_TIME_OK="false"

	_ntp set is_unset && NTP_TIME_OK="false"
	
	[ "$NTP_TIME_OK" = "false" ] && {
		_ntp set force

		[ "$(( ${FFF_PLUS_VERSION:=347681} * 3600 ))" -gt "$( _system date unixtime )" ] && {
			_log do set_time daemon info "could'nt set time - trying poor mens timeserver - fixme!"
		}
	}
}

_watch_wifi_mode ()		# check e.g. adhoc in config but managed in real?
{
	local MODE_REAL="$( _wifi mode $WIFIDEV config )"
	local MODE_CONF="$( _wifi mode $WIFIDEV )"

	if [ "$MODE_REAL" != "$MODE_CONF" ]; then
		_wifi phy_restart $WIFIDEV "compare_config_and_real_wifi_mode: diff, real/conf: '$MODE_REAL/$MODE_CONF'" alert
		return 1
	else
		return 0
	fi
}

_watch_netserver ()
{
	[ -x /usr/bin/netserver ] && {
		pidof netserver >/dev/null || {
			_log do watch_netserver daemon info "netserver offline, restarting"
			/etc/init.d/*netserver start
		}
	}
}

_watch_vpnc ()
{
	local PID
	
	PID="$( pidof vpnc )" && {                                                                                                                                              
		_log do vpnc_helper daemon info "petting PID '$PID' - fixme!"                                                                                                 
		# kill -SIGHUP "$PID"           # fixme! (howto reconnect?)                                                                                                   
	}              
}

_watch_hanging_command ()
{
	local FUNC="watch_hanging_command"
	local COMMAND="$1"						# e.g. wget|scp|mv|nc|olsrd|own_keyword
	local COMMAND_PID="$2"						# e.g. direct PID or autoget if empty
	local COMMAND_CMD

	pid2taskname()
	{
		_sanitizer do "$( cut -d: -f2 /proc/${1:-unset}/status )" firstword
	}

	if [ -z "$COMMAND_PID" ]; then
		COMMAND_PID="$( _system get_first_pid $COMMAND )"
	else
		COMMAND="$( pid2taskname $COMMAND_PID )"
	fi

	[ -z "$COMMAND_PID" ] && {
		_log do $FUNC daemon debug "no running '$COMMAND'-process"
		return 0
	}

	read COMMAND_CMD </proc/$COMMAND_PID/cmdline			# remember exact commandline

	local OLD_PID OLD_CMD FILE1 FILE2
	FILE1="/tmp/maybe_hanging_${COMMAND}_process_id"
	FILE2="/tmp/maybe_hanging_${COMMAND}_process_cmd"

	[ -e "$FILE1" ] && read OLD_PID <$FILE1
	[ -e "$FILE2" ] && read OLD_CMD <$FILE2

	_log do $FUNC daemon debug "found '$COMMAND'-process pid:'$COMMAND_PID' / cmdline:'$COMMAND_CMD'"

	if [ "$OLD_PID" = "$COMMAND_PID" ] && [ "$OLD_CMD" = "${COMMAND_CMD:=empty_cmd_line}" ]; then

		if [ -e "/etc/init.d/$COMMAND" ]; then
			_log do $FUNC daemon info "executing /etc/init.d/$COMMAND stop"
			/etc/init.d/$COMMAND stop
		else
			_log do $FUNC daemon info "killing '$COMMAND_CMD'"
			kill $COMMAND_PID
		fi

		sleep 3

		if [ -e "/proc/$COMMAND_PID" ]; then
			_log do $FUNC daemon crit "still hanging, killing hard ($COMMAND/$COMMAND_CMD)"
			kill -9 $COMMAND_PID
			sleep 3

			if [ -e "/proc/$COMMAND_PID" ]; then
				_system reboot_safe "$FUNC() still hanging '$COMMAND'"
				return 1
			else
				_$FUNC $COMMAND
			fi
		else
			_$FUNC $COMMAND		# recheck
		fi

		_log do $FUNC daemon info "successfully killed '$COMMAND'-process"
		return 0
	fi

	_log do $FUNC daemon debug "remember for next check pid '$COMMAND_PID' / '$COMMAND_CMD'"
	echo >$FILE1 "$COMMAND_PID"
	echo >$FILE2 "$COMMAND_CMD"
}

_watch_flash_free_space ()
{
	local funcname="watch_flash_free_space"
	local border="150"
	local statfile="/tmp/$funcname.boottime"
	local file flash_free

	[ -e "$statfile" ] || {
		_system flash_free >"$statfile"		# is filled during early boot
	}

	read flash_free <"$statfile"
	[ $flash_free -lt $border ] && border="$flash_free"

	list_files_removeable()
	{
		ls -1 /www/cgi-bin/user-* /usr/lib/*pkg/lists/* /www/backup_nvram_* /www/safed_syslog_fff+ 2>/dev/null

		[ -e /tmp/SEND_ALIVE_FAILED ] || {		# means, that content is likely already send by monitoring to server
			ls -1 /www/everlasting_syslog.txt 2>/dev/null
		}
	}

	echo "0" >"/tmp/$funcname"
	while [ -n "$( list_files_removeable )" ]; do {

		[ $( _system flash_free ) -ge $border ] && break

		_watch counter "/tmp/$funcname" increment 1 max 100 || {
			_log do $funcname daemon info "[ERR] rebooting, in an ultralow jffs2-situation, this is the only chance to survive"
			reboot
			break
		}

		file="$( list_files_removeable | head -n1 )"
		_log do $funcname daemon info "only $( _system flash_free ) kb free - removing '$file' with $( _file size "$file" ) bytes"
		rm "$file"
	} done
}

_watch_dns_resolution()		# only with existing dnsmasq and reachable internet-gateway
{
	local DNS_TESTSERVER="intercity-vpn.de"		# old was 'weimarnetz.de' -> take from fff_server_vpn_ip4 = 87.118.106.19 ?
	local FUNC="watch_dns_resolution"
	local ip

	# oldstyle: ln -s /var/etc/dnsmasq.conf /etc/dnsmasq.conf
	# dnsmasq -p 5353 -A /#/192.168.1.251 -C /dev/null

	[ ! -x /etc/init.d/*dnsmasq ]		&& return 0

	fgrep -q "nameserver 127.0.0.1" /etc/resolv.conf || {
		read ip <"/etc/resolv.conf"
		ip="$( _sanitizer do "$ip" ip4 )"
		_sanitizer do "$ip" ip4 check && {
			return 0			# real server configured, working without local daemon
		}
	}

	_net inet_seems_stable			|| return 0

	pidof dnsmasq >/dev/null || {

		_log do $FUNC daemon error "restarting dnsmasq"

		pidof udhcpd >/dev/null && {			# otherwise the server-port cannot bound to new daemon

			_log do $FUNC daemon error "killing old DNS-server 'udhcpd'"	
			killall udhcpd
		}
		
		/etc/init.d/*dnsmasq start
		/etc/init.d/*fake_dns_server_fff+ remove_fake_dnsserver
		sleep 3

		_log do $FUNC daemon error "restarted dnsmasq, PID now '$( pidof dnsmasq )'"
	}

	nslookup "$( _system date unixtime ).$DNS_TESTSERVER" 2>/dev/null >/dev/null || {		# can we resolv a random address?

		_log do $FUNC daemon error "error in dns-resolution, sending SIGHUP to DNSmasq"
		kill -SIGHUP $( _system get_first_pid dnsmasq )
		sleep 5
	
		nslookup "$( _system date unixtime ).$DNS_TESTSERVER" 2>/dev/null >/dev/null || {	# again: can we resolv a random address?

			_log do $FUNC daemon error "error in dns-resolution, restarting DNSmasq"
			kill -SIGUSR1 $( _system get_first_pid dnsmasq )	# logging stats
			/etc/init.d/*dnsmasq restart
		}
	}
}

_watch_pppoe ()
{
	local funcname="watch_pppoe"
	local failure_file="/tmp/${funcname}:conn_is_faulty"
	local daemon

	[ ! -e "/tmp/PPPOE_NEEDED" ]			&& return 0
	[ "$( uci get network.wan.proto )" = "pppoe" ]	|| return 0

	if ip route list exact 0.0.0.0/0 dev $WANDEV >/dev/null 2>/dev/null ; then		# WANDEV= "pppoe-wan" OR "ppp0"

		[ -e "$failure_file" ] && {
			rm "$failure_file"
			_stopwatch stop "$funcname" global 1 pppoe-connection

			/etc/init.d/S43ethers_fff+ call
			cron.check_inet_gw_fff+
			cron.monitoring send_alive_message
		}
	else
		# ip monitor:
		# [OK]
		# eth0.2@eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP
		# [ERR]
		# eth0.2@eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state LOWERLAYERDOWN

		type1()
		{
			:
			# Oct 13 13:28:56 EG-labor-AP daemon.info pppd[14877]: No response to 5 echo-requests
			# Oct 13 13:28:56 EG-labor-AP daemon.notice pppd[14877]: Serial link appears to be disconnected.
			# Oct 13 13:28:56 EG-labor-AP daemon.info pppd[14877]: Connect time 11.1 minutes.
			# Oct 13 13:28:56 EG-labor-AP daemon.info pppd[14877]: Sent 992464 bytes, received 3814282 bytes.
			# Oct 13 13:29:02 EG-labor-AP daemon.notice pppd[14877]: Connection terminated.
			# Oct 13 13:29:02 EG-labor-AP daemon.notice pppd[14877]: Modem hangup
		}

		type2()
		{
			:
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: Plugin rp-pppoe.so loaded.
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: RP-PPPoE plugin version 3.8p compiled against pppd 2.4.5
			# Oct 13 13:53:26 EG-labor-AP daemon.notice pppd[29450]: pppd 2.4.5 started by root, uid 0
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: PPP session is 7211
			# Oct 13 13:53:26 EG-labor-AP daemon.warn pppd[29450]: Connected to 00:30:88:1a:1c:b9 via interface eth0.2
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: Using interface pppoe-wan
			# Oct 13 13:53:26 EG-labor-AP daemon.notice pppd[29450]: Connect: pppoe-wan <--> eth0.2
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: Remote message: 0030 PSULM003 0035202316 session limit exceeded
			# Oct 13 13:53:26 EG-labor-AP daemon.err pppd[29450]: PAP authentication failed
			# Oct 13 13:53:32 EG-labor-AP daemon.notice pppd[29450]: Connection terminated.
			# Oct 13 13:53:32 EG-labor-AP daemon.notice pppd[29450]: Modem hangup
		}

		type3()
		{
			:
			# Oct 13 14:42:23 EG-labor-AP daemon.info pppd[16479]: Terminating on signal 15
			# Oct 13 14:42:23 EG-labor-AP daemon.info pppd[16479]: Exit.
			# Oct 13 14:42:26 EG-labor-AP daemon.info fff+ /bin/sh watch_hanging_command(): successfully killed 'pppd'-process
			# Oct 13 14:42:26 EG-labor-AP daemon.info pppd[16727]: Plugin rp-pppoe.so loaded.
			# Oct 13 14:42:26 EG-labor-AP daemon.info pppd[16727]: RP-PPPoE plugin version 3.8p compiled against pppd 2.4.5
			# Oct 13 14:42:26 EG-labor-AP daemon.notice pppd[16727]: pppd 2.4.5 started by root, uid 0
			# Oct 13 14:42:41 EG-labor-AP daemon.warn pppd[16727]: Timeout waiting for PADO packets
			# Oct 13 14:42:41 EG-labor-AP daemon.err pppd[16727]: Unable to complete PPPoE Discovery
		}

		type4()
		{
			:
			# Oct 14 09:31:46 EG-labor-AP daemon.info pppd[17121]: PPP session is 5395
			# Oct 14 09:31:46 EG-labor-AP daemon.warn pppd[17121]: Connected to 00:30:88:1a:1c:b9 via interface eth0.2
			# Oct 14 09:31:46 EG-labor-AP daemon.info pppd[17121]: Using interface pppoe-wan
			# Oct 14 09:31:46 EG-labor-AP daemon.notice pppd[17121]: Connect: pppoe-wan <--> eth0.2
			# Oct 14 09:31:46 EG-labor-AP daemon.info pppd[17121]: Remote message: 0030 PSULM003 0043173374 session limit exceeded
			# Oct 14 09:31:46 EG-labor-AP daemon.err pppd[17121]: PAP authentication failed
			# Oct 14 09:31:52 EG-labor-AP daemon.notice pppd[17121]: Connection terminated.
			# Oct 14 09:31:52 EG-labor-AP daemon.notice pppd[17121]: Modem hangup
		}

		[ -e "$failure_file" ] || {
			touch "$failure_file"
			_stopwatch start "$funcname" global
		}

		daemon="pppd"

		_log do $funcname daemon info "no default route over $WANDEV - restarting PPPoE / $daemon"
		_watch hanging_command $daemon
		_watch hanging_command $daemon

		ifup wan
		sleep 15

		_log do $funcname daemon info "restarted: '$( ip route list exact 0.0.0.0/0 dev $WANDEV )'"

		_scheduler add "_watch pppoe"
	fi
}

_watch_webcam ()
{
	[ ! -e /tmp/WEBCAM ] && return
	
	pidof motion >/dev/null || {
		_log do webcam_watchdog daemon alert "restarting webcam"
		/etc/init.d/S90webcam_fff+ restart
	}
}

_watch_webserver()
{
	local funcname="watch_webserver"
	local option="$1"	# e.g. force
	local server="uhttpd"
	local action=

	[ "$( uci get uhttpd.main.max_requests )" = "1" ] && {
		case "$( pidof ash )" in
			*" "*)
				action="no_check"
			;;
		esac
	}

	case "$( pidof userdb )" in
		*" "*)
			action="no_check"
		;;
	esac

	[ "$option" = "force" ] && action=

	[ -n "$action" ] && {
		_log do $funcname daemon info "[OK] no check during webserver forking action"
		return 0
	}

	restart_server()
	{
		uci set uhttpd.main.script_timeout=15
		uci set uhttpd.main.network_timeout=20
		uci set uhttpd.main.max_requests=50

		_log do $funcname daemon info "[OK] trying to stop '$server' with PID '$( pidof $server )'"

		_watch hanging_command "$server"
		_watch hanging_command "$server"

		if pidof $server >/dev/null; then
			_log do $funcname daemon alert "[ERR] during kill of $server, rebooting"
			_stopwatch stop $funcname quiet
			reboot
		else
			/etc/init.d/$server start
			_log do $funcname daemon alert "[OK] server PID after restart: '$( pidof $server )'"
		fi
	}

	pidof $server >/dev/null || {
		if pidof crond >/dev/null ; then
			_log do $funcname daemon alert "[ERR] webserver is not running - restarting $server"
			restart_server
		else
			_log do $funcname daemon debug "[OK] no crond - no restart"	# maybe intended
		fi
	}

	local size_gethttp filesize httpsize checkfile
	local checkfile_sample="/tmp/$funcname.sample"
	local file_seen_good="/tmp/$funcname.was_good"
	local i=0

	if [ -e "/www/robots.txt" ]; then
		checkfile="robots.txt"
	else
		checkfile="favicon.ico"
	fi

	if [ -e "/www/$checkfile" ]; then

		while [ ${size_gethttp:-0} -eq 0 ]; do {
			i=$(( $i + 1 ))
			[ $i -gt 1 ] && {
				_log do $funcname daemon info "size_gethttp = 0, try $i"
				[ $i -gt 5 ] && break
				sleep 10
			}

			size_gethttp="$( _wget do "http://127.0.0.1/$checkfile" 20 >"$checkfile_sample" )"

			[ -e "$checkfile_sample" ] && {
				size_gethttp="$( cat "$checkfile_sample" | wc -c )"
				rm "$checkfile_sample"
			}
		} done

		if [ ${size_gethttp:-0} -gt 0 ]; then

			size_file="$( _file size "/www/$checkfile" )"

			[ ${size_file:-0} -eq 1000 ] && {
				cp /www/$checkfile /tmp			# fixme! this is a workaround for
				chmod 777 /tmp/$checkfile		# bad file_size() when
				rm /www/$checkfile			# user/group is '1000'
				cp /tmp/$checkfile /www
				rm /tmp/$checkfile

				size_file="$( _file size "/www/$checkfile" )" 
			}

			if [ $size_file -eq $size_gethttp ]; then
				_log do $funcname daemon debug "[OK] same size for file/httpget: $size_file bytes for $checkfile"
				touch "$file_seen_good"
			else
				_log do $funcname daemon alert "[ERR] size_file: $size_file size_gethttp: $size_gethttp - restarting"
				restart_server
			fi
		else
			if [ -e "$file_seen_good" ]; then
				_log do $funcname daemon alert "[ERR] gethttp not possible - restarting"
				restart_server
			else
				_log do $funcname daemon info "[ERR] gethttp not possible - needs investigation"
			fi
		fi

		_stopwatch start $funcname
		wget -qO /dev/null "http://127.0.0.1/$checkfile"
		local duration="$( _stopwatch stop $funcname nolog )"

		if [ $duration -gt 175 ]; then		# = 1.75 sec
			_log do $funcname daemon alert "last too long: $(( $duration / 100 )).$(( $duration % 100 )) sec"
		else
			return 0
		fi
	else
		:
	fi
}

_watch_sshd_or_telnet ()
{
	local funcname="watch_sshd_or_telnet"
	local option="$1"
	local pid

	[ "$option" = "force" ] || {
		[ -e /tmp/service_ssh_nowatching ] && return
	}

	restart_sshd()
	{
		_watch hanging_command dropbear
		_watch hanging_command dropbear

		/etc/init.d/*dropbear start
	}

	pidof dropbear >/dev/null && {

		which nc >/dev/null && {
			which dropbear >/dev/null && {

				( nc 127.0.0.1 22 >"/tmp/$funcname" ) &
				pid="$!"
				sleep 3
				kill $pid

				if fgrep -i dropbear "/tmp/$funcname" ; then
					_log do $funcname daemon debug "[OK] dropbear seems to run: '$( cat "/tmp/$funcname" )'"
				else
					_log do $funcname daemon alert "[ERR] dropbear seems to hang: '$( cat "/tmp/$funcname" )' - restarting"
					restart_sshd
				fi

				rm "/tmp/$funcname"
			}
		}

		return 0
	}

	pidof telnetd >/dev/null || {
	
		_log do $funcname daemon err "dropbear nor telnetd not running - restarting"
		
		restart_sshd
		if pidof dropbear >/dev/null; then
			
			_log do $funcname daemon info "dropbear PID now: '$( pidof dropbear )'"
		else
			if telnetd; then
				_log do $funcname daemon info "telnetd PID now: '$( pidof telnetd )'"
			else
				_log do $funcname daemon err "dropbear nor telnetd not startable?"
			fi
		fi
	}
}

_watch_random_node_id ()	# check if nodenumber/id is from random pool
{
	local option="$1"			# force
	local FUNC="watch_random_node_id"
	local URL WIFIMAC SSH_PUBKEY_FP DIRTY

	build_vars ()
	{
		local WIFIMAC="$( _sanitizer do "$( _net dev2mac ${WIFIDEV:-$LANDEV} )" hex )"
		local SSH_PUBKEY_FP_HEXONLY="$( _sanitizer do "$( _ssh key_public_fingerprint_get )" hex )"
		local SSH_PUBKEY="$( _file convert_bin2hex /etc/dropbear/dropbear_dss_host_key.pub )"
		local SERVER_URL="$( uci get system.@monitoring[0].url )"

		echo "WIFIMAC=$WIFIMAC"
		echo "SSH_PUBKEY_FP=${SSH_PUBKEY_FP_HEXONLY}"	
		echo "URL='$SERVER_URL/registrator/?WIFIMAC=${WIFIMAC}&SSHPUBKEYFP=${SSH_PUBKEY_FP_HEXONLY}&SSHPUBKEY=${SSH_PUBKEY}'"
	}

	_ipsystem do | grep -q ^"NODE_NUMBER_RANDOM=true"					&& DIRTY=1
	[ "$( _ipsystem do $WIFIADR )" != "$( uci get system.@profile[0].nodenumber )" ]	&& DIRTY=1
	[ -z "$WIFIADR" ]									&& DIRTY=	# fixme!

	if [ "$DIRTY" = "1" ]; then
		eval "$( build_vars )"
		_log do $FUNC daemon info "detected ID from random pool - registering official ID from '$URL'"

 		[ -n "$SSH_PUBKEY_FP" ] && ID="$( _wget do "$URL" 10 )"		# fixme! no ssh  -> no ssh_pubkey_fingerprint!
 										# fixme! no wifi -> no wifimac -> no registration?
	 	if _ipsystem do "${ID:-99999}" >/dev/null ; then		# ipsystem() has a sanitizer built in, so don't worry 8-)
			:	# enforce_new_profile
		else
			_log do $FUNC daemon info "ID not clean: '$ID' - aborting"
		fi
	else
		local wait

		if [ "$option" = "force" ]; then
			wait="0"

			[ -e /tmp/REGISTRATED ] && {
				rm /tmp/REGISTRATED
			}
		else
			if [ "$( _system uptime min )" -lt 30 ]; then
				wait="1"
			else
				wait="0"
			fi
		fi

		if [ ! -e /tmp/REGISTRATED ] && [ "$wait" = "0" ]; then

			eval "$( build_vars )"

			[ -n "$SSH_PUBKEY_FP" ] && {
				URL="${URL}&NODE=$( uci get system.@profile[0].nodenumber )"
				ID="$( _wget do "$URL" 10 )"
			}

			[ -e "/tmp/DEBUG" ] && rm "/tmp/DEBUG"	# fixme! wrong place

			if [ -n "$ID" ]; then		# fixme! OK = went fine ; REGENERATE_KEY = ...
				_log do registrator_petting daemon info "answer was '$ID' (question was: '$URL')"	
			
				case "$ID" in
					OK)
						touch /tmp/REGISTRATED
					;;
					REGENERATE_KEY)
						_ssh regen_keys
						_scheduler add "_$FUNC" force
					;;
					*)
						:
					;;
				esac
			else
				_log do registrator_petting daemon info "no answer (service '$URL' not running or no pubkey_fp?)"
			fi
		else
			[ -e /tmp/REGISTRATED ] && _log do registrator_petting daemon debug "is already lucky"
		fi
	fi
}

_watch_counter ()		# call: _watch counter "/tmp/mycounter" increment 1 max 10 || action
{
	local func="watch_counter"
	local FILE="$1"
	local MODE="$2"		# increment|decrement|set
	local MODE_VALUE="${3:-1}"
	local OPTION="$4"	# max|min
	local OPTION_VALUE="$5"
	local VALUE

	read VALUE 2>/dev/null <"$FILE"

	case "$MODE" in
		increment)
			VALUE="$(( ${VALUE:-0} + $MODE_VALUE ))"
		;;
		decrement)
			VALUE="$(( ${VALUE:-0} - $MODE_VALUE ))"
		;;
		set)
			VALUE="$MODE_VALUE"
		;;
		*)
			return
		;;
	esac

	echo $VALUE >"$FILE"

	case "$OPTION" in
		max)
			[ $VALUE -ge $OPTION_VALUE ] && {
				_log do $func daemon info "[$FILE] max: $VALUE >= $OPTION_VALUE"
				return 1
			}
		;;
		min)
			[ $VALUE -le $OPTION_VALUE ] && {
				_log do $func daemon info "[$FILE] min: $VALUE =< $OPTION_VALUE"
				return 1
			}
		;;
	esac

	return 0
}

_watch_topusage_task()
{
	local funcname="watch_topusage_task"
	local file="/tmp/$funcname_$$"
	local line pid cpu cpu_int toptask
	local crit_percent_border=70

	top -b -n 1 >"$file"

	while read line; do {
		set -- $line
		case "$line" in
			[0-9]*)
				pid="$1"
				cpu="$7"
				cpu_int="${7//%/}"
				toptask="$8"

				break
			;;
		esac
	} done <"$file"
	rm "$file"

	[ $cpu_int -gt $crit_percent_border ] || return 0

	task="$( basename "$toptask" )"
	_log do $funcname daemon alert "pid: $pid cpu: $cpu toptask: $toptask task: $task"

	_watch hanging_command $task	# must be called 2 times
	_watch hanging_command $task
}

_watch_switch_linkstatus()
{
	local funcname="watch_switch_linkstatus"
	local statfile="/tmp/$funcname.stat"
	local type="${1:-$( uci get network.@switch[0].name )}"
	local stat_old stat_new devname interface_name 

	[ -z "$type" -o "$type" = "switch0" ] && {                                                                           
		if [ -e "/tmp/SWITCH_TYPE" ]; then                                
			read type <"/tmp/SWITCH_TYPE"                                                          
			_log do $funcname daemon debug "[INFO] Write switch type $type to uci"
			uci set network.@switch[0].name="$type"                                       
			uci commit                                                                                             
		else                                                                                  
			_log do $funcname daemon debug "[INFO] Switch type unknown, probe switch type"
			_switch show                                                                  
			return 0                                                   
		fi                                                          
	}
	
	case "$type" in
		bcm53xx)
			stat_new="$( robocfg show 2>/dev/null | grep "vlan: 1" | cut -f2 -d ':' | cut -c 3-6 )"
		;;
		rtl8366rb|ar8316) #on tp-link vlan 2 represents the wan port
			stat_new="$( swconfig dev $type port "$(swconfig dev $type vlan 2 get ports|cut -f1 -d ' ')" get link)"
			case "$stat_new" in
				*down*)
					stat_new="DOWN"
				;;
				*)
					stat_new="UP"
				;;
			esac
		;;
		ar7240|ag71xx|eth0) #tp-link wr842nd has separate wan interface eth1 / ag71xx is wr841n
			[ -z "$WANDEV" ] || {
				stat_new="$( ip a|fgrep "$WANDEV:"|cut -f9 -d ' ' )"
			}
		;;
		*)
			stat_new=""
		;;
	esac
		
	if [ -e "$statfile" ]; then
		read stat_old <"$statfile"
	else
		echo $stat_new > "$statfile"
		_log do $funcname daemon debug "[OK] first status check, no action"
		return 0
	fi


	[ "${#stat_new}" -gt 0 ] || {
		_log do $funcname daemon info "[ERR] could not read switch-status"
		return 1
	}

	if [ "$stat_new" = "$stat_old" ]; then
		_log do $funcname daemon debug "[OK] nothing changed"
		if [ "$stat_new" != "DOWN" ]; then
			_watch vpn || {
				_vpn restart
			}
		fi
		return 0
	else
		echo "$stat_new" >"$statfile"
		_log do $funcname daemon info "[OK] switch-status old: $stat_old"
		_log do $funcname daemon info "[OK] switch-status new: $stat_new"
		
		if [ "$stat_old" = "DOWN" ]; then
			_log do $funcname daemon info "[OK] wan - link up"
			_vpn start
		elif [ "$stat_new" != "DOWN" ]; then #do nothing until new status is DOWN                                                            
                        _log do $funcname daemon info "[OK] wan still up, perhaps duplex mode changed"
		else
			_log do $funcname daemon info "[OK] wan - link down"
			_vpn stop
			ifup wan
			/etc/init.d/olsrd restart
		fi
	fi
}
