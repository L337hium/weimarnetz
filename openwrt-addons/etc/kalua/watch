#
# check a random neighbour for ssh/httpd || {
# 	udhcpc -i wlan0 -r 10.10.52.2 -n -q -r retter -S;reboot
# }
#

_watch_vpn ()
{
	local func="watch_vpn"
	
	pidof vtund >/dev/null && {
	        _log do $func daemon debug "daemon running"
	        grep -sq ^"Interface .*tap0" /etc/olsrd.conf /var/etc/olsrd.conf || {   # fixme! more abstraction: tun/tapXY + conf-filename
	        	_log do $FUNC daemon debug "daemon running but tunnel-device not used by olsr"
	        	return 1
		}
	        _log do $func daemon debug "tunnel-device is in olsr.conf"
	                                                                                                
	        ps ax | grep vtund | grep -q connecting && {
	        	_log do $func daemon debug "daemon running but connection seems broken"
	                return 1
	        }
	        _log do $func daemon debug "connection seems active"
	                                                                                                                                                                                                                        
	        neigh | grep -q "==1==" || {                            # fixme! implement: 'neigh has_tunnel_neigh'
	        	_log do $func daemon debug "no tunnel-olsr neighs?"
	                return 1
	        }
	        _log do $func daemon debug "tunnel-olsr neigh available"
	                                                                                                                                                                                                                                                                                                                        
	        return 0
	}
	                                                                                                                                                                                                                                                                                                                                                
	_log do $func daemon debug "daemon NOT running"
	return 1
}

_watch_local_proxy()
{
	local func="watch_local_proxy"
	local pidfile="/var/run/polipo.pid"

	[ -e /usr/sbin/polipo ] || {
		return 0
	}

	[ "$( uci get polipo.general.enabled )" = "1" ] || {
		return 0
	}

	local cache_path="$( uci get polipo.cache.diskCacheRoot )"
	if [ -z "$cache_path" ]; then
		return 0
	else
		# polipo.general.logFile=/tmp/usb0/polipo.log
		# this should try to read from disk-cache-device

		ls -1 "$cache_path/polipo.log" >/dev/null 2>/dev/null || {
			return 0
		}
	fi

	daemon_restart()
	{
		local reason="$1"

		[ -e "$pidfile" ] && {
			rm "$pidfile"
		}

		_log do $func daemon alert "$reason, restarting"

		pidof polipo >/dev/null && {
			_watch hanging_command polipo
			_watch hanging_command polipo
		}

		pidof polipo >/dev/null || {
			/etc/init.d/polipo start
		}
	}

	pidof polipo >/dev/null || {
		daemon_restart "polipo is not running"
		return 0
	}

	_wget do "http://127.0.0.1:8123/polipo/status?" 5 >"/tmp/${func}_$$"
	fgrep -q "Polipo status report" "/tmp/${func}_$$" || {
		daemon_restart "cannot fetch local status-page"
	}
	rm "/tmp/${func}_$$"

	# testdownload:
	# export http_proxy=http://127.0.0.1:8123
	# _wget do "http://bla"
}

_watch_archivsize ()
{
	local FILE="$1"
	local MAX_LINES="$2"
	local TEMP="/tmp/watch_archivsize_temp_$$"
	
	tail -n $MAX_LINES "$FILE" >"$TEMP"
	mv "$TEMP"  "$FILE"
}

_watch_system_time ()		# firmware-build-date is newer than unixtime?
{				# firmware-build-date + 1 year is older than date? (yes, i have seen _many_ routers with date 2020/2037!) -> set time
	local NTP_TIME_OK=	# fallback 347681 = 2009'aug-30                         

	local UNIXTIME="$( _system date unixtime )"
	      UNIXTIME="${UNIXTIME:=0}"

	[ $(( ${FFF_PLUS_VERSION:=347681} * 3600 ))            -gt $UNIXTIME ] && NTP_TIME_OK="false"
	[ $(( ${FFF_PLUS_VERSION:=347681} * 3600 + 135000000)) -lt $UNIXTIME ] && NTP_TIME_OK="false"

	_ntp set is_unset && NTP_TIME_OK="false"
	
	[ "$NTP_TIME_OK" = "false" ] && {
		_ntp set force

		[ "$(( ${FFF_PLUS_VERSION:=347681} * 3600 ))" -gt "$( _system date unixtime )" ] && {
			_log do set_time daemon info "could'nt set time - trying poor mens timeserver - fixme!"
			# /www/cgi-bin-speed t          # fixme!
		}
	}
}

_watch_wifi_mode ()		# check e.g. adhoc in config but managed in real?
{
	local MODE_REAL="$( _wifi mode $WIFIDEV config )"
	local MODE_CONF="$( _wifi mode $WIFIDEV )"

	if [ "$MODE_REAL" != "$MODE_CONF" ]; then
		_wifi phy_restart $WIFIDEV "compare_config_and_real_wifi_mode: diff, real/conf: '$MODE_REAL/$MODE_CONF'" alert
		return 1
	else
		return 0
	fi
}

_watch_netserver ()
{
	[ -x /usr/bin/netserver ] && {
		pidof netserver >/dev/null || {
			_log do watch_netserver daemon info "netserver offline, restarting"
			/etc/init.d/*netserver start
		}
	}
}

_watch_vpnc ()
{
	local PID
	
	PID="$( pidof vpnc )" && {                                                                                                                                              
		_log do vpnc_helper daemon info "petting PID '$PID' - fixme!"                                                                                                 

		# kill -SIGHUP "$PID"           # fixme! (howto reconnect?)                                                                                                   
	}              
}

_watch_hanging_command ()
{
	local FUNC="watch_hanging_command"
	local COMMAND="$1"						# e.g. wget|scp|mv|nc|olsrd|own_keyword
	local COMMAND_PID="$2"						# e.g. direct PID or autoget if empty
	local COMMAND_CMD

	pid2taskname()
	{
		_sanitizer do "$( cut -d: -f2 /proc/${1:-unset}/status )" firstword
	}

	if [ -z "$COMMAND_PID" ]; then
		COMMAND_PID="$( _system get_first_pid $COMMAND )"
	else
		COMMAND="$( pid2taskname $COMMAND_PID )"
	fi

	[ -z "$COMMAND_PID" ] && {
		_log do $FUNC daemon debug "no running '$COMMAND'-process"
		return 0
	}

	read COMMAND_CMD </proc/$COMMAND_PID/cmdline			# remember exact commandline

	local OLD_PID OLD_CMD FILE1 FILE2
	FILE1="/tmp/maybe_hanging_${COMMAND}_process_id"
	FILE2="/tmp/maybe_hanging_${COMMAND}_process_cmd"

	[ -e "$FILE1" ] && read OLD_PID <$FILE1
	[ -e "$FILE2" ] && read OLD_CMD <$FILE2

	_log do $FUNC daemon debug "found '$COMMAND'-process pid:'$COMMAND_PID' / cmdline:'$COMMAND_CMD'"

	if [ "$OLD_PID" = "$COMMAND_PID" ] && [ "$OLD_CMD" = "${COMMAND_CMD:=empty_cmd_line}" ]; then

		_log do $FUNC daemon err "killing '$COMMAND_CMD'"
		kill $COMMAND_PID
		sleep 3

		if [ -e "/proc/$COMMAND_PID" ]; then
			_log do $FUNC daemon crit "still hanging, killing hard ($COMMAND/$COMMAND_CMD)"
			kill -9 $COMMAND_PID
			sleep 3

			if [ -e "/proc/$COMMAND_PID" ]; then
				_system reboot_safe "$FUNC() still hanging '$COMMAND'"
				return 1
			else
				_$FUNC $COMMAND
			fi
		else
			_$FUNC $COMMAND		# recheck
		fi

		_log do $FUNC daemon info "successfully killed '$COMMAND'-process"
		return 0
	fi

	_log do $FUNC daemon debug "remember for next check pid '$COMMAND_PID' / '$COMMAND_CMD'"
	echo >$FILE1 "$COMMAND_PID"
	echo >$FILE2 "$COMMAND_CMD"
}

_watch_hanging_broadcom_wifi ()				# under unclear circumstances the "wifi"-program segfaults
{							# and there are after some time hanging 'wifi'-processes
	[ "$( _system pids_count wifi )" -gt 1 ] && {

		sleep 10
	
		[ "$( _system pids_count wifi )" -gt 1 ] && {
			_system reboot_safe "strange_wifi() several wifi-PIDs!"
		}
	}
}

_watch_hanging_xrelayd ()
{
	local FUNC="watch_hanging_xrelayd"
	
	_linklocal wifi_users $WIFIDEV >/dev/null && {
		_log do $FUNC daemon debug "no action, connected wifi-clients online"		# fixme! workaroung - check also LAN?
		return
	}

	[ "$( _system pids_count xrelayd )" -gt 1 ] && {		# can be the case, after too many simultaneously https-connections
	
		_log do $FUNC daemon info "trying to end some processes and restart daemon"
		killall xrelayd
		sleep 10
	
		if [ "$( _system pids_count xrelayd )" -gt 0 ]; then
	
			_log do $FUNC daemon info "still some processes around"
	
			for PID in $( pidof xrelayd ); do {
				kill -9 $PID
			} done
	
			if [ "$( _system pids_count xrelayd )" -gt 0 ]; then
				_system reboot_safe "can't end some xrelayd-processes"
			else
				/etc/init.d/S70secureadmin start
			fi
		else
			/etc/init.d/S70secureadmin start
		fi
	}
}

_watch_rrd_integrity ()
{
	touch /tmp/rrd_plausi_check					# needs some test
	for FILE in $(find /tmp/rrd -name *.rrd 2>/dev/null); do {
		[ /tmp/rrd_plausi_check -ot $FILE ] && {
			_log do rrd_plausi_check daemon alert "rrd-file is in future - reinit for '$FILE'"
			touch "$FILE"
		}
	} done
}

_watch_zombie_processes ()
{
	[ "$( ps | sed -n 's/^[^Z]*\(Z\)[^Z]*\[.*\].*/\1/p' | wc -l )" -gt 50 ] && {
		_system reboot_safe "more than 50 zombie processes!"
	}
}

_watch_flash_free_space ()
{
	local funcname="watch_flash_free_space"
	local border="150"
	local file

	list_files_removeable()
	{
		ls -1 /www/cgi-bin/user-* /usr/lib/*pkg/lists/* /www/backup_nvram_* /www/safed_syslog_fff+ 2>/dev/null

		[ -e /tmp/SEND_ALIVE_FAILED ] || {		# means, that content is likely already send by monitoring to server
			echo "/www/everlasting_syslog.txt"
		}
	}

	echo "0" >"/tmp/$funcname"
	while [ -n "$( list_files_removeable )" -a $( _system flash_free ) -lt $border ]; do {

		_watch counter "/tmp/$funcname" increment 1 max 100 || {
			_log do $funcname daemon info "[ERR] rebooting, in an ultralow jffs2-situation, this is the only chance to survive"
			reboot
		}

		file="$( list_files_removeable | head -n1 )"
		_log do $funcname daemon info "only $( _system flash_free ) kb free - removing '$file' with $( _file size "$file" ) bytes"
		rm "$file"
	} done

	# dmesg | fgrep "mini_fo: create_sto_file: ERROR creating sto file." && reboot		// fixme!
}

_watch_dns_resolution ()	# only with existing dnsmasq and reachable internet-gateway
{
	local DNS_TESTSERVER="intercity-vpn.de"		# old was 'weimarnetz.de' -> take from fff_server_vpn_ip4 = 87.118.106.19 ?
	local FUNC="watch_dns_resolution"

	# oldstyle: ln -s /var/etc/dnsmasq.conf /etc/dnsmasq.conf
	# dnsmasq -p 5353 -A /#/192.168.1.251 -C /dev/null

	[ ! -x /etc/init.d/*dnsmasq ]		&& return 0
	_net inet_seems_stable			|| return 0

	pidof dnsmasq >/dev/null || {

		_log do $FUNC daemon error "restarting dnsmasq"

		pidof udhcpd >/dev/null && {			# otherwise the server-port cannot bound to new daemon

			_log do $FUNC daemon error "killing old DNS-server 'udhcpd'"	
			killall udhcpd
		}
		
		/etc/init.d/*dnsmasq start
		/etc/init.d/*fake_dns_server_fff+ remove_fake_dnsserver
		sleep 3

		_log do $FUNC daemon error "restarted dnsmasq, PID now '$( pidof dnsmasq )'"
	}

	nslookup "$( _system date unixtime ).$DNS_TESTSERVER" 2>/dev/null >/dev/null || {		# can we resolv a random address?

		_log do $FUNC daemon error "error in dns-resolution, sending SIGHUP to DNSmasq"
		kill -SIGHUP $( _system get_first_pid dnsmasq )
		sleep 5
	
		nslookup "$( _system date unixtime ).$DNS_TESTSERVER" 2>/dev/null >/dev/null || {	# again: can we resolv a random address?

			_log do $FUNC daemon error "error in dns-resolution, restarting DNSmasq"
			kill -SIGUSR1 $( _system get_first_pid dnsmasq )	# logging stats
			/etc/init.d/*dnsmasq restart
		}
	}
}

_watch_pppoe ()
{
	local funcname="watch_pppoe"
	local failure_file="/tmp/${funcname}:conn_is_faulty"
	local daemon

	[ ! -e "/tmp/PPPOE_NEEDED" ]			&& return 0
	[ "$( uci get network.wan.proto )" = "pppoe" ]	|| return 0

	if ip route list exact 0.0.0.0/0 dev $WANDEV >/dev/null 2>/dev/null ; then		# WANDEV= "pppoe-wan" OR "ppp0"

		[ -e "$failure_file" ] && {
			rm "$failure_file"
			_stopwatch stop "$funcname" global 1 pppoe-connection

			/etc/init.d/S43ethers_fff+ call
			cron.check_inet_gw_fff+
			cron.monitoring send_alive_message
		}
	else
		# ip monitor:
		# [OK]
		# eth0.2@eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP
		# [ERR]
		# eth0.2@eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state LOWERLAYERDOWN

		type1()
		{
			:
			# Oct 13 13:28:56 EG-labor-AP daemon.info pppd[14877]: No response to 5 echo-requests
			# Oct 13 13:28:56 EG-labor-AP daemon.notice pppd[14877]: Serial link appears to be disconnected.
			# Oct 13 13:28:56 EG-labor-AP daemon.info pppd[14877]: Connect time 11.1 minutes.
			# Oct 13 13:28:56 EG-labor-AP daemon.info pppd[14877]: Sent 992464 bytes, received 3814282 bytes.
			# Oct 13 13:29:02 EG-labor-AP daemon.notice pppd[14877]: Connection terminated.
			# Oct 13 13:29:02 EG-labor-AP daemon.notice pppd[14877]: Modem hangup
		}

		type2()
		{
			:
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: Plugin rp-pppoe.so loaded.
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: RP-PPPoE plugin version 3.8p compiled against pppd 2.4.5
			# Oct 13 13:53:26 EG-labor-AP daemon.notice pppd[29450]: pppd 2.4.5 started by root, uid 0
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: PPP session is 7211
			# Oct 13 13:53:26 EG-labor-AP daemon.warn pppd[29450]: Connected to 00:30:88:1a:1c:b9 via interface eth0.2
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: Using interface pppoe-wan
			# Oct 13 13:53:26 EG-labor-AP daemon.notice pppd[29450]: Connect: pppoe-wan <--> eth0.2
			# Oct 13 13:53:26 EG-labor-AP daemon.info pppd[29450]: Remote message: 0030 PSULM003 0035202316 session limit exceeded
			# Oct 13 13:53:26 EG-labor-AP daemon.err pppd[29450]: PAP authentication failed
			# Oct 13 13:53:32 EG-labor-AP daemon.notice pppd[29450]: Connection terminated.
			# Oct 13 13:53:32 EG-labor-AP daemon.notice pppd[29450]: Modem hangup
		}

		type3()
		{
			:
			# Oct 13 14:42:23 EG-labor-AP daemon.info pppd[16479]: Terminating on signal 15
			# Oct 13 14:42:23 EG-labor-AP daemon.info pppd[16479]: Exit.
			# Oct 13 14:42:26 EG-labor-AP daemon.info fff+ /bin/sh watch_hanging_command(): successfully killed 'pppd'-process
			# Oct 13 14:42:26 EG-labor-AP daemon.info pppd[16727]: Plugin rp-pppoe.so loaded.
			# Oct 13 14:42:26 EG-labor-AP daemon.info pppd[16727]: RP-PPPoE plugin version 3.8p compiled against pppd 2.4.5
			# Oct 13 14:42:26 EG-labor-AP daemon.notice pppd[16727]: pppd 2.4.5 started by root, uid 0
			# Oct 13 14:42:41 EG-labor-AP daemon.warn pppd[16727]: Timeout waiting for PADO packets
			# Oct 13 14:42:41 EG-labor-AP daemon.err pppd[16727]: Unable to complete PPPoE Discovery
		}

		type4()
		{
			:
			# Oct 14 09:31:46 EG-labor-AP daemon.info pppd[17121]: PPP session is 5395
			# Oct 14 09:31:46 EG-labor-AP daemon.warn pppd[17121]: Connected to 00:30:88:1a:1c:b9 via interface eth0.2
			# Oct 14 09:31:46 EG-labor-AP daemon.info pppd[17121]: Using interface pppoe-wan
			# Oct 14 09:31:46 EG-labor-AP daemon.notice pppd[17121]: Connect: pppoe-wan <--> eth0.2
			# Oct 14 09:31:46 EG-labor-AP daemon.info pppd[17121]: Remote message: 0030 PSULM003 0043173374 session limit exceeded
			# Oct 14 09:31:46 EG-labor-AP daemon.err pppd[17121]: PAP authentication failed
			# Oct 14 09:31:52 EG-labor-AP daemon.notice pppd[17121]: Connection terminated.
			# Oct 14 09:31:52 EG-labor-AP daemon.notice pppd[17121]: Modem hangup
		}

		[ -e "$failure_file" ] || {
			touch "$failure_file"
			_stopwatch start "$funcname" global
		}

		if _uci is_oldstyle ; then
			daemon="pppoecd"
		else
			daemon="pppd"
		fi

		_log do $funcname daemon info "no default route over $WANDEV - restarting PPPoE / $daemon"
		_watch hanging_command $daemon
		_watch hanging_command $daemon

		ifup wan
		sleep 15

		_log do $funcname daemon info "restarted: '$( ip route list exact 0.0.0.0/0 dev $WANDEV )'"

		_scheduler add "_watch pppoe"
	fi
}

_watch_webcam ()
{
	[ ! -e /tmp/WEBCAM ] && return
	
	pidof motion >/dev/null || {
		_log do webcam_watchdog daemon alert "restarting webcam"
		/etc/init.d/S90webcam_fff+ restart
	}
}

_watch_webserver ()
{
	local FUNC="watch_webserver"
	local SERVER

	if   [ -e /usr/sbin/uhttpd ]; then
		SERVER="uhttpd"
	elif [ -e /usr/sbin/httpd ]; then
		SERVER="httpd"
	else
		return 0
	fi

	restart_server()
	{
		local server="$1"

		_log do $FUNC daemon info "[OK] trying to stop '$server'"
		_watch hanging_command $server
		_watch hanging_command $server

		_log do $FUNC daemon info "[OK] trying to start '$server'"
		/etc/init.d/*$server* start
		sleep 5
		_log do $FUNC daemon info "[OK] webserver PID now: '$( pidof $server )'"
	}

	pidof $SERVER >/dev/null || {

		if pidof crond >/dev/null ; then
			_log do $FUNC daemon err "[ERR] webserver is not running - restarting"
			restart_server $SERVER
		else
			_log do $FUNC daemon debug "[OK] no crond - no restart"		# crondog will do it
		fi
	}

	local filesize httpsize
	local checkfile="favicon.ico"
	local checkfile_sample="/tmp/$FUNC.sample"
	local file_seen_good="/tmp/$FUNC.was_good"

	if [ -e "/www/$checkfile" ]; then

		size_gethttp="$( _wget do "http://127.0.0.1/$checkfile" 3 >"$checkfile_sample" )"
		[ -e "$checkfile_sample" ] && {
			size_gethttp="$( cat "$checkfile_sample" | wc -c )"
			rm "$checkfile_sample"
		}

		if [ ${size_gethttp:-0} -gt 0 ]; then

			size_file="$( _file size "/www/$checkfile" )"

			[ ${size_file:-0} -eq 1000 ] && {
				cp /www/$checkfile /tmp			# fixme! this is a workaround for
				chmod 777 /tmp/$checkfile		# bad file_size() when
				rm /www/$checkfile			# user/group is '1000'
				cp /tmp/$checkfile /www
				rm /tmp/$checkfile

				size_file="$( _file size "/www/$checkfile" )" 
			}

			if [ $size_file -eq $size_gethttp ]; then
				_log do $FUNC daemon debug "[OK] same size for file/httpget: $size_file bytes for $checkfile"
				touch "$file_seen_good"
			else
				_log do $FUNC daemon err "[ERR] size_file: $size_file size_gethttp: $size_gethttp - restarting"
				rm "$file_seen_good"
				restart_server $SERVER
			fi
		else
			if [ -e "$file_seen_good" ]; then
				_log do $FUNC daemon err "[ERR] gethttp not possible - restarting"
				rm "$file_seen_good"
				restart_server $SERVER
			else
				_log do $FUNC daemon info "[ERR] gethttp not possible - needs investigation"
			fi
		fi
	else
		return 0
	fi
}

_watch_sshd_or_telnet ()
{
	local funcname="watch_sshd_or_telnet"
	local option="$1"
	local pid

	[ "$option" = "force" ] || {
		[ -e /tmp/service_ssh_nowatching ] && return
	}

	restart_sshd()
	{
		_watch hanging_command dropbear
		_watch hanging_command dropbear

		/etc/init.d/*dropbear start
	}

	pidof dropbear >/dev/null && {

		which nc >/dev/null && {
			which dropbear >/dev/null && {

				( nc 127.0.0.1 22 >"/tmp/$funcname" ) &
				pid="$!"
				sleep 3
				kill $pid

				if fgrep -i dropbear "/tmp/$funcname" ; then
					_log do $funcname daemon debug "[OK] dropbear seems to run: '$( cat "/tmp/$funcname" )'"
				else
					_log do $funcname daemon alert "[ERR] dropbear seems to hang: '$( cat "/tmp/$funcname" )' - restarting"
					restart_sshd
				fi

				rm "/tmp/$funcname"
			}
		}

		return 0
	}

	pidof telnetd >/dev/null || {
	
		_log do $funcname daemon err "dropbear nor telnetd not running - restarting"
		
		restart_sshd
		if pidof dropbear >/dev/null; then
			
			_log do $funcname daemon info "dropbear PID now: '$( pidof dropbear )'"
		else
			if telnetd; then
				_log do $funcname daemon info "telnetd PID now: '$( pidof telnetd )'"
			else
				_log do $funcname daemon err "dropbear nor telnetd not startable?"
			fi
		fi
	}
}

_watch_random_node_id ()	# check if nodenumber/id is from random pool
{
	local option="$1"			# force
	local FUNC="watch_random_node_id"
	local URL WIFIMAC SSH_PUBKEY_FP DIRTY

	build_vars ()
	{
		local WIFIMAC="$( _sanitizer do "$( _net dev2mac $WIFIDEV )" hex )"
		local SSH_PUBKEY_FP_HEXONLY="$( _sanitizer do "$( _ssh key_public_fingerprint_get )" hex )"
		local SSH_PUBKEY="$( _file convert_bin2hex /etc/dropbear/dropbear_dss_host_key.pub )"
		local SERVER_URL="$( uci get system.@monitoring[0].url )"

		echo "WIFIMAC=$WIFIMAC"
		echo "SSH_PUBKEY_FP=${SSH_PUBKEY_FP_HEXONLY}"	
		echo "URL='$SERVER_URL/registrator/?WIFIMAC=${WIFIMAC}&SSHPUBKEYFP=${SSH_PUBKEY_FP_HEXONLY}&SSHPUBKEY=${SSH_PUBKEY}'"
	}

	_ipsystem do | grep -q ^"NODE_NUMBER_RANDOM=true"					&& DIRTY=1
	[ "$( _ipsystem do $WIFIADR )" != "$( uci get system.@profile[0].nodenumber )" ]	&& DIRTY=1
	[ -z "$WIFIADR" ]									&& DIRTY=	# fixme!

	if [ "$DIRTY" = "1" ]; then
		eval "$( build_vars )"
		_log do $FUNC daemon info "detected ID from random pool - registering official ID from '$URL'"
	
 		[ -n "$SSH_PUBKEY_FP" ] && ID="$( _wget do "$URL" 10 )"		# fixme! no ssh  -> no ssh_pubkey_fingerprint!
 										# fixme! no wifi -> no wifimac -> no registration?
	 	if _ipsystem do "${ID:-99999}" >/dev/null ; then		# ipsystem() has a sanitizer built in, so don't worry 8-)
			_uci is_oldstyle && {
				_nvram set fff_node_number "$ID"
				/etc/init.d/S02check_interface_correctness_fff+ enforce_new_profile
	
				_system reboot_safe "replace_random_nodeID() new profile applied"
			}
		else
			_log do $FUNC daemon info "ID not clean: '$ID' - aborting"
		fi
	else
		local wait

		if [ "$option" = "force" ]; then
			wait="0"

			[ -e /tmp/REGISTRATED ] && {
				rm /tmp/REGISTRATED
			}
		else
			if [ "$( _system uptime min )" -lt 30 ]; then
				wait="1"
			else
				wait="0"
			fi
		fi

		if [ ! -e /tmp/REGISTRATED ] && [ "$wait" = "0" ]; then

			_uci is_oldstyle || {
				killall rcS		# fixme! for newstyle_devices, till we find the bug why these are hanging around
				killall logger

				[ $( _system ram_size ) -lt 28000 ] && {
					killall hotplug2
					killall klogd

					touch /tmp/service_cronwatchdog_nowatching
					touch /tmp/cron_watchdog_please_end_yourself_$( cat /tmp/cron_watchdog.id )

					touch /tmp/service_ulog_nowatching
					killall ulogd

					touch /tmp/service_ssh_nowatching
					killall dropbear

					dmesg | fgrep -q "Buffalo WHR-HP-G54" && {
						[ "$( uci get network.eth0_0.ports )" = "1 2 3 4 5" ] || {
							uci set network.eth0_0.ports="1 2 3 4 5"
							uci commit network
						}

						[ "$( uci get network.eth0_1.ports )" = "0 5" ] || {
							uci set network.eth0_1.ports="0 5"
							uci commit
						}
					}
				}
			}

			eval "$( build_vars )"

			[ -n "$SSH_PUBKEY_FP" ] && {
				URL="${URL}&NODE=$( uci get system.@profile[0].nodenumber )"
				ID="$( _wget do "$URL" 10 )"
			}

			if [ -n "$ID" ]; then		# fixme! OK = went fine ; REGENERATE_KEY = ...
				_log do registrator_petting daemon info "answer was '$ID' (question was: '$URL')"	
			
				case "$ID" in
					OK)
						touch /tmp/REGISTRATED
					;;
					REGENERATE_KEY)
						_ssh regen_keys
						_scheduler add "_$FUNC" force
					;;
					*)
						:
					;;
				esac
			else
				_log do registrator_petting daemon info "no answer (service '$URL' not running or no pubkey_fp?)"
			fi
		else
			[ -e /tmp/REGISTRATED ] && _log do registrator_petting daemon debug "is already lucky"
		fi
	fi
}

_watch_counter ()		# call: _watch counter "/tmp/mycounter" increment 1 max 10 || action
{
	local func="watch_counter"
	local FILE="$1"
	local MODE="$2"		# increment|decrement|set
	local MODE_VALUE="${3:-1}"
	local OPTION="$4"	# max|min
	local OPTION_VALUE="$5"
	local VALUE

	read VALUE 2>/dev/null <"$FILE"

	case "$MODE" in
		increment)
			VALUE="$(( ${VALUE:-0} + $MODE_VALUE ))"
		;;
		decrement)
			VALUE="$(( ${VALUE:-0} - $MODE_VALUE ))"
		;;
		set)
			VALUE="$MODE_VALUE"
		;;
		*)
			return
		;;
	esac

	echo $VALUE >"$FILE"

	case "$OPTION" in
		max)
			[ $VALUE -ge $OPTION_VALUE ] && {
				_log do $func daemon info "[$FILE] max: $VALUE >= $OPTION_VALUE"
				return 1
			}
		;;
		min)
			[ $VALUE -le $OPTION_VALUE ] && {
				_log do $func daemon info "[$FILE] min: $VALUE =< $OPTION_VALUE"
				return 1
			}
		;;
	esac

	return 0
}

_watch_topusage_task ()
{
	local FUNC="watch_topusage_task"
	local WAIT="${1:-1}"
	local TEMPFILE="/tmp/top_$$"
	local PID CPU CPU_INT TASK TOPTASK FILESIZE
	local MAX_ALLOWED_PERCENT=70

	_watch counter "/tmp/counter_highload" increment 1 max 10 || reboot		# workaround: we can't see, which task causes e.g. high I/O-load

	top >$TEMPFILE &		# fixme! can lead to race conditions, we don't know exactly when page output is ready, especially under high load
	PID="$!"			# normally we can use 'top -b -n 1 &', but the busybox-top must have implemented this 8-(
	sleep $WAIT

	while [ -e "/proc/$PID" ]; do {
		kill $PID
		[ -e "/proc/$PID" ] && kill -9 $PID
	} done

	FILESIZE="$( _file size $TEMPFILE )"
#	[ "$FILESIZE" = "0" ] && {
#		_$FUNC "$(( $WAIT + 1 ))"	# or random_integer?
#		rm $TEMPFILE			# abort after 5x recursion?
#		return
#	}

	eval "$( sed -n 's/^[ ]*\([0-9]\{1,5\}\).* \([0-9]\{1,2\}\)\.\([0-9]\).*[0-9]\{1,2\}\.[0-9].* \(.*\)/PID=\1;CPU=\2.\3;CPU_INT=\2;TOPTASK="\4"/p' $TEMPFILE | head -n1 )"

	read TASK 2>/dev/null </proc/$PID/cmdline	# taskname is limited by TERM? e.g. "cron.evaluate_u" seems to be max length
	TASK="$( basename "$TASK" )"
	[ -z "$TASK" ] && TASK="$TOPTASK"

	_log do $FUNC daemon info "output: PID=$PID CPU=$CPU CPU_INT=$CPU_INT TASK=$TOPTASK -> TOPTASK=$TASK TEMPFILE=$TEMPFILE FILESIZE=${FILESIZE}bytes"
	rm $TEMPFILE

	case "$TASK" in
		cgi-bin-welcome*)
			_log do $FUNC daemon alert "killall $TASK"
			killall $TASK
		;;
	esac

	case "$TOPTASK" in
		syslogd)
			[ $CPU_INT -gt 10 ] && {
				_olsr daemon restart "$FUNC high load of $TOPTASK: $CPU"
			}
		;;
	esac

	[ "${CPU_INT:=0}" -gt $MAX_ALLOWED_PERCENT ] && {
		_log do $FUNC daemon alert "detected task '$TASK' with high cpu-usage ${CPU_INT}% > ${MAX_ALLOWED_PERCENT}% - trying to kill pid '$PID'"
		_watch hanging_command $TASK	# must be called 2 times
		_watch hanging_command $TASK
	}
}

_watch_switch_linkstatus()
{
	local funcname="watch_switch_linkstatus"
	local statfile="/tmp/$funcname.stat"
	local type="${1:-$( uci get network.@switch[0].name )}"
	local stat_old stat_new devname interface_name 

	[ -z "$type" ] && {                                                                                                        
		if [ -e "/tmp/SWITCH_TYPE" ]; then                                                                             
			read type <"/tmp/SWITCH_TYPE"                                                                                                   
		fi                                                                                                             
	}
	
	case "$type" in
		bcm53xx)
			stat_new="$( robocfg show 2>/dev/null | grep "vlan: 1" | cut -f2 -d ':' | cut -c 3-6 )"
		;;
		rtl8366rb|ar8316) #on tp-link vlan 2 represents the wan port
			stat_new="$( swconfig dev $type port "$(swconfig dev $type vlan 2 get ports|cut -f1 -d ' ')" get link)"
			if [ "$stat_new"=="*down*"]; then
				stat_new="DOWN"
			fi
		;;
		*)
			stat_new=""
		;;
	esac
		
	if [ -e "$statfile" ]; then
		read stat_old <"$statfile"
	else
		echo $stat_new > "$statfile"
		_log do $funcname daemon debug "[OK] first status check, no action"
		return 0
	fi


	[ "${#stat_new}" -gt 0 ] || {
		_log do $funcname daemon info "[ERR] could not read switch-status"
		return 1
	}

	if [ "$stat_new"=="$stat_old" ]; then
		#_log do $funcname daemon debug "[OK] nothing changed"
		_watch vpn || {
			_vpn restart
		}
		return 0
	else
		echo "$stat_new" >"$statfile"
		_log do $funcname daemon info "[OK] switch-status old: $stat_old"
		_log do $funcname daemon info "[OK] switch-status new: $stat_new"
		
		if [ "$stat_old" = "DOWN" ]; then
			_log do $funcname daemon info "[OK] wan - link up"
			_vpn start
		elif [ "$stat_new" != "DOWN" ]; then #do nothing until new status is DOWN                                                            
                        _log do $funcname daemon info "[OK] wan still up, perhaps duplex mode changed"
		else
			_log do $funcname daemon info "[OK] wan - link down"
			_vpn stop
			ifup wan
			/etc/init.d/olsrd restart
		fi
	fi
}
