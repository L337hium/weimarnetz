_math_percentual_change()
{
	local val1="$1"
	local val2="$2"

	val1="${val1//./}"	# no floats
	val2="${val2//./}"

	if [ $val1 -eq $val2 ]; then
		echo "0"
	else
		[ $val1 -eq 0 ] && val1=1

		echo $(( (($val2 - $val1) * 100) / $val1 ))
	fi
}

_math_random_integer ()		# OUT1: integer, higher or equal => $START and lower or equal <= $END
{
	local START="$1"
	local END="$2"
	local ZEROFILLUP="$3"		# some string

	[ -z "$START" ] && {
		echo -n "0"
		return
	}

	local DIFF=$(( $END + 1 - $START ))
	local SEED="$( dd if=/dev/urandom bs=2 count=1 2>&- | hexdump | if read line;then echo 0x${line#* };fi )" # 0x6f2d
	local RANDOM="$(( $SEED % $DIFF ))"	# min=0 ... max=$DIFF
	local OUT="$(( $START + $RANDOM ))"

	case "$ZEROFILLUP" in
		"")	
			echo -n "${OUT:-$START}"
		;;
		*)
			OUT="000000000000000000000000000${OUT:-$START}"				# prefillup
			echo -n "$OUT" | cut -b $(( ${#OUT} - ${#END} + 1 ))-
		;;
	esac
}

_math_divide100 ()	# SENS: cuts off the last 2 digits: 976 -> 9
{
	local VALUE="$1"

	[ "$VALUE" 2>/dev/null -lt 100 ] && VALUE="100"		# this leads to never a zero - is this good?

	echo -n $VALUE | sed -n 's/^\([0-9].*\)[0-9][0-9]$/\1/p'	# cut last 2 digits
}

_math_divide10 ()	# SENS: sets point in front of last digit 976 = 97.6
{
	local VALUE="$1"
	
	[ $VALUE -lt 10 ] && VALUE="0${VALUE}"			# leading zero, looks better ".4 -> 0.4"

	echo -n $VALUE | sed -n 's/^\(.*\)\([0-9]\)$/\1\.\2/p'	# 976 = 97.6 , ash can't calc with floats
}

_math_bytes2unit ()		# SENS: humanreadable but not correct bytes -> k|m|g-Bytes conversion
{				#       ash can't calc with floats, so we use sed to 'calc' (not AWK!)
	local VALUE="$1"
	local UNIT="$2"			# can be kb, mb, gb, bytes
	local ARG3="$3"			# can be "dotted" - so we convert 123456789 = 123.456.789	
	local ARG4="$4"			# can be "pre" - so we enclose the number in html-<tt>'s
	local OUT

	case $UNIT in
		kb|KB|kbytes|KBytes)
			case ${#VALUE} in
				0|1|2) OUT="0" ;;
				    3) OUT="1" ;;
				    *) OUT="$( echo $VALUE | sed -n 's/^\(.*\).../\1/p' )" ;;			# cut off last 3 digits
			esac
		;;
		mb|MB|mbytes|MBytes)
			case ${#VALUE} in
				0|1|2|3|4|5) OUT="0" ;;
					  6) OUT="1" ;;
					  *) OUT="$( echo $VALUE | sed -n 's/^\(.*\)....../\1/p' )" ;;   	# cut off last 6 digits
			esac
		;;
		gb|GB|gbytes|GBytes)
			case ${#VALUE} in
				0|1|2|3|4|5|6|7|8) OUT="0" ;;
						9) OUT="1" ;;
						*) OUT="$( echo $VALUE | sed -n 's/^\(.*\)........./\1/p' )" ;;	# cut off last 9 digits
			esac
		;;
		*)
			OUT=$VALUE
		;;
	esac

	[ -n "$ARG3" ] && {
		[ "$ARG3" = "dotted" ] && {
			OUT="$( echo "$OUT" | sed -e :a -e 's/^\(.*[0-9]\)\([0-9]\{3\}\)/\1\.\2/;ta' )"
		}

		[ "$ARG4" = "pre" ] && {
			OUT="<tt>$OUT</tt>"
		
			if [ "$ARG3" = "dotted" ]; then							# dotted and preformatted text?
		
				OUT="$( echo $OUT | sed 's/\./<\/tt><small>\.<\/small><tt>/g' )"	# looks nicer 8-)
			fi
		}
	}

	echo -n $OUT
}
