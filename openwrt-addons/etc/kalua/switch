_switch_show()		# e.g.: "X.xxX-" = "1GB gap 100mbit 100mbit 1GB nothing"
{
	local funcname="switch_show"
	local type="${1:-$( uci get network.@switch[0].name )}"
	local debug="$2"
	local line duplex n

	[ -z "$type" ] && {
		if [ -e "/tmp/SWITCH_TYPE" ]; then
			read type <"/tmp/SWITCH_TYPE"
		else
			probe_type1()
			{
				dmesg | fgrep "roboswitch:" | fgrep -q "found a 53" && \
					echo "bcm53xx"
			}

			probe_type2()
			{
				dmesg | fgrep -q "AG71xx" && \
					echo "ag71xx"
			}

			probe_type3()
			{
				dmesg | fgrep -q "ar231x_eth_mii:" && \
					echo "ar231x"
			}

			for n in 1 2 3; do {
				type="$( probe_type${n} )" && {
					echo "$type" >/tmp/SWITCH_TYPE
					break
				}
			} done
		fi
	}

	case "$type" in
		ag71xx|ar231x)
			which mii-tool >/dev/null || {
				_software package_install mii-tool >/dev/null

				which mii-tool >/dev/null || \
					return 1
			}

			line="$( mii-tool ${LANDEV:-empty_landev} )"
			[ -n "$debug" ] && \
				_log do $funcname daemon debug "type: $type - line '$line'"

			case "$line" in
				*"link ok"*)			# "negotiated 100baseTx-FD, link ok"
					case "$line" in
						*"-FD,"*)
							duplex="full"
						;;
						*)
							duplex="half"
						;;
					esac

					case "$line" in
						*" 100baseTx"*)
							_switch symbol $duplex 100
						;;
						*)
							_switch symbol unknown
						;;
					esac
				;;
				*)
					echo -n "-"
				;;
			esac
		;;
		bcm53xx)
			which robocfg >/dev/null || {
				_software package_install robocfg >/dev/null

				which robocfg >/dev/null || \
					return 1
			}

			for port in 0 gap 1 2 3 4; do {		# [ WAN | LAN LAN LAN LAN ]

				if [ "$port" = "gap" ]; then
					echo -n "."
				else
					line="$( robocfg show 2>/dev/null | fgrep "Port ${port}(" )"
					[ -n "$debug" ] && \
						_log do $funcname daemon debug "type: $type port: $port line '$line'"

					case "$line" in
						*"DOWN"*)
							echo -n "-"
						;;
						*)
							case "$line" in
								*"0FD enabled"*)
									duplex="full"
								;;
								*)
									duplex="half"
								;;
							esac

							case "$line" in
								*":  10"*)
									_switch symbol $duplex 10
								;;
								*": 100"*)
									_switch symbol $duplex 100
								;;
								*)
									_switch symbol unknown
								;;
							esac
						;;
					esac
				fi
			} done
		;;
		rtl8366rb)
			which swconfig >/dev/null || \
				return 1

			for port in 0 gap 1 2 3 4; do {		# [ WAN | LAN LAN LAN LAN ]

				if [ "$port" = "gap" ]; then
					echo -n "."
				else
					line="$( swconfig dev $type port $port show | fgrep "link: port:" )"
					[ -n "$debug" ] && \
						_log do $funcname daemon debug "type: $type port: $port line '$line'"

					case "$line" in
						*"link: port:$port link: down"*)
							echo -n "-"
						;;
						*"link:up"*)
							case "$line" in
								*"full-duplex"*)
									duplex="full"
								;;
								*)
									duplex="half"
								;;
							esac

							case "$line" in
								*"speed:10baseT"*)
									_switch symbol $duplex 10
								;;
								*"speed:100baseT"*)
									_switch symbol $duplex 100
								;;
								*"speed:1000baseT"*)
									_switch symbol $duplex 1000
								;;
								*)
									_switch symbol unknown
								;;
							esac
						;;
					esac
				fi
			} done
		;;
	esac
}

_switch_symbol()
{
	local duplex="$1"
	local speed="$2"

	case "${duplex}${speed}" in
		"half10")
			echo -n "a"
		;;
		"half100")
			echo -n "b"
		;;
		"half1000")
			echo -n "c"
		;;
		"full10")
			echo -n "A"
		;;
		"full100")
			echo -n "B"
		;;
		"full1000")
			echo -n "C"
		;;
		*)
			echo -n "Z"		# means: 'unknown'
		;;
	esac
}

