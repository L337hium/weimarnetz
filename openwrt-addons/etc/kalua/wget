_wget_do ()								# SENS: fetching an URL $1, aborting after $2 seconds if no success
{
	local FUNC="wget_do"
	local URL="$1"
	local MAX="${2:-15}"						# maximal running time in seconds, defaults to 15sec
	local option="$3"						# e.g. "noproxy"|"continue $filename" or even "noproxy,continue $filename"
	local MASK1="$3"
	local MASK2="$4"						# strings (e.g. passwords) from URL, which should be masked during logging, when prio is > debug

	local PID_WGET PID_LINE PID_LINE_NOW RC
	local C=0							# counter (raising) for maximal seconds
	local proxy_command file_option filename
	local list_wget_pids_initial list_wget_pids_after_launch list_wget_pids_myself element
	local pidbackground i pidnum mycmdline myerror

	case "$URL" in
		*127.0.0.1*|*:[0-9]*)			# not for local urls or urls with special ports
		;;					# fixme! be more correct: 127.0.0.0/8 + ipv6
		*)
			[ -n "$http_proxy" -a -z "$option" ] && {
				_log do $FUNC daemon debug "using proxy $http_proxy"
				proxy_command="-Y on"
			}
		;;
	esac

	case "$option" in
		*"continue"*)
			filename="$( echo "$option" | cut -d' ' -f2 )"
			file_option="-c"
		;;
		*)
			filename="-"
		;;
	esac

	_log do $FUNC daemon debug "max ${MAX}s, ${#URL} bytes, wget $proxy_command -qO $filename $file_option '$URL'"

	list_wget_pids_initial="$( pidof wget )"
	( wget $proxy_command -qO $filename $file_option "$URL" 2>/tmp/${FUNC}_$$.error || echo "$?" >/tmp/${FUNC}_$$ ) &
	pidbackground=$!
	list_wget_pids_after_launch="$( pidof wget )"

	[ -z "$list_wget_pids_after_launch" ] && {
		[ -n "$pidbackground" ] && {
			for i in 1 2 3 4 5; do {
				pidnum=$(( $pidbackground + $i ))
				[ -e "/proc/$pidnum/cmdline" ] && {
					read mycmdline <"/proc/$pidnum/cmdline"
					case "$mycmdline" in
						wget*)
							_log do $FUNC daemon info "pidnum by parent process: $pidbackground -> $pidnum"
							list_wget_pids_after_launch="$pidnum"
							break
						;;
					esac
				}
			} done
		}
	}

	element_in_list()
	{
		local element="$1"
		local list="$2"

		echo " $list " | grep -q " $element "
	}

	for element in $list_wget_pids_after_launch; do {
		element_in_list "$element" "$list_wget_pids_initial" || {
			list_wget_pids_myself="$list_wget_pids_myself $element"
		}
	} done

	for element in $list_wget_pids_myself; do {
		PID_WGET="$element"
		break
	} done

	[ -e "/tmp/${FUNC}_$$.error" ] && {
		read myerror <"/tmp/${FUNC}_$$.error"

		if [ ${#myerror} -eq 0 ]; then
			_log do $FUNC daemon debug "[MESSAGE] empty"
		else
			_log do $FUNC daemon debug "[MESSAGE] $( cat "/tmp/${FUNC}_$$.error" )"
		fi

		rm "/tmp/${FUNC}_$$.error"
	}

	case ${PID_WGET:-unset} in
		unset)
			_log do $FUNC daemon debug "empty PID after fetching '$URL' - was faster than light?"
			return 0
		;;
		*)
			read PID_LINE 2>/dev/null </proc/$PID_WGET/cmdline	# exact line of ps-output
		;;
	esac

	while [ -e "/proc/$PID_WGET" ]; do {				# wget-process in tasklist?
		sleep 1
		C=$(( $C + 1 ))
		
		[ $C -gt $MAX ] && {					# maximal execution time reached

			PID_LINE_NOW=
			read PID_LINE_NOW 2>/dev/null </proc/$PID_WGET/cmdline		# is now empty, when task has ended

			[ "$PID_LINE" = "$PID_LINE_NOW" ] && {		# is this really the started process?
	
				[ -n "$MASK1" ] && {
					URL="$( echo "$URL" | sed -e "s/$MASK1/hidden/" -e "s/$MASK2/hidden/" )"
				}

				for element in $list_wget_pids_myself; do {
					_log do $FUNC daemon info "error during fetching '$URL' - killing PID '$element' after $C seconds"
					_watch hanging_command wget_selfkill $element
					_watch hanging_command wget_selfkill $element
				} done

				[ -z "$initial_wgets" ] && {
					leaving_wgets="$( pidof wget )" && {
						_log do $FUNC daemon info "leaving wgets: $leaving_wgets , do killall"
						killall wget
					}
				}

				return 1				# fixme! check if still there? zombie? reboot?
			}

			return 0					# OK, is another/new process with same PID
		}
	} done

	if [ -e /tmp/${FUNC}_$$ ]; then
		read RC </tmp/${FUNC}_$$
		rm /tmp/${FUNC}_$$
		_log do $FUNC daemon info "[ERR] returning $RC after fetching '$URL'"
		return $RC
	else
		return 0
	fi
}
