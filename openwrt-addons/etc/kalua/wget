_wget_do ()								# SENS: fetching an URL $1, aborting after $2 seconds if no success
{
	local FUNC="wget_do"
	local URL="$1"
	local MAX="${2:-15}"						# maximal running time in seconds, defaults to 15sec
	local option="$3"						# e.g. 'noproxy'
	local MASK1="$3"
	local MASK2="$4"						# strings (e.g. passwords) from URL, which should be masked during logging, when prio is > debug

	local PID_WGET PID_LINE PID_LINE_NOW RC
	local C=0							# counter (raising) for maximal seconds
	local proxy_command initial_wgets leaving_wgets

	initial_wgets="$( pidof wget )" && {
		_log do $FUNC daemon info "initial_wgets: $initial_wgets"
	}

	case "$URL" in
		*127.0.0.1*|*:[0-9]*)			# not for local urls or urls with special ports
		;;					# fixme! be more correct: 127.0.0.0/8 + ipv6
		*)
			[ -n "$http_proxy" -a -z "$option" ] && {
				_log do $FUNC daemon debug "using proxy $http_proxy"
				proxy_command="-Y on"
			}
		;;
	esac

	_log do $FUNC daemon debug "max ${MAX}s, wget $proxy_command -qO - '$URL'"

	( wget $proxy_command -qO - "$URL" 2>/dev/null || echo "$?" >/tmp/${FUNC}_$$ ) &
	PID_WGET="$!"		# fixme! it doesnt work, if hanging process

	case ${PID_WGET:=unset} in
		unset)
			_log do $FUNC daemon info "empty PID? after fetching '$URL'"
			return 1
		;;
		*)
			read PID_LINE 2>/dev/null </proc/$PID_WGET/cmdline	# exact line of ps-output
		;;
	esac

	while [ -e "/proc/$PID_WGET" ]; do {				# wget-process in tasklist?
		sleep 1
		C=$(( $C + 1 ))
		
		[ $C -gt $MAX ] && {					# maximal execution time reached

			PID_LINE_NOW=
			read PID_LINE_NOW 2>/dev/null </proc/$PID_WGET/cmdline		# is now empty, when task has ended

			[ "$PID_LINE" = "$PID_LINE_NOW" ] && {		# is this really the started process?
	
				[ -n "$MASK1" ] && {
					URL="$( echo "$URL" | sed -e "s/$MASK1/hidden/" -e "s/$MASK2/hidden/" )"
				}

				_log do $FUNC daemon info "error during fetching '$URL' - killing PID '$PID_WGET' after $C seconds"

				_watch hanging_command wget_selfkill $PID_WGET
				_watch hanging_command wget_selfkill $PID_WGET

				if [ -z "$initial_wgets" ]; then
					leaving_wgets="$( pidof wget )" && {
						_log do $FUNC daemon info "leaving wgets: $leaving_wgets"
					}
				else
					pidof wget >/dev/null && {
						_log do $FUNC daemon info "killall remaining wgets"
						killall wget
					}
				fi

				return 1				# fixme! check if still there? zombie? reboot?
			}

			return 0					# OK, is another/new process with same PID
		}
	} done

	if [ -e /tmp/${FUNC}_$$ ]; then
		read RC </tmp/${FUNC}_$$
		rm /tmp/${FUNC}_$$
		_log do $FUNC daemon info "[ERR] returning $RC after fetching '$URL'"
		return $RC
	else
		return 0
	fi
}
