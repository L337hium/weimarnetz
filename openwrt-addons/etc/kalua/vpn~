_vpn_start ()
{
	local FUNC="vpn_start"
	_vpn_defer_start
	_vpn_build_vars

	[ $INETOFFER = "false" -a -z "$( uci get system.@vpn[0].force )" ] && {
		_log do $FUNC daemon debug "no local default gateway - abort"
		return 1
	}

	[ -z "$NODE_NUMBER" ] && {
		_log do $FUNC daemon debug "node not configured yet - abort"
		return 1
	}
		
	_vpn_server_participation_request
	_vpn_remove_vtun_conf
	_vpn_write_vtun_conf
	_vpn_remove_olsr_conf
	_vpn_write_olsr_conf
	_vpn_tunnel_start && {
		pidof olsrd >/dev/null && {
			[ "$( _vpn_proto )" = "olsr" ] && {
				_scheduler add "restart_olsr"
				return
			}
		}
		_log_do $FUNC daemon debug "olsr not up or olsr-proto unwished, no need for restart of olsrd"
	}
}


_vpn_stop ()
{
	_vpn_build_vars "stop"
	_vpn_remove_vtun_conf
	_vpn_remove_olsr_conf
	_vpn_tunnel_stop
	
}

_vpn_restart ()
{
	_vpn_stop
	_vpn_start
}

_vpn_get_static_route ()			# prevents tunneling over mesh, when local defgw gets broken
{
	local DEFAULT_GATEWAY_IP="$( ip route list exact 0.0.0.0/0 | head -n1 | cut -d" " -f3 )"
	
	[ -n "$( uci get system.@vpn[0].force )" ] && return
	
	case $INETOFFER in
		lan)
			echo -n "$DEFAULT_GATEWAY_IP dev $LANDEV"
		;;
		pppoe)
			echo -n "$( ip route list exact 0.0.0.0/0 dev ppp0 | head -n1 | cut -d" " -f3 ) dev ppp0"
		;;
		*)
			echo -n "$DEFAULT_GATEWAY_IP dev $WANDEV"
		;;
	esac
}

_vpn_tunnel_stop ()
{

}

_vpn_tunnel_start ()
{
	local FUNC="vpn_tunnel_start"
	local PORT="$( uci get system.@vpn[0].port )"
	[ -n "$PORT" ] && {
		PORT="-P $PORT"
	}
	
	[ ! -e "$VTUN" ] && {
		_log do $FUNC daemon debug "no configfile - abort"
		return
	}
	
	_system insmod tun || {
		_software package_install kmod-tun	# + 12 k
		_system insmod tun || return 1
	}
	
	_log do $FUNC daemon debug "starting vtun with config '$VTUN'"
	
	vtund -f $VTUN $HOSTNAME $SERV $PORT 2>/dev/null || {

		_log do $FUNC daemon debug "error"	
		
		if _software package_is_not_installed vtun ; then
		
			_log do $FUNC daemon debug "vtund and/or kmod-tun not installed"
		
			_vpn_remove_vtun_conf
			
			_software make_free_space 1000
			_software package_install vtun		# +27 k
								# ----
								# +27 k
		else
			vtund - 2>/dev/null | grep -q -i vtun || {
			
				_log do $FUNC daemon debug "vtund is installed, but has an serious problem"

				# under mysterious circumstances (e.g. low disk space during installing),
				# vtund claims to have a "bus error", so we should reinstall it
			
				_software package_remove  vtun
				_software package_install vtun
			}
		fi
		
		return 1	# cron trys later a vpn-restart
	}
}

_vpn_write_vtun_conf()
{
	local func="vpn_write_vtun_conf"
	local LINE=""
	local STATIC_ROUTE="$( _vpn_get_static_route )"
	local particpant_net="10.63.0.0/16"			# fixme! hardcoded
	local mytable="weimarnetz_anonym"
	local mtu="1450"					# fixme!
	local anonym

	[ -n "$( uci get system.@vpn[0].anonym )" ] && {
		anonym="# (inactiv):"
	}

	cat >$VTUN <<EOF
$HOSTNAME {
	passwd ff ;
	type ether ;		# fixme! olsrd-bug: /32 interface needed?
	persist yes ;		# fixme! add 'timeout 60' ?

	up {
		program "logger -p daemon.info -t $0_vtund.conf link_up %%:$HOSTNAME" ;

		program "ip address add $WIFIVPNCLIENTADR/$WIFIVPNPRE dev %% label %%:$HOSTNAME" wait ;
		program "ip address add $WIFIVPNCLIENTADR/32 dev %%" wait;
		program "ip link set dev %% mtu $mtu up" wait;
		program "ip route add $VPN_SERVER via $STATIC_ROUTE" wait;		# + table local?

		program "grep -q $mytable /etc/iproute2/rt_tables || echo 50 $mytable >>/etc/iproute2/rt_tables" ;
		program "$anonym ip rule add from $particpant_net prio 30002 table $mytable" ;
		program "$anonym ip rule add to $particpant_net prio 30001 lookup main" ;
		program "$anonym ip rule add from $LANNET/$LANPRE prio 30000 table main" ;
		program "$anonym ip route add default via $WIFIVPNSERVERADR dev %% table $mytable" ;
		program "$anonym ip route flush cache" ;
	} ;
		# fixme! static_route must only be valid for programs on this machine
	down {
		program "logger -p daemon.info -t $0_vtund.conf link_down %%:$HOSTNAME" ;

		program "$anonym ip route del default via $WIFIVPNSERVERADR dev %% table $mytable" ;
		program "$anonym ip rule del from $LANNET/$LANPRE prio 30000 table main" ;
		program "$anonym ip rule del to $particpant_net prio 30001 lookup main" ;
		program "$anonym ip rule del from $particpant_net prio 30002 table $mytable" ;

		program "ip route del $VPN_SERVER via $STATIC_ROUTE" ;
		program "ip link set dev %% down" ;
	} ;
}
EOF

	_log do $func daemon debug "ready"
	while read LINE; do {
		_log do $func daemon debug "${VTUN} +'$LINE'"
	} done <$VTUN
}

_vpn_remove_vtun_conf ()
{
	local FUNC="vpn_remove_vtun_conf"

	[ -e $VTUN ] && {
		_log do $FUNC daemon debug "working"
		rm $VTUN
	}
}

_vpn_defer_start ()
{
	DIRTY=
	[ "$( uci get system.@vpn[0].active )" = "0" ]	&& DIRTY="system.@vpn[0].active set to 0"
	[ -e "/tmp/LOWMEM" ]				&& DIRTY="lowmem"
	[ -n "$FAILSAFE" ]				&& DIRTY="failsafe"
	[ -n "$READONLY" ]				&& DIRTY="readonly"
	[ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]	&& DIRTY="software not fully installed"

	[ -n "$DIRTY" ] && {
		_log do init daemon debug "call: '$1' - abort: '$DIRTY'"
		exit
	}
}

_vpn_remove_olsr_conf()
{
	local FUNC="vpn_remove_olsr_conf"
	local UCIRETURN
	local OLSRIFACECOUNT=0

	#remove network config
	uci delete network.tap0
	_log do $FUNC daemon debug "removed network config"
	#remove olsr config
	UCIRETURN=$( uci get olsrd.@Interface[$OLSRIFACECOUNT].interface="tap0" )
	while ([ "$UCIRETURN" != "tap0" ] && [ -n "$UCIRETURN" ]); do {
		OLSRIFACECOUNT=$(( OLSRIFACECOUNT + 1 ))
		_log do $FUNC daemon debug "scanning olsrd.conf for interface tap0, round $OLSRIFACECOUNT Last output: $UCIRETURN iface"
		UCIRETURN="$( uci get olsrd.@Interface[$OLSRIFACECOUNT].interface )"
		} done

	[ "$UCIRETURN" = "tap0" ] && {
		uci delete olsrd.@Interface[$OLSRIFACECOUNT]
		_log do $FUNC daemon debug "removed olsr config"
		}

	_log do $FUNC daemon debug "ready, committing uci settings"
	uci commit
}

_vpn_write_olsr_conf()
{
	local FUNC="vpn_write_olsr_conf"
	local LINE=""
	local INTERFACE="tap0"
	local OLSRIFACECOUNT=0
	local TAPFOUND=""
	local UCIRETURN

	[ "$( _vpn_proto )" != "olsr" ] && INTERFACE=none		# fixme! this is dirty...
	
	SPEED=$( uci get olsrd.@olsrd[0].speed )			# fixme! maybe multiply by 10? (lowering traffic)
	SPEED=${SPEED:=5}

        FEYE=$( uci get olsrd.@olsrd[0].fisheye )
	if [ "0" != "$FEYE" ];then
		TCINT=$(( 2 * SPEED / 4 ))
		test $TCINT -eq 0 && TCINT=1
		COVER=7
		FEYE=1
	else
		TCINT=$(( 2 * SPEED ))
		COVER=3
		FEYE=0
	fi
	
	#network settings
	uci set network.tap0="interface"
	uci set network.tap0.ifname="tap0"
	_log do $FUNC daemon debug "network settings done"

	#olsrd settings
	UCIRETURN=$( uci get olsrd.@Interface[$OLSRIFACECOUNT].interface )
	while ([ "$UCIRETURN" != "tap0" ] && [ -n "$UCIRETURN" ]); do {
		OLSRIFACECOUNT=$(( OLSRIFACECOUNT + 1 ))
		_log do $FUNC daemon debug "scanning olsrd.conf for interface tap0, round $OLSRIFACECOUNT Last output: $UCIRETURN iface"
		UCIRETURN="$( uci get olsrd.@Interface[$OLSRIFACECOUNT].interface )"
		} done

	[ "$UCIRETURN" = "tap0" ] && TAPFOUND="jep"

	[ -z "$TAPFOUND" ] && {
		uci add olsrd Interface
		OLSRIFACECOUNT=-1
		}

	uci set olsrd.@Interface[$OLSRIFACECOUNT].interface="tap0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].HelloInterval="$(( SPEED / 2 + 1 )).0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].HelloValidityTime="$(( 25 * SPEED )).0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].TcInterval="$TCINT.0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].TcValidityTime="$(( 100 * SPEED )).0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].MidInterval="$(( 5 * SPEED )).0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].MidValidityTime="$(( 100 * SPEED )).0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].HnaInterval="$(( 2 * SPEED )).0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].HnaValidityTime="$(( 25 * SPEED )).0"
	uci set olsrd.@Interface[$OLSRIFACECOUNT].Ip4Broadcast="$WIFIVPNSERVERADR"

						# these are the values for fff v1.6.34
	_log do $FUNC daemon debug "ready, committing uci settings"
						# todo: log olsrd settings to debug log
	uci commit

}

_vpn_build_vars ()
{
	NODE_NUMBER="$( uci get system.@profile[0].nodenumber )"
	HOSTNAME="$( uci get system.@system[0].hostname )"
	[ -z "$HOSTNAME" ] && HOSTNAME="node$NODE_NUMBER"

	VPN_SERVER="$( uci get system.@vpn[0].ipaddr )"
	
	SERV="$( uci get system.@vpn[0].hostname )"	# _ip4|_ip6 fallback?
	CONF="/var/etc/olsrd.conf"			# old_style
	KNOT=$NODE_NUMBER
	VTUN="/tmp/vtund.conf"

	[ "$1" != "stop" ] && INETOFFER=$( _net local_inet_offer )
	
	eval "$( _ipsystem do )"
}

_vpn_server_participation_request ()
{
	local func="vpn_server_participation_request" 
	local OUTPUT=""
	local URL="http://$VPN_SERVER/freifunk/vpn/"
	local QUERY=""
	local ADMINMAIL="$( uci get freifunk.contact.mail )"
	
	QUERY="${QUERY}?CLIENTIP=${WIFIVPNCLIENTADR}"
	QUERY="${QUERY}&SERVERIP=${WIFIVPNSERVERADR}"
	QUERY="${QUERY}&NAME=$HOSTNAME"
	QUERY="${QUERY}&PROTO=$( _vpn_proto )"
	QUERY="${QUERY}&EMAIL=$( _sanitizer do "${ADMINMAIL:=unset@box.local}" urlvalue )"
	QUERY="${QUERY}&COMMENT=city${FFF_CITY}_node${NODE_NUMBER}_profile$( uci get system.@profile[0].name )"

	_log do $FUNC daemon debug "query: '${URL}${QUERY}'"
	
	OUTPUT="$( wget 2>/dev/null -O - "${URL}${QUERY}" )"	# fixme! encode unsafe URL chars (like email above)

	_log do $FUNC daemon debug "answer: '$OUTPUT'"
}

_vpn_proto ()						# defaults to 'olsr'
{
	local PROTO="$( uci get system.@vpn[0].proto )"
	
	echo -n "${PROTO:-olsr}"			# fixme! none,olsr,batman,batman-adv,...
}
