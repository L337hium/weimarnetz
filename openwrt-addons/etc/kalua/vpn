_vpn_start ()
{
	local FUNC="vpn_start"
	_vpn_defer_start
	_vpn_build_vars

	[ $INETOFFER = "false" -a -z "$( uci get system.@vpn[0].force )" ] && {
		_log do $FUNC daemon debug "no local default gateway - abort"
		return 1
	}
	
	[ "$( uci get system.@vpn[0].enable )" = "1" ] || {
		_log do $FUNC daemon debug "vpn disabled by config - abort"
		return 1
	}

	[ -z "$NODE_NUMBER" ] && {
		_log do $FUNC daemon debug "node not configured yet - abort"
		return 1
	}
		
	_vpn_remove_vtun_conf
	_vpn_write_vtun_conf
	_vpn_tunnel_start 
}


_vpn_stop ()
{
	_vpn_build_vars "stop"
	_vpn_remove_vtun_conf
	_vpn_tunnel_stop
	
}

_vpn_restart ()
{
	_vpn_stop
	_vpn_start
}

_vpn_get_static_route ()			# prevents tunneling over mesh, when local defgw gets broken
{
	local DEFAULT_GATEWAY_IP="$( ip route list exact 0.0.0.0/0 | head -n1 | cut -d" " -f3 )"
	
	[ -n "$( uci get system.@vpn[0].force )" ] && return
	
	case $INETOFFER in
		lan)
			echo -n "$DEFAULT_GATEWAY_IP dev $LANDEV"
		;;
		pppoe)
			echo -n "$( ip route list exact 0.0.0.0/0 dev pppoe-wan | head -n1 | cut -d" " -f3 ) dev pppoe-wan"
		;;
		*)
			echo -n "$DEFAULT_GATEWAY_IP dev $WANDEV"
		;;
	esac
}

_vpn_tunnel_stop ()
{
	local FUNC="vpn_tunnel_stop"
	
	pidof vtund >/dev/null && {

		_log do $FUNC daemon debug "killing tunnel-daemon"		
		killall vtund
		sleep 2
	
		pidof vtund >/dev/null && {

			_log do $FUNC daemon debug "daemon still alive, trying hard"
			killall -9 vtund
			sleep 2
			
			pidof vtund >/dev/null && {

				_log do $FUNC daemon debug "daemon still alive - error"
			}
		}
	}
}

_vpn_tunnel_start ()
{
	local FUNC="vpn_tunnel_start"
	[ -n "$PORT" ] && {
		PORT="-P $PORT"
	}
	
	[ ! -e "$VTUN" ] && {
		_log do $FUNC daemon debug "no configfile - abort"
		return
	}
	
	
	_log do $FUNC daemon debug "starting vtun with config '$VTUN'"
	
	vtund -f $VTUN $HOSTNAME $SERV $PORT 2>/dev/null || {

		_log do $FUNC daemon debug "error"	
		
		if _software package_is_not_installed vtun ; then
		
			_log do $FUNC daemon debug "vtund and/or kmod-tun not installed"
		
		else
			vtund - 2>/dev/null | grep -q -i vtun || {
			
				_log do $FUNC daemon debug "vtund is installed, but has an serious problem"

			}
		fi
		
		return 1	# cron trys later a vpn-restart
	}
}

_vpn_write_vtun_conf()
{
	local func="vpn_write_vtun_conf"
	local LINE=""
	local STATIC_ROUTE="$( _vpn_get_static_route )"
	local particpant_net="10.63.0.0/16"			# fixme! hardcoded
	local mytable="weimarnetz_anonym"
	local anonym

	[ -n "$( uci get system.@vpn[0].anonym )" ] && {
		anonym="# (inactiv):"
	}

	cat >$VTUN <<EOF
$HOSTNAME {
	passwd ff ;
	type ether ;		# fixme! olsrd-bug: /32 interface needed?
	persist yes ;		# fixme! add 'timeout 60' ?

	up {
		program "logger -p daemon.info -t $0_vtund.conf link_up %%:$HOSTNAME" ;

		program "ip address add $WIFIVPNCLIENTADR/$WIFIVPNPRE dev %% label %%:Node$KNOT" wait ;
		program "sleep 10" wait;
		program "ip address add $WIFIVPNCLIENTADR/32 dev %%" wait;
		program "ip link set dev %% mtu $MTU up" wait;
		program "ip route add $VPN_SERVER via $STATIC_ROUTE" wait;		# + table local?

		program "grep -q $mytable /etc/iproute2/rt_tables || echo 50 $mytable >>/etc/iproute2/rt_tables" ;
		program "$anonym ip rule add from $particpant_net prio 30002 table $mytable" ;
		program "$anonym ip rule add to $particpant_net prio 30001 lookup main" ;
		program "$anonym ip rule add from $LANNET/$LANPRE prio 30000 table main" ;
		program "$anonym ip route add default via $WIFIVPNSERVERADR dev %% table $mytable" ;
		program "$anonym ip route flush cache" ;
	} ;
		# fixme! static_route must only be valid for programs on this machine
	down {
		program "logger -p daemon.info -t $0_vtund.conf link_down %%:$HOSTNAME" ;

		program "$anonym ip route del default via $WIFIVPNSERVERADR dev %% table $mytable" ;
		program "$anonym ip rule del from $LANNET/$LANPRE prio 30000 table main" ;
		program "$anonym ip rule del to $particpant_net prio 30001 lookup main" ;
		program "$anonym ip rule del from $particpant_net prio 30002 table $mytable" ;

		program "ip route del $VPN_SERVER via $STATIC_ROUTE" ;
		program "ip link set dev %% down" ;
	} ;
}
EOF

	_log do $func daemon debug "ready"
	while read LINE; do {
		_log do $func daemon debug "${VTUN} +'$LINE'"
	} done <$VTUN
}

_vpn_remove_vtun_conf ()
{
	local FUNC="vpn_remove_vtun_conf"

	[ -e $VTUN ] && {
		_log do $FUNC daemon debug "working"
		rm $VTUN
	}
}

_vpn_defer_start ()
{
	DIRTY=
	[ "$( uci get system.@vpn[0].active )" = "0" ]	&& DIRTY="system.@vpn[0].active set to 0"
	[ -e "/tmp/LOWMEM" ]				&& DIRTY="lowmem"
	[ -n "$FAILSAFE" ]				&& DIRTY="failsafe"
	[ -n "$READONLY" ]				&& DIRTY="readonly"
	[ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]	&& DIRTY="software not fully installed"

	[ -n "$DIRTY" ] && {
		_log do init daemon debug "call: '$1' - abort: '$DIRTY'"
		exit
	}
}

_vpn_build_vars ()
{
  # load json lib
  . /usr/share/libubox/jshn.sh

  #vpn domain
  DOMAIN="$( uci get system.@vpn[0].domain )"
  #vpn prefix
  PREFIX="$( uci get system.@vpn[0].prefix )"
  #json info url
  JSONPATH="$( uci get system.@vpn[0].jsonpath )"

  #temporary number for comparisons
  CLIENTS=12345
  vpnNr=1
  SERVER=$PREFIX$vpnNr.$DOMAIN
  vpnServerResponse="$( ping -q -c 1 -W 1 $SERVER 2>/dev/null |grep round-trip|cut -f 4 -d ' '|cut -f 0 -d '/'|sed -e 's/\.//g' )"
  [ -n "$responseTime" ] && {
    URL="http://$SERVER$JSONPATH"
    eval $( jshn -r "$( _wget do "$URL" 1 2>/dev/null )" 2>/dev/null )
    [ -n "$JSON_VAR_clients" ] && {
      CLIENTS=${JSON_VAR_clients}
      PORT=${JSON_VAR_port_vtun_nossl_nolzo}
      MTU=${JSON_VAR_maxmtu}
      vpnServerName=$SERVER
   }
  }

  for vpnNr in 2 3 4 5 6 7 8 9 10
  do
    SERVER=$PREFIX$vpnNr.$DOMAIN
    responseTime="$( ping -q -c 1 -W 1 $SERVER 2>/dev/null |grep round-trip|cut -f 4 -d " "|cut -f 0 -d "/"|sed -e 's/\.//g' )"
    [ -n $responseTime  ] && {
      URL="http://$SERVER$JSONPATH"
      eval $( jshn -r "$( _wget do "$URL" 1 2>/dev/null )" 2>/dev/null )
      if  test 2>/dev/null "$JSON_VAR_clients" -lt "$CLIENTS" ;
      then
        CLIENTS=${JSON_VAR_clients}
        PORT=${JSON_VAR_port_vtun_nossl_nolzo}
        MTU=${JSON_VAR_maxmtu}
        vpnServerResponse=$responseTime
        vpnServerName="$SERVER"
      fi
    }
  done

  [[ $CLIENTS = 12345 ]] && {
    CLIENTS=
  }

	VPN_SERVER="$vpnServerName"

	NODE_NUMBER="$( uci get system.@profile[0].nodenumber )"
	HOSTNAME="$( uci get system.@system[0].hostname )"
	[ -z "$HOSTNAME" ] && HOSTNAME="node$NODE_NUMBER"

	
	SERV="$( uci get system.@vpn[0].hostname )"	# _ip4|_ip6 fallback?
	CONF="/var/etc/olsrd.conf"			# old_style
	KNOT=$NODE_NUMBER
	VTUN="/tmp/vtund.conf"

	[ "$1" != "stop" ] && INETOFFER=$( _net local_inet_offer )
	
	eval "$( _ipsystem do )"
}


_vpn_proto ()						# defaults to 'olsr'
{
	local PROTO="$( uci get system.@vpn[0].proto )"
	
	echo -n "${PROTO:-olsr}"			# fixme! none,olsr,batman,batman-adv,...
}
