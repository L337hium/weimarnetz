# _mail send "bittorf wireless )) Breitband Rehungen" "breitband-rehungen@gmx.de" "ANREDE VORNAME NACHNAME" "bittorf@bluebottle.com" "mail3-2010aug26-nach_Zusendung_Vertrag.txt" "STRASSE HAUSNUMMER" "ANREDE VORNAME" "NACHNAME" "/tmp/wlansystem-HotelZumnorde-2010aug05_16uhr42-32x1-Wochen-Ticket-Etiketten.pdf wlansystem-HotelZumnorde-2010aug05_16uhr42-32x1-Wochen-Ticket-Etiketten.pdf"

# while read LINE; do set -- $LINE; echo "_mail send 'newsletter XY' wlan-assistance@gmx.de '$3 $4' $( for M in $LINE; do :; done; echo $M | sed 's/[<>]//g' ) /tmp/newsletter.txt"; echo "sleep 60"; done </tmp/.muttrc_alias >/tmp/doit.sh

_mail_pop3_check_stats()
{
	local funcname="mail_pop3_check_stats"
	local user="$(   uci get mail.@pop3[0].username )"
	local pass="$(   uci get mail.@pop3[0].password )"
	local server="$( uci get mail.@pop3[0].server	)"
	local port="$(   uci get mail.@pop3[0].port	)"
	local line rc_netstat
	local netcat_bin="nc"			# tested with busybox-netcat + gmx.net
	local answer answer_short

	local file="/tmp/$funcname"
	local uptime="$( _system uptime sec )"
	local uptime_lastcheck
	read uptime_lastcheck <"$file"

	[ $(( $uptime - ${uptime_lastcheck:-0} )) -lt 180 ] && {
		_log do $funcname daemon debug "no need to auth"
		return 0	# http://faq.gmx.de/messages/email/mailprogramme/smtp_sicherheit/3.html
	}

	_log do $funcname user debug "contacting server '$server'"

	answer="$( echo -e "USER $user\nPASS $pass\nSTAT\nQUIT\n" | $netcat_bin $server $port )"
	rc_netcat=$?
	answer_short="$( echo "$answer" | cut -d' ' -f1 | while read line; do echo -n "$line"; done )"	# removes LF/CR

	case "$answer_short" in			# normal answer:
		"+OK+OK+OK"*)			# +OK POP server ready H migmx104
			echo "$uptime" >"$file"	# +OK password required for user "0123456789"
			return 0		# +OK mailbox "0123456789" has 0 messages (0 octets) H migmx104
		;;				# +OK 0 0
	esac					# +OK POP server signing off

	_log do $funcname user info "[ERR] returncode netcat: '$rc_netcat' - '$server'-serveranswer: '$answer_short'"
	echo "$answer" | _log do $funcname user info

	return 1
}

_mail_send ()		# todo: we need a simple addressbook for phone,email,shortname,name...
{
	local           FUNC="mail_send"
	local      FROM_REAL="$1"	# ARG1, string (name,  format: title, surname name  )
	local      FROM_MAIL="$2"	# ARG2, string (email, format: recipient@domain.foo )
	local RECIPIENT_REAL="$3"	# ARG3, string (name)
	local RECIPIENT_MAIL="$4"	# ARG4, string (email)
	local       MAILFILE="$5"	# ARG5, string (name of file with body-text and variables)
	local           VAR1="$6"	# ARG6, string (user-defineable, for using in mail.txt)
	local           VAR2="$7"	# ARG7, string
	local           VAR3="$8"	# ARG8, string
	local      LIST_FILE="$9"
	local FILE
	local NETCAT_BIN="nc"

	[ ! -e "$MAILFILE" ] && {
		_log do $FUNC user crit "can't read '$MAILFILE' - aborting (usage: _$FUNC myname me@world.org yourname you@world.org mailfile"
		return
	}

	local SUBJECT="$( head -n1 $MAILFILE | sed "s#\$VAR1#$VAR1#g" )"
	local FQDN="$( uci get system.@system[0].hostname ).local"		# fixme! we should handshake the HELO with the servers name, not ours
	local ADMIN_REAL="$( uci get system.@admin[0].name )"
	local ADMIN_MAIL="$( uci get system.@admin[0].mail )"
	local MAIL="/tmp/outgoing_mail_$( _system date humanreadable )"
	local BOUNDARY="dc+cDN39EJAMEtIO"					# maybe random?

	_log do $FUNC daemon debug "[BEGIN]"

	_do ()
	{
		local text="$1"

		case "$text" in
			init)
				[ -e "$MAIL" ] && rm "$MAIL"
			;;
			linefeed)
				echo >>$MAIL -n "\n"
			;;
			*"&acute;"*)
#				echo -n "${text}\r\n" | sed 's/&acute;/Â/g' >>$MAIL	# fixme! it looks strange, here it decodes to "A-Dach"
				echo -n "${text}\r\n" | sed 's/&acute;//g'  >>$MAIL
			;;
			*)
				echo -n "${text}\r\n" >>$MAIL
			;;
		esac
	}

	netcat_version_information ()
	{
		$NETCAT_BIN --help 2>&1 | fgrep "BusyBox v"	&& return
		$NETCAT_BIN --help 2>&1 | fgrep "GNU netcat"	&& return
		$NETCAT_BIN -h     2>&1 | fgrep "netcat"	&& return
		$NETCAT_BIN -h     2>&1 | fgrep "[v"		&& return
	}

	wellform_mailaddress_and_realname()
	{
		local mailaddress="$1"
		local realname="$2"

		if [ -n "$realname" ]; then
			echo "\"$realname\" <$mailaddress>"
		else
			echo "<$mailaddress>"		# some Micro$oft Exchange Servers deny realnames which are not on a whitelist, so simply let it empty
		fi
	}

	_do init	
	_do "HELO ${FQDN}"
	_do "MAIL FROM: $( wellform_mailaddress_and_realname "$FROM_MAIL" "$FROM_REAL"		 )"
	_do "RCPT TO: $(   wellform_mailaddress_and_realname "$RECIPIENT_MAIL" "$RECIPIENT_REAL" )"
	_do "DATA"
	_do "From: $( wellform_mailaddress_and_realname "$FROM_MAIL" "$FROM_REAL"		)"
	_do "To: $(   wellform_mailaddress_and_realname "$RECIPIENT_MAIL" "$RECIPIENT_REAL"	)"	# can be multiple RCPT's:
#	_do "Cc: $(   wellform_mailaddress_and_realname "$ADMIN_MAIL" "$ADMIN_REAL"		)"

	_do "Date: $( _system date mail )"
	_do "Message-ID: <$( date +%s%d%b%y-%H_%M )@${FQDN}>"			# 121016909907May08-16_04@buffalo422.local

	_do "MIME-Version: 1.0"
	_do "Content-Type: multipart/mixed; boundary=\"${BOUNDARY}\""
	_do "Content-Disposition: inline"
	_do "Content-Transfer-Encoding: 8bit"

	_do "Organization: ${ADMIN_REAL}"
	_do "Reply-To: $( wellform_mailaddress_and_realname "$ADMIN_MAIL" "$ADMIN_REAL" )"
	_do "X-Mailer: netcat is $( netcat_version_information )"
	_do "X-Operating-System: $( cat /proc/version )"
	_do "X-Firmware: $FFF_VERSION / $FFF_PLUS_VERSION / $( _system version )"
	_do "Subject: ${SUBJECT}\r\n"
	_do linefeed

	_do "--${BOUNDARY}"
	_do "Content-Type: text/plain; charset=iso-8859-1"
	_do "Content-Disposition: inline"
	_do "Content-Transfer-Encoding: 8bit"
	_do ""

	IFS="
"
						# 1st/2nd line subject/empty
	sed '3,999!d' $MAILFILE |
	 sed	-e "s#\$VAR1#$VAR1#g" \
		-e "s#\$VAR2#$VAR2#g" \
	 	-e "s#\$VAR3#$VAR3#g" |
	  while read LINE; do {
	  	_do "$LINE"
	  } done

	unset IFS

	_do ""

	for FILE in $LIST_FILE; do {
		_do "--${BOUNDARY}"
		_do "Content-Type: $( _filetype detect_mimetype "$FILE" )"

		[ -e "$FILE.desc" ] && {
			_do "Content-Description: $( cat "$FILE.desc" )"
		}

		_do "Content-Disposition: attachment; filename=\"$( basename "$FILE" )\""
		_do "Content-Transfer-Encoding: quoted-printable"
		_do ""

		_mail encode_quoted_printable "$FILE" >>$MAIL
		_do ""
	} done

	[ -n "$FILE" ] && {
		_do "--${BOUNDARY}--"
	}

	_do "."
	_do "QUIT"

	_log do $FUNC daemon info "sending mail to '${RECIPIENT_MAIL}'"
	if _mail send_mailfile "$MAIL" ; then
		_log do $FUNC user notice "[OK] sent mail to '$RECIPIENT_MAIL' went fine"
	else
		_log do $FUNC user notice "[ERR] sending mail to '$RECIPIENT_MAIL' failed, but is re-scheduled"
		return 1
	fi
}

_mail_send_mailfile ()
{
	local MAILFILE="$1"			# must be ready formatted

	[ ! -e "$MAILFILE" ] && return 1

	local FUNC="mail_send_mailfile"
	local LINE OUT RC ERROR
	local NETCAT_BIN="nc"
	local SERVER="$( uci get mail.@smtp[0].server )"
	local PORT="$(   uci get mail.@smtp[0].port   )"
	local ERRORFILE="/tmp/$FUNC.error.$$"

	_mail pop3_check_stats || {			# pop before smtp must be configured on mailserver
		_scheduler add "_$FUNC $MAILFILE" force
	}

	# normal netcat output:
	# 220 mail.gmx.net GMX Mailservices ESMTP {mp017}
	# 250 mail.gmx.net GMX Mailservices {mp017}
	# 250 2.1.0 ok {mp017}
	# 250 2.1.5 ok {mp017}					// means "RCPT OK"
	# 354 mail.gmx.net Go ahead {mp017}
	# 250 2.6.0 Message accepted {mp017}
	# 221 2.0.0 GMX Mailservices {mp017}

	# error output:
	# 220 *******************************************
	# 250 mail.gmx.net GMX Mailservices {mp027}
	# 250 2.1.0 ok {mp027}
	# 250 2.1.5 ok {mp027}
	# 354 mail.gmx.net Go ahead {mp027}			// attachement?
	# 451 4.3.0 Temporary problem {mp027}

	cleanup ()
	{
		trap - HUP INT QUIT TERM
	}

	trap "_log do $FUNC daemon info function_cancelled; cleanup" HUP INT QUIT TERM

	sanitize_server_answer ()		# add '+' and remove LF/CR
	{
		echo "$1" |
		 while read LINE; do {
		 	_log do $FUNC daemon info "SERVER: $LINE"
		 } done

		echo "$1" |
		 cut -d' ' -f1 |
		  while read LINE; do {
		  	[ -n "$LINE" ] && {
		  		echo -n "+$LINE"
		  	}
		  } done
	}

	OUT="$( echo -e "$( cat "$MAILFILE" )" | $NETCAT_BIN $SERVER $PORT 2>"$ERRORFILE" )"; RC=$?
	OUT="$( sanitize_server_answer "$OUT" )"

	case "$OUT" in
		"+220+250+250+250+354+250+221"*)	# fixme! maybe too strict...
			case "$OUT" in			# fixme! for each RCPT we must add an additional "250 2.1.5"
				*"+354+250+221")
					rm "$MAILFILE"
					rm "$ERRORFILE"
					cleanup
					return 0
				;;
			esac
		;;
		*)
			read ERROR <"$ERRORFILE"
			rm "$ERRORFILE"

			_log do $FUNC user info "[ERR] returncode: '$RC' - '$SERVER'-answer: '$OUT' message: '$ERROR' - debug file '$MAILFILE'"

			case "$ERROR" in
				*"No route to host"*)
					_log do $FUNC user alert "[ERR] during smtp to $SERVER, message: $ERROR, file: $MAILFILE, port blocked?"
				;;
				*)
					_scheduler add "_$FUNC $MAILFILE" force
				;;
			esac

			return 1
		;;
	esac
}

_mail_encode_quoted_printable ()	# http://en.wikipedia.org/wiki/Quoted-printable#Example | http://tools.ietf.org/html/rfc2045
{					# http://rand-mh.sourceforge.net/book/overall/mulmes.html	// debug: apt-get install qprint
	local FUNC="mail_encode_quoted_printable"

	local FILE="$1"			# fixme! there is no check for special chars, done already:
	local WRAP=75			# - tab/space at the end of a line to '=09' / '=20'
	local BUFFER="$WRAP"		# - newlines to '=0A'
	local WINDOWSTART=1		# - linewrap at 75 column + a softbreak '='
	local LINE OUTPUT		# - encoded special chars must not be line-wrapped

	_stopwatch start $FUNC

	IFS="
"
#	sed -e 's/	$/=09/' -e 's/ $/=20/' -e 's/$/=0A/' "$FILE" | while read LINE; do {
	sed 's/$/=0A/' "$FILE" | while read LINE; do {

		while true; do {

			case $LINE in
				"."*) LINE="=2E$( echo "$LINE" | cut -b 2-9999 )"
			esac

			if   [ ${#LINE} -lt $BUFFER ]; then

				echo -n "$LINE"
				BUFFER=$(( $BUFFER - ${#LINE} ))
				break		# fetch next LINE

			elif [ ${#LINE} -eq $BUFFER ]; then

				echo "${LINE}="
				BUFFER=$WRAP
				break		# fetch next LINE
			else
				# means: ${#LINE} -gt $BUFFER

				OUTPUT="$( echo "$LINE" | cut -b $WINDOWSTART-$BUFFER )"	# fixme! newer busybox can 'echo ${A:5:7}'

				case "$OUTPUT" in
					*=)					# =A0 at the end (encoded) must not be wrapped
						BUFFER=$(( $BUFFER - 1 ))
						OUTPUT="$( echo "$OUTPUT" | cut -b $WINDOWSTART-$BUFFER )"
					;;
					*=?)					# means: '=' and <anychar> at the end
						BUFFER=$(( $BUFFER - 2 ))
						OUTPUT="$( echo "$OUTPUT" | cut -b $WINDOWSTART-$BUFFER )"
					;;
					*=??)
						BUFFER=$(( $BUFFER - 3 ))
						OUTPUT="$( echo "$OUTPUT" | cut -b $WINDOWSTART-$BUFFER )"
					;;
				esac

				echo "${OUTPUT}="
				LINE="$( echo "$LINE" | cut -b $(( $BUFFER + 1 ))-9999 )"	# idea: simply raise startcounter
				BUFFER=$WRAP
			fi

		} done

	} done

	unset IFS

	_stopwatch stop $FUNC quiet
}
