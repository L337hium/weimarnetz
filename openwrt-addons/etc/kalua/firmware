_firmware_update_pmu ()		# poor mens update - simply overwrites all (shell-)files with tarball from repo
{				# fixme! safe hash of last successful installed tarball /www/TARBALL_STABLE_$HASH and only upgrade, if it differs
	local FUNC="firmware_update_pmu"
	local MODE="$( _firmware updatemode "$1" override)"

	case "$MODE" in
		stable|beta|testing)
			:
		;;
		*)
			_log do "$FUNC" daemon debug "abort, updatemode: $MODE"
			return
		;;
	esac

	local URL="$( _links firmware_url_get tarball $MODE )"		# enforce beta|stable|testing
	local hash_last_applied
	local hash_tarball="$( _links firmware_url_get tarball_hash $MODE )"
	local FILE_HASH_APPLIED="/etc/tarball_last_applied_hash"
	local WORKINGDIR="/tmp/pmu"
	local FILE="tarball.tgz"
	local TGZ="/tmp/$FILE"
	local SIZE TEMPFILE CRON_RESTART REPATCH_ALL
	local COUNT=0
	local COUNT_ERROR=0

	_cleanup ()
	{
		local option="$1"

		_log do "$FUNC" daemon debug "cleaning up - applied $COUNT files ($COUNT_ERROR errors)"
		cd /tmp
		rm -fR "$WORKINGDIR"
		rm -f  "$TGZ"

		[ "$option" = "reschedule" ] && {
			_scheduler add "_$FUNC $MODE" force
		}
	}

	read hash_last_applied <"$FILE_HASH_APPLIED"

	[ "$hash_tarball" = "${hash_last_applied:-empty}" ] && {
		_log do "$FUNC" daemon info "[OK] applied nothing - all seems up to date (tarball-hash known)"
		return 0
	}

	_log do "$FUNC" daemon debug "fetching tarball in '$MODE'-mode: '$URL'"
	wget -O "$TGZ" "$URL" || {
		_log do "$FUNC" daemon info "failed to download '$URL' - abort"

		_cleanup reschedule
		return 1
	}
	
	tar tzf "$TGZ" >/dev/null || {
		_log do "$FUNC" daemon info "fail during extract-test '$TGZ' - abort"

		_cleanup reschedule
		return 1
	}
	
	mkdir -p "$WORKINGDIR"
	mv "$TGZ" "$WORKINGDIR"
	cd "$WORKINGDIR"
	
	tar xzf "$FILE" || {
		 _log do "$FUNC" daemon alert "failed to extract '$TGZ' to '$WORKINGDIR' - abort"

		_cleanup reschedule
		return 1	 
	}
	rm "$FILE"

	_log do "$FUNC" daemon debug "tarball extracted - applying only files which differ"

	for TEMPFILE in $( find -type f ); do {

		[ "$( _file hash "$TEMPFILE" )" = "$( _file hash "/$TEMPFILE" )" ] || {

			_log do "$FUNC" daemon info "moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
			_software make_free_space "$(( 120 + $( _file size "$TEMPFILE" kb ) ))"

			case "$( basename "$TEMPFILE" )" in
				cron|S51crond*)
					_log do "$FUNC" daemon info "detected changed cron settings"
					CRON_RESTART=1
				;;
				S03patch-o-matic*)
					_log do "$FUNC" daemon info "detected changed patch-o-matic"
					REPATCH_ALL=1
				;;
			esac

			mv "$TEMPFILE" "/$TEMPFILE" || {
				_log do "$FUNC" daemon alert "error during moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
				COUNT_ERROR=$(( $COUNT_ERROR + 1 ))
			}
			sync

			COUNT=$(( $COUNT + 1 ))
		}
	} done

	_cleanup
	echo -n "$hash_tarball" >"$FILE_HASH_APPLIED"

	if [ $COUNT -gt 0 ]; then

		/etc/kalua_init

		[ "$CRON_RESTART" = "1" ] && {
			/etc/init.d/*crond_fff+ stop

			while ! pidof crond ; do {
				/etc/init.d/*crond_fff+ start
			} done
		}

		[ "$REPATCH_ALL"  = "1" ] && /etc/init.d/*patch-o-matic* repatch all

		if _uci is_oldstyle; then
			cat /etc/banner | head -n24 >/etc/banner	# copy in ROM has not all infos
		else
			cat /rom/etc/banner | head -n14 >/etc/banner
		fi

		echo >>/etc/banner
		echo >>/etc/banner "# manually updated with poormens method on $( date ) by '$0' to this version:"
		echo >>/etc/banner "# originally flashed version: $( _system version )"
		tail >>/etc/banner -n2 /etc/variables_fff+
		echo >>/etc/banner "#"
		echo >>/etc/banner
		
		_log do "$FUNC" daemon alert "[OK] applied tarball in '$MODE'-mode ($COUNT files), wrote new banner"

		echo "0" >/www/REBOOT_COUNTER		# fixme!
	else
		_log do "$FUNC" daemon info "[OK] applied nothing - all seems up to date"
	fi
}

_firmware_updatemode ()		# updatemode <empty>		= string of configured update-mode
{				# updatemode "stable"		= bool, true if "stable" = "configured update-mode", false if not
	local CHECKMODE="$1"	# updatemode "beta" "override"	= string if mode "beta" is known, otherwise configured mode (fallback)
	local KEYWORD="$2"
	local OUT MODE

	if [ "$KEYWORD" = "override" ]; then
		MODE="$CHECKMODE"
		[ -z "$MODE" ] && MODE="$( uci get system.@fwupdate[0].mode )"
	else		
		MODE="$( uci get system.@fwupdate[0].mode )"
	fi

	case $MODE in
		0|beta|testing)
			OUT="$MODE"
		;;
		*)
			OUT="stable"
		;;
	esac

	if [ -n "$CHECKMODE" ] && [ -z "$KEYWORD" ]; then
		[ "$OUT" = "$CHECKMODE" ] && return 0
		return 1
	else
		echo -n "$OUT"
	fi
}

_firmware_fetch ()
{
	local FIRMWARE_URL="$1"
	local FUNC="fetch_firmware"
	local FREE_WANTED="1750"		# which means 1750-120 = 1630 useable kilobyte for image-file (should ne enough 8-) )
	local DESTINATION="/www/fw.trx"
	local RETRY_COUNT=0
	local IPK

	_scheduler queue_purge
	/etc/init.d/S90webcam_fff+ stop	
	/etc/init.d/S52vpn_fff+ stop		# for safe uninstalling this package
	
	_software make_free_space $FREE_WANTED ruthless
	
	[ "$( _system flash_free )" -lt "$FREE_WANTED" ] && {
		_log do $FUNC daemon crit "could'nt free target-flash space, strange!"
		DESTINATION="/tmp/fw.trx"
		local FW_IN_RAM="true"
	}

	rm "$DESTINATION"
	while true; do {

		wget -c -O "$DESTINATION" "$FIRMWARE_URL" && {
			_log do $FUNC daemon info "download successful"
			break
		}

		_scheduler queue_purge

		[ "$( _system flash_free )" -lt 120 ] && {
			_log do $FUNC daemon crit "low flash space, during download?"
			DESTINATION="/tmp/fw.trx"
			local FW_IN_RAM="true"
			rm "$DESTINATION"
			RETRY_COUNT=0
		}

		RETRY_COUNT=$(( $RETRY_COUNT + 1 ))
		[ "$RETRY_COUNT" -gt 50 ] && {
			rm -f "/www/SOFTWARE_FULLY_INSTALLED"	# to ensure, that we reinstall all removed packages...
			rm -f "$DESTINATION"
			_system reboot_safe "firmware download unseccussful"	# fixme!
		}

		_log do $FUNC daemon info "something went wrong during download...retrying in 30 sec (try: $RETRY_COUNT)"
		sleep 30
	} done

	_scheduler queue_purge

	[ "$FW_IN_RAM" = "true" ] && {
		_log do $FUNC daemon info "burning firmware directly"
		_firmware burn "$DESTINATION"
		sleep 30
		_system reboot_safe "firmware burning unsuccessful"
	}

	_log do "$FUNC" daemon info "download ready."
}

_firmware_wget_prepare_for_lowmem_devices()
{
	[ $( _system ram_size ) -gt 16500 ] && return 1

	local url="$( _links firmware_url_get )"
	local server_dnsname="$( _http url_get_serverstring "$url" )"
	local ip="$( _net dns2ip "$server_dnsname" )"
	_firmware log "[OK] serverstring2ip: $server_dnsname -> $ip"

	_firmware remove_cron_stuff

	_firmware log "[OK] removing some things in RAM-Disk"
	rm /tmp/weblogin*
	rm /tmp/ARCHIV_*
	rm /tmp/iptables_*
	rm /tmp/IP2MAC_*
	rm /tmp/MAC2IP_*
	rm -fR /tmp/OLSR

	ip route list exact 0.0.0.0/0 | fgrep -q "dev $WIFIDEV" || {
		_firmware log "[OK] wifi not needed, shutting down"
		_firmware kill_tasks wifi_down
		_firmware remove_kmodules wifi
	}

	local list_tasks="ntpd screen dropbear hotplug2 vtund S69watch_olsrd_fff+ uhttpd \
			  ulogd netserver luci-bwc udhcpc syslogd klogd polipo dnsmasq"

	_firmware kill_tasks "$list_tasks"

	_firmware flush_iptables
	_firmware remove_kmodules iptables

	echo "$ip $server_dnsname" >/etc/hosts		# see beginning of function

	_firmware log "[OK] flushing caches: $( _system ram_free flush ) bytes free"

	# fixme! we cant't "remove_kmodules misc" because of ppp
}

_firmware_log()		# syslogd will likely be killed
{
	logger -p daemon.info -t firmware "$1"
	echo "$1"
}

_firmware_remove_kmodules()		# fixme! loop as long as we can kick at least one module
{
	local module remove
	local filter_option="${1:-most}"			# most | all | iptables | wifi | misc
	local list_modules="$( lsmod | cut -d' ' -f1 )"

	for module in $list_modules ; do {

		case "$module" in
			"nf_"*|"xt"*|"ts_"*|"x_tables"|"ip_tables"|"ipt_"*|"iptable_"*)
				case "$filter_option" in
					all|most|iptables)
						remove=1
					;;
				esac
			;;
			"b43"*|"ath"*|"cfg80211"|"mac80211"*|"compat"*)
				case "$filter_option" in
					all|most|wifi)
						remove=1
					;;
				esac
			;;
			"ts_"*|"crc_ccitt"|"aes_generic"|"arc4"|"crypto_algapi"|"ppp"*)		# fixme! ifdown wan for ppp?
				case "$filter_option" in
					all|most|misc)
						remove=1
					;;
				esac
			;;
			*)
				case "$filter_option" in
					all)
						remove=1
					;;
					*)
						remove=
					;;
				esac
			;;
		esac

		[ -n "$remove" ] && {
			_firmware log "removing kmodule: $module"
			rmmod $module
		}
	} done

	[ "$filter_option" = "all" ] && {
		_firmware log "[OK] still loaded modules:"
		lsmod
	}
}

_firmware_kill_tasks()
{
	local list_tasks="$1"		# special keywords: pause | wifi_down

	for task in $list_tasks ; do {

		case "$task" in
			pause)
				sleep 5
			;;
			wifi_down)
				[ "$( uci set wireless.radio0.disabled )" = 1 ] || {
					_firmware log "[OK] bringing wifi down"
					uci set wireless.radio0.disabled=1
					wifi
				}
			;;
			*)
				_firmware log "killall $task"
				killall "$task"
			;;
		esac
	} done

	_firmware log "[OK] still running tasks:"
	ps ax
}

_firmware_flush_iptables()
{
	_firmware log "[OK] flushing iptables"

	iptables -t mangle -F
	iptables -t mangle -X
	iptables -t filter -F
	iptables -t filter -X
	iptables -t nat -F
	iptables -t nat -X
}

_firmware_check_image()
{
	local file="${1:-/tmp/fw}"

	_firmware log "[START] checking image '$file'"

	[ -e "$file" ] || {
		_firmware log "file '$file' is missing, abort"
		return 1
	}

	. /etc/functions.sh
	. /lib/upgrade/platform.sh
	. /lib/upgrade/common.sh

	if platform_check_image "$file" ; then
		_firmware log "[READY] image OK checked"
	else
		_firmware log "[ERR] bad checksum, abort"
		return 1
	fi
}

_firmware_remove_cron_stuff()
{
	local sleeptime="${1:-1}"

	[ -e "/etc/init.d/S51crond_fff+" ] && {
		if mv "/etc/init.d/S51crond_fff+" "/etc/init.d/deactivated_cron_daemon" ; then
			_firmware log "[OK] /etc/init.d/S51crond_fff+ moved to /etc/init.d/deactivated_cron_daemon"
		else
			_firmware log "[ERR] during moving /etc/init.d/S51crond_fff+ to /etc/init.d/deactivated_cron_daemon - abort"
			return 1
		fi
	}

	while [ ! -e /tmp/cron_watchdog.id ]; do {
		_firmware log "waiting till cron_watchdog starts (file '/tmp/cron_watchdog.id' must come up)"
		sleep 5
	} done

	_firmware log "[OK] watchdog found, enforcing watchdog-ending and cleaning scheduler queue"
	touch /tmp/cron_watchdog_please_end_yourself_$( cat /tmp/cron_watchdog.id )

	_firmware log "[OK] waiting $sleeptime seconds"
	sleep $sleeptime

	_firmware kill_tasks "crond cron_watchdog.sh scheduler"

#	_scheduler queue_purge		# fixme! this kills ourself?

}

_firmware_burn ()
{
	local FILE="${1:-/tmp/fw}"
	local FUNC="firmware_burn"
	local OUT
	local pause="60"

	touch /tmp/DEBUG		# syslog verbose, if any...

	_log shell_is_interactive && {
		screen -ls | fgrep -qi "Attached" || {

			if [ -e "/usr/sbin/screen" ]; then
				_log do $FUNC daemon info "better start a screen-session: /usr/sbin/screen - then do: '. /tmp/loader; _firmware burn /tmp/fw'"
			else
				_log do $FUNC daemon info "better start a screen-session: opkg update; opkg install screen; screen - then do: '. /tmp/loader; _firmware burn /tmp/fw'"
			fi

			_log do $FUNC daemon info "will continue in 10 seconds"
			sleep 10
		}
	}

	if _uci is_oldstyle ; then

		OUT="$( /www/cgi-bin/freifunk-upload -c "$FILE" )"

		if [ "$OUT" = "ok" ]; then
			_log do "$FUNC" daemon info "crc: $OUT - burning '$FILE'"

			/etc/init.d/*crond_fff+ restart nano
			[ -e /dev/misc/crondog ] && echo >/dev/misc/crondog			# fixme!

			/usr/sbin/firmware-burn "$FILE"	
		else
			_log do "$FUNC" daemon alert "wrong crc: '$OUT'	- abort"
			return 1
		fi
	else
		_firmware check_image "$FILE" || return 1

		local list_tasks="hotplug2 vtund S69watch_olsrd_fff+ uhttpd ntpd ulogd netserver \
				  dnsmasq luci-bwc udhcpc syslogd klogd olsrd polipo"

		if _log shell_is_interactive; then
			pause="60"
		else
			list_tasks="$list_tasks screen dropbear wifi_down"
			pause="180"
		fi

		list_tasks="$list_tasks pause $list_tasks"		# double try...

		_firmware remove_cron_stuff $pause || return 1
		_firmware kill_tasks "$list_tasks"


		rm -fR /etc/banner /etc/profile /etc/kalua /etc/nixio /tmp/kalua

		_firmware flush_iptables

		_firmware remove_kmodules most
		_firmware log "[OK] flushing caches: $( _system ram_free flush ) bytes free"

		_firmware remove_kmodules all
		_firmware log "[OK] flushing caches: $( _system ram_free flush ) bytes free"


		case "$( _system architecture )" in
			brcm47xx)
				local patchfile partition fix

				patchfile="/lib/upgrade/common.sh"
				fgrep -q '"Upgrade completed";' "$patchfile" || {
					partition="/dev/$( fgrep "linux" /proc/mtd | cut -d':' -f1 )"
					fix="mtd fixtrx $partition"
					_firmware log "[OK] patching '$patchfile', adding: '$fix'"
					sed -i "s|\"Upgrade completed\"|\"Upgrade completed\"; $fix|" /lib/upgrade/common.sh
				}
			;;
		esac

		_firmware log "[START] sysupgrading"
		sysupgrade -v "$FILE"
		_firmware log "[READY] sysupgraded"


		>"$FILE"		# normally this section is never reached	
		/bin/sync
		/bin/sleep 30
		/sbin/reboot
	fi
}

_firmware_filelist ()
{
	local FUNC="firmware_filelist"
	local FILE="$1"
	local FILE LIST
	
	[ -n "$FILE" ] && {		# helper for examining specific files in /usr/sbin/fwupload_fff+
		echo "$FILE"
		return
	}

	LIST="
		/etc/dhcp-script.d/10dhcpscript
		/etc/init.d/*_fff+
		/etc/init.d/S41build_static_netparam
		/etc/init.d/S90ipip_tunnel
		/etc/kalua/*
		/etc/kalua_init*
		/etc/local.fw-fff+
		/etc/variables_*
		/usr/bin/neigh
		/usr/bin/scheduler
		/usr/sbin/cron.autocreate_tickets
		/usr/sbin/cron.check_inet_gw_fff+
		/usr/sbin/cron.evaluate_ulogd_syslogemu_fff+
		/usr/sbin/cron.generate_new_tickets
		/usr/sbin/cron.monitoring
		/usr/sbin/cron.optimize_wifi_txpower
		/usr/sbin/cron.select_best_antenna_fff+
		/usr/sbin/cron.upgrade_packages
		/usr/sbin/fwupload_fff+
		/www/cgi-bin-admin
		/www/cgi-bin-chip
		/www/cgi-bin-shoutbox
		/www/cgi-bin-speed
		/www/cgi-bin-sql
		/www/cgi-bin-tunnel.sh
		/www/cgi-bin-tool_fff+
		/www/cgi-bin-traffic_fff+
		/www/cgi-bin-welcome*
		/www/cgi-bin/cgi-bin-update_fff+
		/www/cgi-bin/config_fff+
		/www/cgi-bin/telnetd_fff+
		/www/cgi-bin/userdb
		/www/robots.txt
		"

	for FILE in $LIST; do {
		echo "$FILE"
		[ ! -e "$FILE" ] && _log do $FUNC daemon info "[ERR] missing file '$FILE'"
	} done
}

_firmware_upgrade_is_needed()
{
	local target_version_git="28464"

	[ "$( _system uptime min )" -ge 30 ] || {
		return 1
	}

	_uci is_oldstyle && {
		return 1
	}

	_firmware updatemode testing || {
		return 1
	}

	[ "$( _system version short )" -ge $target_version_git ] && {
		return 1
	}

	case "$( uci get system.@profile[0].name )" in
		liszt28*|ejbw*|rehungen*)
			# ejbw*|tkolleg*|rehungen*|hotello-K80*|dhfleesensee*|itzehoe*|satama*
			:
		;;
		*)
			return 1	# aschbach*|tkolleg*|hotello_*|rehungen*|satama*|dhfleesensee*|ejbw*|itzehoe*
		;;			# todo: apphalle|leonardo|zumnorde
	esac

	case "$( uci get system.@profile[0].name )" in
		liszt28*|ejbw*|satama*|itzehoe*)
			:		# these inet-offer nodes are safe
		;;
		*)
			_net local_inet_offer >/dev/null && {
				return 1
			}
		;;
	esac

	case "$( _system architecture )" in
		ar71xx)
			:
		;;
		*)
			return 1
		;;
	esac

	case "$( _hardware remap_devs get_model )" in
		*"TL-WR1043ND"*)
			:
		;;
		*)
			return 1
		;;
	esac
}

_firmware_wget()
{
	local funcname="firmware_wget"
	local file="${1:-/tmp/fw}"
	local source="${2:-http://intercity-vpn.de/firmware/ar71xx/images/testing/openwrt-ar71xx-generic-tl-wr1043nd-v1-squashfs-sysupgrade.bin}"
	local hash="${3:-41bffd5425e51d6725591254316175df}"

	[ -e "$file" ] && return 0		# fixme! why?

	filehash_is_ok()
	{
		test "$( _file hash "$file" )" = "$hash"
	}

	while ! filehash_is_ok ; do {
		_log do fetch_firmware daemon info "http_get $source"
		wget -qcO "$file" "$source"
		sleep 1
		 _watch counter "/tmp/fetch_firmware" increment 1 max 100 || break
	} done

	if _watch counter "/tmp/fetch_firmware" increment 1 max 100; then
		_log do $funcname daemon info "[READY] downloading '$file'"
		return 0
	else
		_log do $funcname daemon info "[ERR] downloading '$file', maximum tries reached, deleting and aborting"
		rm "$file" /tmp/fetch_firmware
		return 1
	fi
}
