_firmware_update_pmu ()		# poor mens update - simply overwrites all (shell-)files with tarball from repo
{				# fixme! safe hash of last successful installed tarball /www/TARBALL_STABLE_$HASH and only upgrade, if it differs
	local FUNC="firmware_update_pmu"
	local MODE="$( _firmware updatemode "$1" override)"

	case "$MODE" in
		stable|beta|testing)
			:
		;;
		*)
			_log do "$FUNC" daemon debug "abort, updatemode: $MODE"
			return
		;;
	esac

	local URL="$( _links firmware_url_get tarball $MODE )"		# enforce beta|stable|testing
	local hash_last_applied
	local hash_tarball="$( _links firmware_url_get tarball_hash $MODE )"	# fixme! abort when fetching hash fails
	local FILE_HASH_APPLIED="/etc/tarball_last_applied_hash"
	local WORKINGDIR="/tmp/pmu"
	local FILE="tarball.tgz"
	local TGZ="/tmp/$FILE"
	local SIZE TEMPFILE CRON_RESTART REPATCH_ALL
	local COUNT=0
	local COUNT_ERROR=0

	_cleanup ()
	{
		local option="$1"

		_log do "$FUNC" daemon debug "cleaning up - applied $COUNT files ($COUNT_ERROR errors)"
		cd /tmp
		rm -fR "$WORKINGDIR"
		rm -f  "$TGZ"

		[ "$option" = "reschedule" ] && {
			_scheduler add "_$FUNC $MODE" force
		}
	}

	read hash_last_applied <"$FILE_HASH_APPLIED"

	[ "$hash_tarball" = "${hash_last_applied:-empty}" ] && {
		_log do "$FUNC" daemon info "[OK] applied nothing - all seems up to date (tarball-hash known: $FILE_HASH_APPLIED)"
		return 0
	}

	_log do "$FUNC" daemon debug "fetching tarball in '$MODE'-mode: '$URL'"
	_firmware wget "$TGZ" "$URL" "$hash_tarball" 100 || {
		_log do "$FUNC" daemon info "failed to download '$URL' - abort"

		_cleanup reschedule
		return 1
	}
	
	tar tzf "$TGZ" >/dev/null || {
		_log do "$FUNC" daemon info "fail during extract-test '$TGZ' - abort"

		_cleanup reschedule
		return 1
	}
	
	mkdir -p "$WORKINGDIR"
	mv "$TGZ" "$WORKINGDIR"
	cd "$WORKINGDIR"
	
	tar xzf "$FILE" || {
		 _log do "$FUNC" daemon alert "failed to extract '$TGZ' to '$WORKINGDIR' - abort"

		_cleanup reschedule
		return 1	 
	}
	rm "$FILE"

	_log do "$FUNC" daemon debug "tarball extracted - applying only files which differ"

	for TEMPFILE in $( find -type f ); do {

		if [ "$( _file hash "$TEMPFILE" )" = "$( _file hash "/$TEMPFILE" )" ]; then
			rm "$TEMPFILE"
		else

			_log do "$FUNC" daemon info "moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
			_software make_free_space "$(( 120 + $( _file size "$TEMPFILE" kb ) ))"

			case "$( basename "$TEMPFILE" )" in
				cron|S51crond*)
					_log do "$FUNC" daemon info "detected changed cron settings"
					CRON_RESTART=1
				;;
			esac

			mv "$TEMPFILE" "/$TEMPFILE" || {
				_log do "$FUNC" daemon alert "error during moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
				COUNT_ERROR=$(( $COUNT_ERROR + 1 ))
			}
			sync

			COUNT=$(( $COUNT + 1 ))
		fi
	} done

	_cleanup
	echo -n "$hash_tarball" >"$FILE_HASH_APPLIED"

	if [ $COUNT -gt 0 ]; then

		/etc/kalua_init

		[ "$CRON_RESTART" = "1" ] && {
			_log do "$FUNC" daemon info "restart cron manually"
		}

		[ "$REPATCH_ALL"  = "1" ] && /etc/init.d/*patch-o-matic* repatch all

		cat /rom/etc/banner | head -n14 >/etc/banner

		echo >>/etc/banner
		echo >>/etc/banner "# manually updated with poormens method on $( date ) by '$0' to this version:"
		echo >>/etc/banner "# originally flashed version: $( _system version )"
		tail >>/etc/banner -n2 /etc/variables_fff+
		echo >>/etc/banner "#"
		echo >>/etc/banner
		
		_log do "$FUNC" daemon alert "[OK] applied tarball in '$MODE'-mode ($COUNT files), wrote new banner"

		echo "0" >/www/REBOOT_COUNTER		# fixme!
	else
		_log do "$FUNC" daemon info "[OK] applied nothing - all seems up to date"
	fi
}

_firmware_updatemode ()		# updatemode <empty>		= string of configured update-mode
{				# updatemode "stable"		= bool, true if "stable" = "configured update-mode", false if not
	local CHECKMODE="$1"	# updatemode "beta" "override"	= string if mode "beta" is known, otherwise configured mode (fallback)
	local KEYWORD="$2"
	local OUT MODE

	if [ "$KEYWORD" = "override" ]; then
		MODE="$CHECKMODE"
		[ -z "$MODE" ] && MODE="$( uci get system.@fwupdate[0].mode )"
	else		
		MODE="$( uci get system.@fwupdate[0].mode )"
	fi

	case $MODE in
		0|beta|testing)
			OUT="$MODE"
		;;
		*)
			OUT="stable"
		;;
	esac

	if [ -n "$CHECKMODE" ] && [ -z "$KEYWORD" ]; then
		[ "$OUT" = "$CHECKMODE" ] && return 0
		return 1
	else
		echo -n "$OUT"
	fi
}

_firmware_wget_prepare_for_lowmem_devices()
{
	local funcname="firmware_wget_prepare_for_lowmem_devices"

	[ $( _system ram_size ) -gt 16500 ] && return 1

	local url="$( _links firmware_url_get )"
	local server_dnsname="$( _http url_get_serverstring "$url" )"
	local ip="$( _net dns2ip "$server_dnsname" )"
	_log do $funcname daemon info "[OK] serverstring2ip: $server_dnsname -> $ip"

	_firmware remove_cron_stuff

	_log do $funcname daemon info "[OK] removing some things in RAM-Disk"
	rm /tmp/weblogin*
	rm /tmp/ARCHIV_*
	rm /tmp/iptables_*
	rm /tmp/IP2MAC_*
	rm /tmp/MAC2IP_*
	rm -fR /tmp/OLSR
	rm /tmp/messages
	rm /tmp/CLIENTS*

	#ip route list exact 0.0.0.0/0 | fgrep -q "dev $WIFIDEV" || {
	#	_log do $funcname daemon info "[OK] wifi not needed, shutting down"
	#	_firmware kill_tasks wifi_down
	#	_firmware remove_kmodules wifi
	#}

	local list_tasks="ntpd screen hotplug2 vtund S69watch_olsrd_fff+ uhttpd \
			  ulogd netserver luci-bwc udhcpc syslogd klogd polipo dnsmasq"

	_firmware kill_tasks "$list_tasks"

	_firmware flush_iptables
	_firmware remove_kmodules iptables

	echo "$ip $server_dnsname" >/etc/hosts		# see beginning of function

	_log do $funcname daemon info "[OK] flushing caches: $( _system ram_free flush ) bytes free"

	scheduler -p

}

_firmware_remove_kmodules()		# fixme! loop as long as we can kick at least one module
{
	local funcname="firmware_remove_kmodules"
	local module remove
	local filter_option="${1:-most}"			# most | all | iptables | wifi | misc
	local errorcount list_modules i line

	list_modules_get()
	{
		lsmod | cut -d' ' -f1 | sed '1d'	# ignoring 1st line
	}

	case "$filter_option" in
		all)
			_log do $funcname daemon info "ifdown wan"
			ifdown wan	# for unloading ppp-stuff

			while read line; do {
				set $line	# $device $mountpoint $type $options $rest
				case "$1" in
					"/dev/sd"*)
						_log do $funcname daemon info "unmounting '$2'"
						umount "$2"
						umount "/proc/bus/usb"
					;;
					"debugfs")
						_log do $funcname daemon info "unmounting '$2'"
						umount "$2"
					;;
					"none")
						[ "$2" = "/proc/bus/usb" ] && {
							_log do $funcname daemon info "unmounting '$2'"
							umount "$2"
						}
					;;
				esac
			} done <"/proc/mounts"

			while read line; do {
				set $line
				[ "$1" = "Filename" ] || {
					_log do $funcname daemon info "deactivate swap '$1'"
					swapoff "$1"

					case "$1" in
						*zram*)
							_log do $funcname daemon info "claiming memory back via /sys/block/$( basename "$1" )/reset"
							echo 1 >"/sys/block/$( basename "$1" )/reset"
						;;
					esac
				}
			} done <"/proc/swaps"
		;;
	esac

	while :; do {

		_watch counter "/tmp/$funcname" increment 1 max 25 || break
		read i <"/tmp/$funcname"
		_log do $funcname daemon info "mode: '$filter_option', iteration: $i/100"

		if [ $i -lt 4 ]; then
			list_modules="$( list_modules_get )"
		else
			if [ "$filter_option" = "all" ]; then
				list_modules="$( _list shuffle "$( list_modules_get )" )"
			else
				break
			fi
		fi

		errorcount=0
		for module in $list_modules; do {

			remove=

			case "$module" in
				"nf_"*|"xt"*|"ts_"*|"x_tables"|"ip_tables"|"ipt_"*|"iptable_"*)
					case "$filter_option" in
						all|most|iptables)
							remove="true"
						;;
					esac
				;;
				"b43"*|"ath"*|"cfg80211"|"mac80211"*|"compat"*)
					case "$filter_option" in
						all|most|wifi)
							remove="true"
						;;
					esac
				;;
				"ts_"*|"crc_ccitt"|"aes_generic"|"arc4"|"crypto_algapi"|"ppp"*)		# fixme! ifdown wan for ppp?
					case "$filter_option" in
						all|most|misc)
							remove="true"
						;;
					esac
				;;
				*)
					case "$filter_option" in
						all)
							remove="true"
						;;
					esac
				;;
			esac

			[ -n "$remove" ] && {
				_log do $funcname daemon info "removing kmodule: $module"

				rmmod $module || {
					_log do $funcname daemon info "removing kmodule: $module [FAILED1]"
				}
		
				lsmod | fgrep -q "$module" && {
					errorcount=$(( $errorcount + 1 ))
					_log do $funcname daemon debug "rmmod/lsmod: $( lsmod | fgrep "$module" )"
					_log do $funcname daemon info "removing kmodule: $module [FAILED2] errorcount: $errorcount"
				}
			}
		} done

		[ "$filter_option" = "all" ] && {
			if [ -n "$( list_modules_get )" ]; then
				_log do $funcname daemon info "[ERR] still loaded modules:"
				lsmod | _log do firmware_lsmod daemon info
			else
				_log do $funcname daemon info "[OK] all modules are now unloaded"
			fi
		}

		[ "$errorcount" = "0" ] && break
	} done

	_watch counter "/tmp/$funcname" set 0
}

_firmware_kill_tasks()
{
	local funcname="firmware_kill_tasks"
	local list_tasks="$1"		# special keywords: pause | wifi_down

	for task in $list_tasks ; do {

		case "$task" in
			pause)
				_log sleep $funcname 5 step 1
			;;
			wifi_down)
				[ "$( uci set wireless.radio0.disabled )" = 1 ] || {
					_log do $funcname daemon info "[OK] bringing wifi down"
					uci set wireless.radio0.disabled=1
					wifi
				}
			;;
			*)
				_log do $funcname daemon info "killall $task"
				killall "$task"
			;;
		esac
	} done

	_log do $funcname daemon info "[OK] still running tasks:"
	ps | _log do firmware_ps daemon info
}

_firmware_flush_iptables()
{
	local funcname="firmware_flush_iptables"

	_log do $funcname daemon info "[OK] flushing iptables"

	iptables -t mangle -F
	iptables -t mangle -X
	iptables -t filter -F
	iptables -t filter -X
	iptables -t nat -F
	iptables -t nat -X

	_log do $funcname daemon info "[READY] flushing iptables"
}

_firmware_check_image()
{
	local funcname="firmware_check_image"
	local file="${1:-/tmp/fw}"

	_log do $funcname daemon info "[START] checking image '$file'"

	[ -e "$file" ] || {
		_log do $funcname daemon info "file '$file' is missing, abort"
		return 1
	}

	. /etc/functions.sh
	. /lib/upgrade/platform.sh
	. /lib/upgrade/common.sh

	if platform_check_image "$file" ; then
		_log do $funcname daemon info "[READY] image OK checked"
	else
		_log do $funcname daemon info "[ERR] bad checksum, abort"
		return 1
	fi
}

_firmware_remove_cron_stuff()
{
	local funcname="firmware_remove_cron_stuff"
	local sleeptime="${1:-1}"
	local crondog_found

	ps | grep -q "cron_watchdog.sh"$ && {
		crondog_found="true"
	}

	[ -e "/etc/init.d/S51crond_fff+" ] && {
		if mv "/etc/init.d/S51crond_fff+" "/etc/init.d/deactivated_cron_daemon" ; then
			_log do $funcname daemon info "[OK] /etc/init.d/S51crond_fff+ moved to /etc/init.d/deactivated_cron_daemon"
		else
			_log do $funcname daemon info "[ERR] during moving /etc/init.d/S51crond_fff+ to /etc/init.d/deactivated_cron_daemon - abort"
			return 1
		fi
	}

	[ -n "$crondog_found" ] && {
		while [ ! -e /tmp/cron_watchdog.id ]; do {
			_log do $funcname daemon info "waiting till cron_watchdog starts (file '/tmp/cron_watchdog.id' must come up)"
			sleep 5
		} done
	}

	_log do $funcname daemon info "[OK] watchdog found, enforcing watchdog-ending"
	touch /tmp/cron_watchdog_please_end_yourself_$( cat /tmp/cron_watchdog.id )

	_log do $funcname daemon info "[OK] waiting $sleeptime seconds"
	_log sleep $funcname $sleeptime step 10

	_firmware kill_tasks "crond cron_watchdog.sh"
}

_firmware_burn ()
{
	local FILE="${1:-/tmp/fw}"
	local FUNC="firmware_burn"
	local funcname="firmware_burn"
	local OUT
	local architecture="$( _system architecture )"
	local pause="6"

	touch /tmp/LOCKFILE_APPLY	# block scheduler
	touch /tmp/DEBUG		# syslog verbose, if any...

	_log shell_is_interactive && {
		screen -ls | fgrep -qi "Attached" || {

			if [ -e "/usr/sbin/screen" ]; then
				_log do $FUNC daemon info "better start a screen-session: /usr/sbin/screen - then do: '. /tmp/loader; _firmware burn /tmp/fw'"
			else
				_log do $FUNC daemon info "better start a screen-session: opkg update; opkg install screen; screen - then do: '. /tmp/loader; _firmware burn /tmp/fw'"
			fi

			_log sleep $funcname 10 step 1
		}
	}

	_firmware check_image "$FILE" || return 1
	case "$( _system architecture )" in
		brcm47xx)
			local patchfile partition fix

			patchfile="/lib/upgrade/common.sh"
			fgrep -q '"Upgrade completed";' "$patchfile" || {
				partition="/dev/$( fgrep "linux" /proc/mtd | cut -d':' -f1 )"
				fix="mtd fixtrx $partition"
				_log do $funcname daemon info "[OK] patching '$patchfile', adding: '$fix'"
				sed -i "s|\"Upgrade completed\"|\"Upgrade completed\"; $fix|" "$patchfile"
				fgrep -q "$fix" "$patchfile" || reboot -f
			}
		;;
	esac
	local patchfile="/lib/upgrade/common.sh"
	local loop_begin="I=0; while true; do"
	local loop_end="\&\& break; v retry_upgrade; I=\$(( \$I + 1 )); test \$I -gt 100 \&\& break; done"
	_log do $funcname daemon info "[OK] patching '$patchfile', adding loop to default_do_upgrade() till it does not fail"
	sed -i "s|default_do_upgrade \"\$ARGV\"|${loop_begin} & ${loop_end}|" "$patchfile"
	fgrep -q "v retry_upgrade;" "$patchfile" || reboot -f

	local list_tasks="hotplug2 vtund S69watch_olsrd_fff+ uhttpd ntpd ulogd netserver \
			  dnsmasq luci-bwc udhcpc syslogd klogd olsrd polipo"

	if _log shell_is_interactive; then
		pause="10"
	else
		list_tasks="$list_tasks screen dropbear wifi_down"
		pause="60"
	fi

	list_tasks="$list_tasks pause $list_tasks"		# double try...

	_firmware log "[OK] detaching upgrade process, output can be found in nohup.out"
	nohup 							#detach script from shell to prevent hangups while killing processes and deleting data
	_firmware remove_cron_stuff $pause || return 1
	_firmware kill_tasks "$list_tasks"

	_firmware flush_iptables

	_firmware remove_kmodules most
	_log do $funcname daemon info "[OK] after 'remove_kmodules most' - flushing caches: $( _system ram_free flush ) bytes free"

	_firmware remove_kmodules all
	_log do $funcname daemon info "[OK] after 'remove_kmodules all' - flushing caches: $( _system ram_free flush ) bytes free"

	rm -fR /tmp/kalua		# free some RAM	- fixme! better delete all except NEEDED?
	rm -fR /tmp/OLSR
	rm -fR /tmp/OLSR_TMP
	rm -fR /tmp/opkg-lists
	rm -fR /tmp/wifi_check_each_client
	rm -fR /tmp/WIFI_SCAN_TODAY
	rm -fR /tmp/DB

	mkdir /tmp/fwimage
	mv "$FILE" /tmp/fwimage
	rm /tmp/*
	mv /tmp/fwimage/* "$FILE"
	rm -fR /tmp/fwimage

	interfaces()
	{
		local line

		ip link show | while read line; do {
			case "$line" in
				[0-9]*": "*)
					set $line
					echo "${2%:*}" | cut -d'@' -f1		# eth0.2@eth0 -> eth0.2
				;;
			esac
		} done
	}

	local getmem msg1 msg2 delifs cmds removeable_interfaces

	# reverse order, all in one line:
	removeable_interfaces="$( interfaces | sed '1!G;h;$!d' | while read LINE; do echo -n "$LINE "; done )"

	getmem="echo 3 >/proc/sys/vm/drop_caches; while read L; do case \$L in MemFree:*) break;; esac; done </proc/meminfo"
	msg1="/bin/netmsg $LANBRC \"$HOSTNAME: before_delifs: \$L\"; /bin/echo \"$HOSTNAME: before_delifs: \$L\" >/dev/console"
	delifs="for I in $removeable_interfaces; do /bin/echo \"ifconfig \$I down\"; ifconfig \$I down; /bin/echo \"\$I is down\"; done"
	msg2="/bin/echo \"$HOSTNAME: after_delifs: \$L\" >/dev/console; ifconfig >/dev/console; ifconfig | grep . && /sbin/reboot"

	cmds="$getmem; $msg1; $delifs; $getmem; $msg2"

	# using this way, we have enough free RAM, e.g.
	# 4220kb before sysupgrading with an 3396kb file in RAM-disk on a 16mb-Linksys
	#
	# ideas to get even more free ram:
	# - unloading all functions/vars before mtd
	# - unmounting jffs2/unneeded filesystems
	# - reducing disk-buffers?

		cat >/etc/crontabs/root <<EOF
* * * * * rm /etc/crontabs/root; killall crond; $cmds; /sbin/sysupgrade -v $FILE; /bin/sleep 60; /sbin/reboot -f
EOF

	/usr/sbin/crond -L /dev/null

	grep -q "f$" /etc/crontabs/root || reboot -f
	pidof crond >/dev/null || reboot -f

	/bin/netmsg $LANBRC "$HOSTNAME: new crond started, will soon delete these ifnames: '$removeable_interfaces'"
	/bin/echo "$HOSTNAME: new crond started, will soon delete these ifnames: '$removeable_interfaces'"
}

_firmware_filelist ()
{
	local FUNC="firmware_filelist"
	local FILE="$1"
	local FILE LIST
	
	[ -n "$FILE" ] && {		# helper for examining specific files in /usr/sbin/fwupload_fff+
		echo "$FILE"
		return
	}

	LIST="
		/etc/dhcp-script.d/10dhcpscript
		/etc/init.d/*_fff+
		/etc/init.d/S41build_static_netparam
		/etc/kalua/*
		/etc/kalua_init*
		/etc/variables_*
		/usr/bin/neigh
		/usr/bin/scheduler
		/usr/sbin/cron.check_inet_gw_fff+
		/usr/sbin/cron.evaluate_ulogd_syslogemu_fff+
		/usr/sbin/cron.monitoring
		/usr/sbin/cron.upgrade_packages
		/usr/sbin/fwupload_fff+
		/www/cgi-bin-chip
		/www/cgi-bin-sql
		/www/cgi-bin-tunnel.sh
		/www/cgi-bin-tool_fff+
		/www/cgi-bin-welcome*
		/www/cgi-bin/userdb
		/www/robots.txt
		"

	for FILE in $LIST; do {
		echo "$FILE"
		[ ! -e "$FILE" ] && _log do $FUNC daemon info "[ERR] missing file '$FILE'"
	} done
}

_firmware_upgrade_is_needed()
{
	return 1

	local target_version_git hardware

	[ -e "/etc/HARDWARE" ] && {
		read hardware <"/etc/HARDWARE"
	}

	case "$hardware" in
		"TP-LINK TL-WR1043ND")
			target_version_git="30563"

			case "$CONFIG_PROFILE" in
				liszt28*|schoeneck*) ;;
				*) return 1 ;;
			esac
		;;
		"Buffalo WHR-HP-G54"|"Linksys WRT54G/GS/GL"|"Dell TrueMobile 2300")
			target_version_git="30406"

			[ -d "/etc/kalua.w" ] || target_version_git=55555		# fixme! this enforces an reflash

			case "$CONFIG_PROFILE" in
				liszt28*|lisztwe*|monami*|versiliawe*|zumnorde*|elephant*) ;;
				marinapark*|fparkssee*|satama*|adagio*|apphalle*) ;;
				*) return 1 ;;
			esac
		;;
		*)
			return 1
		;;
	esac

	_firmware updatemode testing || {
		return 1
	}

	[ "$( _system version short )" -ge ${target_version_git:-99999} ] && {
		return 1
	}

	case "$CONFIG_PROFILE" in			# explicit global nono!
		ffweimar_adhoc)
			return 1	# be safe and free
		;;
		aschbach*|olympia*)
			return 1	# needs hybrid-profile
		;;
		paltstadt*|tkolleg*)
			return 1	# unmaintained
		;;
		spbansin*)
			return 1	# fixup pppoe-credentials
		;;
	esac

	case "$CONFIG_PROFILE" in
		*)
			:
			# these inet-offer nodes are safe
		;;
		*)
			_net local_inet_offer >/dev/null && {
				return 1
			}
		;;
	esac

	return 0
}

_firmware_wget()
{
	local funcname="firmware_wget"
	local file="${1:-/tmp/fw}"
	local source="${2:-$( _links firmware_url_get )}"
	local hash="${3:-$( _links firmware_url_get crc )}"
	local maxtry="${4:-1000}"

	[ -e "$file" ] && return 0		# for manually fetching the file and test the hole procedure

	[ ${#hash} = "32" ] || {
		_log do $funcname daemon info "abort - hash invalid: '$hash'"
		return 1
	}

	filehash_is_ok()
	{
		test "$( _file hash "$file" )" = "$hash"
	}

	while ! filehash_is_ok ; do {
		touch "$file"
		_log do $funcname daemon info "http_get $source: now $( _file size "$file" ) bytes targethash: $hash"
		_wget do "$source" 10 "continue $file"
		_log sleep $funcname 15 step 5
		 _watch counter "/tmp/fetch_firmware" increment 1 max $maxtry || break
	} done

	if _watch counter "/tmp/fetch_firmware" increment 1 max $maxtry; then
		_log do $funcname daemon info "[READY] downloading '$file' with $( _file size "$file" ) bytes"
		return 0
	else
		_log do $funcname daemon info "[ERR] downloading '$file', maximum tries = $maxtry reached, deleting and aborting"
		rm "$file" /tmp/fetch_firmware
		return 1
	fi
}

nohup(){					#poor men's nohup, detaches current process from running terminal
	# Close stdin, and make any read attempt an error
	    if [ -t 0 ]
	    then
	        exec 0>/dev/null
	    fi

	# Redirect stdout to a file if it's a TTY
	    if [ -t 1 ]
	    then
	        exec 1>nohup.out
	        if [ $? -ne 0 ]
	        then
	            exec 1>nohup.out
	        fi
	    fi

	# Redirect stderr to stdout if it's a TTY
	    if [ -t 2 ]
	    then
	        exec 2>&1
	    fi

	# Trap the HUP signal to ignore it
	    trap : HUP
}
