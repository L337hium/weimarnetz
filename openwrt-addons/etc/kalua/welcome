
_welcome_htmlout_gateway_intropic ()
{
	local DATE HOSTNAME COST_INT GATEWAY NEXTHOP METRIC
	. /tmp/GATEWAY_CHECK_RECENT     # need: NEXTHOP|GATEWAY is: DATE|HOSTNAME|COST_INT|GATEWAY|NEXTHOP|METRIC

	cat <<EOF
Der Internetzugang wird dir gerade von diesem freundlichen<br>
Netzteilnehmer zur Verf&uuml;gung gestellt: "<b>$( _net ip2dns $GATEWAY )</b>" (Knoten $( _ipsystem do $GATEWAY ))<br>
<a href="http://$GATEWAY/cgi-bin-index.html"><img src="http://$GATEWAY/images/intro.jpg" border=0 width=240 height=180 alt="Hier sollte eigentlich das Startbild deines Internet-Einspeisers zu sehen sein."></a>
EOF

	_welcome admin_url $GATEWAY

	if [ "$GATEWAY" != "$NEXTHOP" ]; then
		cat <<EOF
<br><br>Dies ist dein n&auml;chster Funknachbar: "<b>$( _net ip2dns $NEXTHOP )</b>" (Knoten $( _ipsystem do $NEXTHOP ))<br>
<a href="http://$NEXTHOP/cgi-bin-index.html"><img src="http://$NEXTHOP/images/intro.jpg" border=0 width=240 height=180 alt="Hier sollte eigentlich das Startbild deines naechsten Funknachbars &uuml;ber den das Internet geleitet wird zu sehen sein."></a>
EOF
		_welcome admin_url $NEXTHOP
	else
		echo "<br><br>Das ist auch dein n&auml;chster Funknachbar!<br>"
	fi
}


_welcome_wiki_vars ()
{
	WIKI_MAIN_URL="http://wireless.subsignal.org"
	WIKI_ARTICLE_1="title=Vorlage:Startseite.Aktuelles"		# + ".Sundhausen"
	WIKI_ARTICLE_1_HEADLINE="Aktuelle Meldungen"                  
	WIKI_ARTICLE_2="title=Vorlage:Spendenaufruf"
	WIKI_ARTICLE_2_HEADLINE="Spendenaufruf"     
	WIKI_ARTICLE_3="title=Vorlage:Nutzungsbedingungen"
	WIKI_ARTICLE_3_HEADLINE="Nutzungsbedingungen"     
	NEWSSERVER_URL="http://news.weimarnetz.de/newsgroups"
	LATEST_NEWS_URL="http://www.weimarnetz.de/latestnews.html"
	LATEST_NEWS_HEADLINE="Aktuelle Diskussionen"              
}

_welcome_htmlout_news ()
{				# SENS: loads a file containing the 10 latest news from the newsserver, created by A. Braeu
	local URL="$1"		# ARG1: string,URL
	local HEAD="$2"		# ARG2: string,headline

	cat <<EOF
	<h2>$HEAD </h2>
	<div class="row">
	<div class="span6">
EOF

        _wget do "${URL}" 2 | sed -e 's/ä/�/g' -e 's/ü/�/g' -e 's/ö/�/g' -e's/<a[^>]*>//gI'  -e 's/<\/a>//gI'	# fetch this page but abort after max 3 seconds	and convert german umlauts

	test "$?" -ne 0 && echo "Fehler aufgetreten...<br>Hier sollten eigentlich aktuelle Diskussionen vom Newsserver/Mailingliste stehen.<br><br>"
	cat <<EOF
	</div>
	</div>
EOF
}	

_welcome_htmlout_wikipage ()
{
	local FUNC="welcome_htmlout_wikipage"
	local  URL="${WIKI_MAIN_URL}/index.php"
	local PAGE="$1"
	local HEAD="$2"

	cat <<EOF
<h2>$HEAD</h2>
<div class="row">                                                                                                                 
<div class="span6">
EOF
	which awk >/dev/null && {
		_wget do "${URL}?${PAGE}" 2 | awk -v URL=$URL '{		# fetch this page but abort after max 3 seconds
			gsub(/\/index.php/,URL)
			gsub(/ä/,"�")						# utf8
			gsub(/ü/,"�")						# utf8
			gsub(/ö/,"�")						# utf8 - yet missing: the big german umlauts + sz
			gsub(/<\/a>/,"")
			gsub(/<a.*>/,"")
			if(s==1)
				print
			if(substr($0,4,24)=="<div class=\"editsection\"" || index($0,"class=\"mw-headline\"")>0)
				s=1
			if(s==1 && substr($0,1,11)=="</li></ul>")		# Problem: only lists are possible (end-detection...)
				exit
		}END{if(s!=1)exit 1}'
	}
	
	if [ "$?" -ne 0 ] || ! which awk >/dev/null; then		# fixme! awk -> sed
		cat <<EOF						# fetching wikipage was NOT successful
		Fehler aufgetreten...<br>
		Hier sollte eigentlich ein Auszug<br>
		aus dem Weimarnetz-Wiki (<a href="${URL}?${PAGE}">"${PAGE}"</a>) stehen.
		<br><br>
EOF
		_log do $FUNC daemon info "failed to retrieve: '${URL}?${PAGE}'"
	fi
	cat <<EOF
</div>
</div>
EOF
}

_welcome_htmlout_luciheader ()
{
	local FUNC="welcome_htmlout_luciheader"
	local URL="http://localhost/cgi-bin/luci/"
	
	[ -e /tmp/LUCI_HEADER ] || {
		wget -qO - "$URL" >/tmp/LUCI_HEADER
	}
	cat /tmp/LUCI_HEADER | while read LINE; do
	case "$LINE" in
		*"<header>"*)
	               	header_found=1
			echo "<header>"
	                ;;
		*"</header>"*)
	               	header_found=0
	               	echo "</header>"
	                ;;
		*)
	               	[ "$header_found" = "1" ] && echo "$LINE"
	;;
		esac
	done
	
	if [ "$header_found" = "2" ]; then               # fixme! awk -> sed
		cat <<EOF
		<header>Fehler, hier sollte der Header stehen</header>
EOF
		_log do $FUNC daemon info "failed to retrieve: '${URL}'"
	fi
}
