#!/bin/sh
. /tmp/loader

if [ -n "$FAILSAFE" ] || [ -n "$READONLY" ]; then exit; fi

_usage ()
{
	_log do "usage" daemon debug "printing"
	echo "Usage: $0 start | check | forcecheck"
	echo "		+  <"nopause"> = do it as fast as possible without any sleeps"
	echo "		++ <"forcemode"> <updatemode> = stable | beta | testing"
}

_firmware_burn_if_exists ()
{
	_userdata_safe

	cp "$FIRMWARE_IN_FLASH" "$FIRMWARE_IN_RAM"
	_firmware burn "$FIRMWARE_IN_RAM"
	
	sleep 30                                        # normally not needed
	rm -f $FIRMWARE_IN_FLASH $FIRMWARE_IN_RAM       # normally not needed
	_system reboot_safe "firmware-burn not successful"
}

_userdata_safe ()
{
	# fff_restore_web_file="http://url1;full_path_to_destination1;http://url2;full_path_to_destination2"	# wget -O dest1 "http://url1"
	# fff_backup_on_device="full_path_file1;full_path_file2;full_path_file3"				# tar czf /tmp/configs.tgz file1 file2 file3
	# fff_restore_web_tagz=""										# tar xzf /tmp/webdata.tgz

	local FILE="/www/images/intro.jpg"
	local  MAX="30000"

	# test "$(cat $FILE | wc -c)" -gt "$MAX" && return
	# test "$(md5sum /rom/www/images/intro.jpg | cut -d" " -f1)" = "$(md5sum $FILE | cut -d" " -f1)" && return

	# nvram set fff_user="$( _software list_packages )"	# all packages that are somehow (even maybe not fully) installed

	# nvram set fff_safe_pic="$( _file convert_bin2hex "$FILE" )"
	# nvram commit
}

_userdata_restore ()
{
	local FILE="/www/images/intro.jpg"
	local OUT="$( uci get system.@community[0].avatar )"
	local TEMP="/tmp/AVATAR_$$"
	
	test -z "$OUT" && return
	echo "$OUT" >$TEMP
	_file convert_hex2bin "$TEMP" >"$FILE"
	rm "$TEMP"

	_nvram set fff_safe_pic ""
	_nvram set commit "safed userpic"
}

_sleep ()
{
	local SECONDS="$1"
	[ -n "$NOPAUSE" ] && return		# global

	_log do "sleep" daemon info "waiting for $SECONDS sec ('jitter'), before going further"

	sleep $SECONDS
}

_firmware_check_for_newer ()
{
	local FUNC="firmware_check_for_newer"
	
	local URL_BETA_FW="$(    _links firmware_url_get beta )"
	local URL_TESTING_FW="$( _links firmware_url_get testing )"
	
	local WAIT="$(       _math random_integer 0 1000 )"	# not all 600 routers should wgetting an 1mb-file from internet at the same time
	local WAIT_SHORT="$( _math random_integer 0 60	 )"	# not all 600 routers should wgetting the version.txt from internet at the same time
	local USERWISH
	local MODE="$( _firmware updatemode )"
	local DOIT=0

	[ -n "$FORCE_USERWISH" ] && {	# global
		MODE="$FORCE_USERWISH"
		FFF_PLUS_VERSION=0
		DOIT=1
	}

	local RESULTING_UPDATEMODE="$MODE"

	_sleep $WAIT_SHORT
	local CURRENT="$( 	  _links firmware_url_get version_current stable  )"
	URL_FIRMWARE_CURRENT="$(  _links firmware_url_get stable		  )"
	_sleep $WAIT_SHORT
	local CURRENT_BETA="$(    _links firmware_url_get version_current beta 	  )"
	_sleep $WAIT_SHORT
	local CURRENT_TESTING="$( _links firmware_url_get version_current testing )"
	_sleep $WAIT_SHORT
	local CURRENT_MAIN="$(	  _links firmware_url_get version_current_main $RESULTING_UPDATEMODE )"
	
	_log do "$FUNC" daemon info "my version:      $FFF_PLUS_VERSION"
	_log do "$FUNC" daemon info "current_stable:  $CURRENT"
	_log do "$FUNC" daemon info "current_beta:    $CURRENT_BETA"
	_log do "$FUNC" daemon info "current_testing: $CURRENT_TESTING"
	_log do "$FUNC" daemon info "current_main:    $CURRENT_MAIN"		# servers_main_version
	_log do "$FUNC" daemon info "current_main_my: $FFF_VERSION"
	_log do "$FUNC" daemon info "update-mode:     $MODE"

	# fixme! we need some more work here:
	# situation could be: stable is newer than beta
	# we have to test: update? which of the installation canditates is the newest
	# DOIT=1 should be DOIT=versionnumber and only be altered if newer than before

	case "$MODE" in
		stable)
			[ "$CURRENT" -gt "$FFF_PLUS_VERSION" ] && {		# server_stable > my?
				DOIT=1
			}
		;;
		beta)
			[ "$CURRENT_BETA" -gt "$FFF_PLUS_VERSION" ] && {	# server_beta > my?
				DOIT=1
				URL_FIRMWARE_CURRENT="$URL_BETA_FW"	
			}
			
			[ "$CURRENT" -gt "$FFF_PLUS_VERSION" ] && {		# server_stable > my?
				DOIT=1
			}
		;;
		testing)
			[ "$CURRENT_TESTING" -gt "$FFF_PLUS_VERSION" ] && {	# server_testing > my?
				DOIT=1
				RESULTING_UPDATEMODE="testing"
				URL_FIRMWARE_CURRENT="$URL_TESTING_FW"
			
				[ "$FFF_VERSION" = "$CURRENT_MAIN" ] && {
					_log do "$FUNC" daemon info "main_myself: $FFF_VERSION main_server: $CURRENT_MAIN - doing incremental update"
					_firmware update_pmu testing
					DOIT=0
				}
			}
			
			[ "$CURRENT_BETA" -gt "$FFF_PLUS_VERSION" ] && {	# server_beta > my?
				DOIT=1
				RESULTING_UPDATEMODE="beta"
				URL_FIRMWARE_CURRENT="$URL_BETA_FW"
			}
			
			[ "$CURRENT" -gt "$FFF_PLUS_VERSION" ] && {		# server_stable > my?
				DOIT=1
			}
		;;
	esac
	
	_log do "$FUNC" daemon info "update-mode-conclusion: '$RESULTING_UPDATEMODE' url: '$URL_FIRMWARE_CURRENT'"

	if [ "$DOIT" = "1" ]; then
		_log do "$FUNC" daemon info "New firmware detected! (my: $FFF_PLUS_VERSION  current:$CURRENT current-beta:$CURRENT_BETA current-testing:$CURRENT_TESTING)"

		[ -n "$( uci get opkg.@packages[0].essential )" ] && {					# safe the installed package list
			_nvram set fff_override_fw_ipkg "$( _software show_installed )"
		}
		
		_sleep $WAIT
		
		# _firmware fetch "$URL_FIRMWARE_CURRENT"		# + burn if in RAM

		_log do "$FUNC" daemon info "Checking CRC"

		local CHECK="$( /www/cgi-bin/freifunk-upload -c /www/fw.trx )"		# returns 'ok' if good
		
		_log do "$FUNC" daemon info "Checking server MD5"
		local FW_CRC_SERVER="$( _links firmware_url_get "$RESULTING_UPDATEMODE" crc )"		# is md5
		_log do "$FUNC" daemon info "Checking local MD5"
		local FW_CRC_REAL="$( _file hash "/www/fw.trx" )"					# is md5
		_log do "$FUNC" daemon info "Comparing both MD5-crc's"
		test "$FW_CRC_SERVER" = "$FW_CRC_REAL" && CHECK_MD5=ok

		if [ "$CHECK" = "ok" ] && [ "$CHECK_MD5" = "ok" ]; then
			_log do "$FUNC" daemon info "CRC - ok, rebooting"
			_sleep $WAIT
			_system reboot_safe "firmware-image successful downloaded"
		else
			_log do "$FUNC" daemon info "CRC - error, removing download, abort."
			rm -f "/www/fw.trx"						# not needed, above check does rm this
			rm -f "/www/SOFTWARE_FULLY_INSTALLED"				# to ensure, that we reinstall all packets
			_system reboot_safe "firmware-image download unsuccessful"
		fi
	else
		_log do "$FUNC" daemon info "no action - I'am up to date 8-)"
	fi
}

FIRMWARE_IN_FLASH="/www/fw.trx"
FIRMWARE_IN_RAM="/tmp/fw.trx"  

test "$2" = "nopause"	&& NOPAUSE=true		# global
test "$3" = "forcemode" && FORCE_USERWISH=$4	# global

case $1 in
        start)
		[ -e $FIRMWARE_IN_FLASH ] && {
			_userdata_restore
			_firmware_burn_if_exists
			return
		}

		_log do burn_firmware_if_exists daemon debug "no new firmwareimage found - do nothing"
	;;
	check_neighbour)
		# fixme! here should be a routine to check a random (good) neighbour for newer version
		_firmware_check_for_newer "$URL_TO_CHECK" "$URL_TO_FETCH"
	;;
	check)
		_firmware updatemode 0 && {
			_log do "call_check" daemon info "no execution, no automatic update"			
			exit
		}

		_log do check daemon info "initiating test for new firmware"

		[ -e "/tmp/LOWFLASH" ] && {
			_firmware updatemode testing || {
				_log do check daemon info "LOW_FLASH-device - abort"
				exit
			}
		}

		_firmware_check_for_newer
	;;
	forcecheck)
		_firmware_check_for_newer
	;;
	*)
		_usage
	;;
esac
