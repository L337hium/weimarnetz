#!/bin/sh
. /tmp/loader

[ -n "$FAILSAFE" ] && exit

case $1 in
	start)
		ZRAM_DEV="/dev/zram0"
		ZRAM_SIZE=10

		zram_applicable()
		{
			grep -sq ^"$ZRAM_DEV " /proc/swaps && return 1
			[ -e "$ZRAM_DEV" ] || return 1
			which mkswap >/dev/null || return 1
			which swapon >/dev/null || return 1
		}

		zram_applicable && {
			_log do zram_init daemon info "activating $ZRAM_DEV for swapping ($ZRAM_SIZE MegaBytes)"
			echo $(( $ZRAM_SIZE * 1024 * 1024 )) >"/sys/block/$( basename $ZRAM_DEV )/disksize"
			mkswap $ZRAM_DEV
			swapon $ZRAM_DEV
		}

                grep -sq ^"START=97" "/etc/init.d/watchdog" && {
   	        sed -i 's/=97/=01/' "/etc/init.d/watchdog"
   	        CMD1="pidof watchdog >/dev/null"
   	        CMD2="echo 1000 >/proc/\$( pidof watchdog )/oom_score_adj"
   	        sed -i "s|}|  $CMD1 \&\& $CMD2 \n}|" "/etc/init.d/watchdog"
   	        }
   	 
		_db restore
		/www/cgi-bin-welcome* >/dev/null		# generate cached loginpage

		[ -e /tmp/LOWMEM ] && {
			
			for TASK in klogd syslogd resetd dropbear httpd; do {
				pidof $TASK >/dev/null && {
					_log do low_mem_device daemon debug "killing '$TASK'"
					killall $TASK || {
						_log do low_mem_device daemon debug "error during killing '$TASK'"
					}
				}
			} done
			
			[ -e "/etc/init.d/S90olsr-prio" ] && {
				_log do low_mem_device daemon debug "removing QoS-scripts"
				rm -f /etc/init.d/S90olsr-prio
			}
		}

		PPPOE=0
		[ -n "$( uci get network.wan.username )" ] && PPPOE="$(( $PPPOE + 1 ))"
		[ -n "$( uci get network.wan.password )" ] && PPPOE="$(( $PPPOE + 1 ))"

		if [ $PPPOE -eq 2 -a ! -e "/tmp/PPPOE_NEEDED" ]; then
			touch "/tmp/PPPOE_NEEDED"
		else
			rm -f "/tmp/PPPOE_NEEDED"
		fi

		# fixme!
		# newstyle:
		# check first paragraph, which contains "option Mode":
		#
		# sed -e '/./{H;$!d;}' -e 'x;/option Mode/!d;' /etc/config/olsrd | fgrep "Mode" | wc -l 
		#
		# equal 2? -> do something

		case "$( uci get system.@profile[0].name )" in
			tkolleg*)
				[ "$LANADR" = "10.10.2.33" ] && {
					iptables -t nat -I POSTROUTING -s 10.10.0.0/16 -o $LANDEV	-j MASQUERADE
					iptables -t nat -I POSTROUTING -d 10.10.0.10			-j MASQUERADE		# drucker
					iptables -t nat -I POSTROUTING -d 10.10.0.2			-j MASQUERADE		# exNT
				}
			;;
			liszt28*)
				_watch usbstick_rehungen

				# generalize portfw:
				[ "$LANADR" = "10.63.99.33" ] && {
					iptables -t nat -I PREROUTING -i $WANDEV -p tcp --dport 222 -j DNAT --to-destination 10.63.2.34:22
				}
			;;
			aschbach*)
				[ "$LANADR" = "10.10.2.33" ] && {
					ip address add 192.168.134.254/24 dev $LANDEV label $LANDEV:kasseGW		# kassen gateway
				}
			;;
			berlinle*)
				[ "$LANADR" = "10.63.11.33" ] && {
					ssh -i /etc/dropbear/dropbear_dss_host_key -R 2048:localhost:22 root@intercity-vpn.de &
				}
			;;
		esac

		found_specific_hna_offer()
		{
			uci show olsrd | grep -q "olsrd.@Hna4\[.\].netaddr=$1"
		}

		attach_lan_ip()		# fixme! build an uci-representation
		{
			local ip="$1"
			local label="$2"

			ip address show dev $LANDEV | fgrep -q " $ip/32 " || {
				_log do attach_lan_ip daemon info "adding $ip to $LANDEV:$label"
				ip address add $ip dev $LANDEV label "$( _sanitizer do "$LANDEV:$label" length:15 )"
			}
		}

		found_specific_hna_offer 6.6.6.5 && attach_lan_ip 6.6.6.5 monitor	# internal monitor aggregator
		found_specific_hna_offer 6.6.6.6 && attach_lan_ip 6.6.6.6 dns
		found_specific_hna_offer 6.6.6.7 && attach_lan_ip 6.6.6.7 userdb
		found_specific_hna_offer 6.6.6.8 && attach_lan_ip 6.6.6.8 tunnelsrv	# only use for ask is_possible?

		_uci is_oldstyle && {
			[ -z "$( mount | grep usbfs )" ] && {
				_log do mount_usbfs daemon debug "trying to mount usbfs"
				mount -t usbfs none /proc/bus/usb 2>/dev/null || {
					_log do mount_usbfs daemon debug "no success, no usbfs, nousb?"
				}
			}
		}

		[ "$( _firmware updatemode )" = "testing" ] && {
			_firmware update_pmu
		}
	;;
	*)
		echo "Usage: $0 start"
	;;
esac
