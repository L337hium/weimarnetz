#!/bin/sh
. /tmp/loader

# todo:
# with/without OLSR on all interfaces? or specific interfaces?

ifname2mtu()
{
	ip link show dev "${1:-nonexistent_$2}" |
	 sed -n 's/^.* mtu \([0-9]*\).*/\1/p;q'
}

netparam_for_uci_devices ()
{
	local NAME IFNAME ADDRESS NETMASK MTU BROADCAST NETWORK PREFIX HOSTNAME CONFIG_PROFILE

	for DEVICE in loopback wlan lan wan ; do {

		case $DEVICE in
			loopback) NAME="LO" ;;
			wlan)	  NAME="WIFI" ;;
			lan)	  NAME="LAN" ;;
			wan)	  NAME="WAN" ;;
		esac

		IFNAME="$(  uci -q get network.$DEVICE.ifname  )"
		[ -z "$IFNAME" -a "$DEVICE" = "wlan" ] && {
			IFNAME="wlan0"
		}

		ADDRESS="$( uci -q get network.$DEVICE.ipaddr  )"
		NETMASK="$( uci -q get network.$DEVICE.netmask )"
		MTU="$( ifname2mtu "$IFNAME" "$DEVICE" )"

		case "$( uci get network.$DEVICE.proto )" in
			dhcp)
				ADDRESS="$( _net dev2ip $IFNAME )"
				NETMASK="$( _net dev2ip $IFNAME mask )"
			;;
			pppoe)							# fixme! should also work for pppoe-lan etc.
				IFNAME="pppoe-wan"
				ADDRESS="$( _net dev2ip $IFNAME )"
				NETMASK="$( _net dev2ip $IFNAME mask )"
				MTU="$( ifname2mtu "$IFNAME" "$DEVICE" )"
			;;
		esac

		case "$DEVICE" in
			wlan)
				[ "$( uci get wireless.radio0.disabled )" = 1 ] && {
					IFNAME=; ADDRESS=; NETMASK=
				}
			;;
		esac

		echo "${NAME}DEV=$IFNAME"
		echo "${NAME}MTU=$MTU"
		echo "${NAME}ADR=$ADDRESS"
		echo "${NAME}MSK=$NETMASK"

		BROADCAST=;NETWORK=;PREFIX=
		[ -n "$MTU" ] && eval $( ipcalc.sh $ADDRESS $NETMASK )

		echo "${NAME}BRC=$BROADCAST"
		echo "${NAME}NET=$NETWORK"
		echo "${NAME}PRE=$PREFIX"
		echo "${NAME}OLSR="
	} done

	CONFIG_PROFILE="$( uci get system.@profile[0].name )"
	echo "CONFIG_PROFILE='$CONFIG_PROFILE'"

	HOSTNAME="$( uci get system.@system[0].hostname )"
	echo "HOSTNAME='${HOSTNAME:-OpenWrt}'"

	echo "HARDWARE='$( cat /etc/HARDWARE )'"
}

_build ()
{
	local FUNC="build"
	local FILE="/tmp/NETPARAM"

	_log do $FUNC daemon debug "working"

	_log do $FUNC daemon debug "building '$FILE' for an uci-device"
	netparam_for_uci_devices >$FILE
	return 0

}

_restore_original_netparam ()
{
	local FUNC="restore_original_netparam"
	local ORIGINAL="/rom/usr/bin/netparam"
	local COPY="/usr/bin/netparam"

	return 0 			# fixme! function was build for oldstyle devices

}

if [ -e /tmp/BOOT ] || [ "$1" = "restore_original_netparam" ]; then
	_restore_original_netparam
fi


HASH_OLD="$( _file hash /tmp/NETPARAM )"
_build
HASH_NEW="$( _file hash /tmp/NETPARAM )"

[ "$HASH_OLD" = "$HASH_NEW" ] || {
	/etc/kalua_init			# this includes a static version of NETPARAM
}					# fixme! hook when 'ifup wan' gets an dhcp-lease
