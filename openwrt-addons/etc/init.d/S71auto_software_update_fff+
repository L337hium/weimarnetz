#!/bin/sh
. /tmp/loader
. /etc/variables_software_fff+		# builds global var LIST_SOFTWARE	// fixme!

# fixme!
# if ready with software-install, enforce installation of "not fully installed"-packages

func_check ()				# fixme! wrong/unreachable local default route (-> but intra-net-vpnserver can help -> add to repos)
{
	local SOFTWARE WISH REAL

	_software repos_update		# we want to know if software is in repo or not
		
	if [ "$( _system flash_free )" -ge 250 ]; then		# fixme! we need a generic function low_flash()

		_log do check_install daemon debug "building list of installed/not_installed software"

		WISH="$( for SOFTWARE in $LIST_SOFTWARE; do echo -n "1";					 done )"
		REAL="$( for SOFTWARE in $LIST_SOFTWARE; do _software package_is_installed_lowlevel "$SOFTWARE"; done )"

		_log do check_install daemon debug "installed/not_installed software: '$WISH'/'$REAL'"
	else
		WISH="forced_ready"
		REAL="forced_ready"	
	fi

	if [ $( _system uptime hours) -gt 48 ] || [ "$WISH" = "$REAL" ] || [ "$( _system flash_free )" -lt 250 ]; then	# lowflash_border must be the same as in functions_fff+
		func_install_ending
	fi
}

func_end_all_daemons ()
{
	local FUNC="end_all_daemons"
	local DAEMON
	
	for DAEMON in crond httpd udhcpc udhdpd vtund dropbear telnetd syslogd klogd; do {
		pidof $DAEMON >/dev/null && {
			_log do $FUNC daemon info "sending SIGTERM to '$DAEMON'"
			killall $DAEMON
		}
	} done			# olsrd + dnsmasq must run to send alive_message during safe_reboot()
	
	_scheduler queue_purge
}

func_install_ending ()
{
	local FUNC="install_ending"
					
	_log do $FUNC daemon info "Software fully installed or (further) install not possible"
				
	[ "$( _system flash_free )" -lt 150 ] && _software repos_purge
			
	_log do $FUNC daemon debug "Software fully installed for the first time...marking and rebooting"
					
	touch "/www/SOFTWARE_FULLY_INSTALLED"	# here is the place to
						# automatically restore backup files/webdata

	cron.upgrade_packages force		# even do it, if upgrademode=0!

	func_end_all_daemons
			
	/etc/init.d/S03patch-o-matic* post_software_install
	_log do check_install daemon debug "flashspace after patching: ($( _system flash_free ) kb)"
				
	[ $( _system flash_free ) -lt 150 ] && _software repos_purge
					
	[ -n "$( uci get opkg.@packages[0].essential )" ] && {
		_log do check_install daemon alert "opkg.@packages[0].essential is set - fixme!"
		_nvram set fff_override_fw_ipkg 1
		_nvram set commit "user has an own ipkg-list, marking for filling before flashing"
	}
		
	if [ -e /www/SOFTWARE_FULLY_INSTALLED ]; then
		_system reboot_safe "software fully installed"
	else
		_log do check_install daemon crit "Can't reboot, ultralow flashspace ($( _system flash_free ) kb)"
	fi
}

func_install ()
{
	local SOFTWARE

	for SOFTWARE in $LIST_SOFTWARE; do {
		[ $( _system flash_free ) -lt 250 ] && break
		[ "$( _software package_is_installed_lowlevel "$SOFTWARE" )" = "0" ] && _software package_install "$SOFTWARE"
	} done
}

[ -e /www/SOFTWARE_FULLY_INSTALLED ] && exit

case $1 in
	call)
		func_check
		func_install
		func_check		
	;;
	start)
		if [ -e /tmp/LOWMEM ]; then
			func_install_ending
		else
			_scheduler add "software_install"	# fixme! not need, is in crontable
		fi
	;;
	*)
		echo "Usage: $0 (start|call)"
	;;
esac
