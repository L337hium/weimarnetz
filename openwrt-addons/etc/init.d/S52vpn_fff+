#!/bin/sh 
# Copyright (C) 2011  Andreas Braeu <freifunk@andi95.de>
# Special thanks to bittorf wireless ))
START=65

. /tmp/loader

# ToDo:
#	- limiting outgoing olsr-traffic (not wasting upload) ??

DIRTY=
[ "$( uci get system.@vpn[0].active )" = "0" ]	&& DIRTY="system.@vpn[0].active set to 0"
[ -e "/tmp/LOWMEM" ]				&& DIRTY="lowmem"
[ -n "$FAILSAFE" ]				&& DIRTY="failsafe"
[ -n "$READONLY" ]				&& DIRTY="readonly"
[ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]	&& DIRTY="software not fully installed"

[ -n "$DIRTY" ] && {
	_log do init daemon debug "call: '$1' - abort: '$DIRTY'"
	exit
}

fkt_build_vars ()
{
	NODE_NUMBER="$( uci get system.@profile[0].nodenumber )"
	HOSTNAME="$( uci get system.@system[0].hostname )"
	[ -z "$HOSTNAME" ] && HOSTNAME="node$NODE_NUMBER"

	VPN_SERVER="$( uci get system.@vpn[0].ipaddr )"
	VPN_SERVER="77.87.48.19"				# fixme!
	
	SERV="$( uci get system.@vpn[0].hostname )"	# _ip4|_ip6 fallback?
	CONF="/var/etc/olsrd.conf"			# old_style
	KNOT=$NODE_NUMBER
	VTUN="/tmp/vtund.conf"

	[ "$1" != "stop" ] && INETOFFER=$( _net local_inet_offer )
	
	eval "$( _ipsystem do )"
}

fkt_tunnel_conf_write ()		# fixme! make anonymous-tunnel configurable
{
		local FUNC="tunnel_conf_write"
		local LINE=""
		local STATIC_ROUTE="$( func_get_static_route )"
		local particpant_net="10.63.0.0/16"			# fixme! hardcoded
		local mytable="weimarnetz_anonym"
		local mtu="1450"					# fixme!
		local anonym

		[ -n "$( uci get system.@vpn[0].anonym )" ] && {
			anonym="# (inactiv):"
		}

		cat >$VTUN <<EOF
	$HOSTNAME {
		passwd ff ;
		type ether ;		# fixme! olsrd-bug: /32 interface needed?
		persist yes ;		# fixme! add 'timeout 60' ?

		up {
			program "logger -p daemon.info -t $0_vtund.conf link_up %%:$HOSTNAME" ;

			program "ip address add $WIFIVPNCLIENTADR/$WIFIVPNPRE dev %% label %%:$HOSTNAME" wait ;
			program "ip address add $WIFIVPNCLIENTADR/32 dev %%" wait;
			program "ip link set dev %% mtu $mtu up" wait;
			program "ip route add $VPN_SERVER via $STATIC_ROUTE" wait;		# + table local?

			program "grep -q $mytable /etc/iproute2/rt_tables || echo 50 $mytable >>/etc/iproute2/rt_tables" ;
			program "$anonym ip rule add from $particpant_net prio 30002 table $mytable" ;
			program "$anonym ip rule add to $particpant_net prio 30001 lookup main" ;
			program "$anonym ip rule add from $LANNET/$LANPRE prio 30000 table main" ;
			program "logger -p daemon.info -t $0_vtund.conf before route"; 
			program "$anonym ip route add default via $WIFIVPNSERVERADR dev %% table $mytable" ;
			program "logger -p daemon.info -t $0_vtund.conf after route";
			program "$anonym ip route flush cache" ;
		} ;
			# fixme! static_route must only be valid for programs on this machine
		down {
			program "logger -p daemon.info -t $0_vtund.conf link_down %%:$HOSTNAME" ;

			program "$anonym ip route del default via $WIFIVPNSERVERADR dev %% table $mytable" ;
			program "$anonym ip rule del from $LANNET/$LANPRE prio 30000 table main" ;
			program "$anonym ip rule del to $particpant_net prio 30001 lookup main" ;
			program "$anonym ip rule del from $particpant_net prio 30002 table $mytable" ;

			program "ip route del $VPN_SERVER via $STATIC_ROUTE" ;
			program "ip link set dev %% down" ;
		} ;
	}
	EOF

		_log do $FUNC daemon debug "ready"
		while read LINE; do {
			_log do $FUNC daemon debug "${VTUN} +'$LINE'"
		} done <$VTUN
	}

fkt_tunnel_conf_remove ()
{
	local FUNC="tunnel_conf_remove"

	[ -e $VTUN ] && {
		_log do $FUNC daemon debug "working"
		rm $VTUN
	}
}

fkt_tunnel_start ()
{
	local FUNC="tunnel_start"
	
	[ ! -e "$VTUN" ] && {
		_log do $FUNC daemon debug "no configfile - abort"
		return
	}
	
	_system insmod tun || {
		_software package_install kmod-tun	# + 12 k
		_system insmod tun || return 1
	}
	
	_log do $FUNC daemon debug "starting vtun with config '$VTUN'"
	
	vtund -f $VTUN $HOSTNAME $SERV -P 5001 2>/dev/null || {

		_log do $FUNC daemon debug "error"	
		
		if _software package_is_not_installed vtun ; then
		
			_log do $FUNC daemon debug "vtund and/or kmod-tun not installed"
		
			fkt_tunnel_conf_remove
			
			_software make_free_space 1000
			_software package_install libopenssl	# +550 k
			_software package_install zlib		# +175 k
			_software package_install liblzo	# +52 k
			_software package_install vtun		# +36 k
								# ----
								# +825
		else
			vtund - 2>/dev/null | grep -q -i vtun || {
			
				_log do $FUNC daemon debug "vtund is installed, but has an serious problem"

				# under mysterious circumstances (e.g. low disk space during installing),
				# vtund claims to have a "bus error", so we should reinstall it
			
				_software package_remove  vtun
				_software package_remove  libopenssl
				_software package_install libopenssl
				_software package_install vtun
			}
		fi
		
		return 1	# cron trys later a vpn-restart
	}
}

fkt_tunnel_stop ()
{
	local FUNC="tunnel_stop"
	
	pidof vtund >/dev/null && {

		_log do $FUNC daemon debug "killing tunnel-daemon"		
		killall vtund
		sleep 2
	
		pidof vtund >/dev/null && {

			_log do $FUNC daemon debug "daemon still alive, trying hard"
			killall -9 vtund
			sleep 2
			
			pidof vtund >/dev/null && {

				_log do $FUNC daemon debug "daemon still alive - error"
			}
		}
	}
}

fkt_olsr_conf_remove ()
{
	local FUNC="olsr_conf_remove"
	
	[ -e $CONF ] && {
		_log do $FUNC daemon debug "working"
		rm $CONF
	}	
}

fkt_olsr_conf_write ()
{
	local FUNC="olsr_conf_write"
	local LINE=""
	local INTERFACE="tap0"

	[ "$( _vpn_proto )" != "olsr" ] && INTERFACE=none		# fixme! this is dirty...
	
	SPEED=$( uci get olsrd.@olsrd[0].speed )			# fixme! maybe multiply by 10? (lowering traffic)
	SPEED=${SPEED:=5}

        FEYE=$( uci get olsrd.@olsrd[0].fisheye )
	if [ "0" != "$FEYE" ];then
		TCINT=$(( 2 * SPEED / 4 ))
		test $TCINT -eq 0 && TCINT=1
		COVER=7
		FEYE=1
	else
		TCINT=$(( 2 * SPEED ))
		COVER=3
		FEYE=0
	fi
						# these are the values for fff v1.6.34
	cat >$CONF <<EOF
Interface "$INTERFACE" {
	HelloInterval		$(( SPEED / 2 + 1 )).0
	HelloValidityTime	$(( 25 * SPEED )).0
	TcInterval		$TCINT.0
	TcValidityTime		$(( 100 * SPEED )).0
	MidInterval		$(( 5 * SPEED )).0
	MidValidityTime		$(( 100 * SPEED )).0
	HnaInterval		$(( 2 * SPEED )).0
	HnaValidityTime		$(( 25 * SPEED )).0
	Ip4Broadcast		$WIFIVPNSERVERADR
}
EOF

	_log do $FUNC daemon debug "ready"
	while read LINE; do {
		_log do $FUNC daemon debug "${CONF} +'$LINE'"
	} done <$CONF
}

func_get_static_route ()			# prevents tunneling over mesh, when local defgw gets broken
{
	local DEFAULT_GATEWAY_IP="$( ip route list exact 0.0.0.0/0 | head -n1 | cut -d" " -f3 )"
	
	[ -n "$( uci get system.@vpn[0].force )" ] && return
	
	case $INETOFFER in
		lan)
			echo -n "$DEFAULT_GATEWAY_IP dev $LANDEV"
		;;
		pppoe)
			echo -n "$( ip route list exact 0.0.0.0/0 dev ppp0 | head -n1 | cut -d" " -f3 ) dev ppp0"
		;;
		*)
			echo -n "$DEFAULT_GATEWAY_IP dev $WANDEV"
		;;
	esac
}

_vpn_proto ()						# defaults to 'olsr'
{
	local PROTO="$( uci get system.@vpn[0].proto )"
	
	echo -n "${PROTO:-olsr}"			# fixme! none,olsr,batman,batman-adv,...
}

func_sending_request_to_vpnserver_for_participation ()
{
	local FUNC="sending_request_to_vpnserver_for_participation" 
	local OUTPUT=""
	local URL="http://$VPN_SERVER/freifunk/vpn/"
	local QUERY=""
	local ADMINMAIL="$( uci get system.@admin[0].mail )"
	
	QUERY="${QUERY}?CLIENTIP=${WIFIVPNCLIENTADR}"
	QUERY="${QUERY}&SERVERIP=${WIFIVPNSERVERADR}"
	QUERY="${QUERY}&NAME=$HOSTNAME"
	QUERY="${QUERY}&PROTO=$( _vpn_proto )"
	QUERY="${QUERY}&EMAIL=$( _sanitizer do "${ADMINMAIL:=unset@box.local}" urlvalue )"
	QUERY="${QUERY}&COMMENT=city${FFF_CITY}_node${NODE_NUMBER}_profile$( uci get system.@profile[0].name )"

	_log do $FUNC daemon debug "query: '${URL}${QUERY}'"
	
	OUTPUT="$( wget 2>/dev/null -O - "${URL}${QUERY}" )"	# fixme! encode unsafe URL chars (like email above)

	_log do $FUNC daemon debug "answer: '$OUTPUT'"
}

func_vpn_start ()
{
	local FUNC="func_vpn_start"

	[ $INETOFFER = "false" -a -z "$( uci get system.@vpn[0].force )" ] && {
		_log do $FUNC daemon debug "no local default gateway - abort"
		return 1
	}

	[ -z "$NODE_NUMBER" ] && {
		_log do $FUNC daemon debug "node not configured yet - abort"
		return 1
	}
		
	func_sending_request_to_vpnserver_for_participation
	fkt_tunnel_conf_remove
	fkt_tunnel_conf_write
	fkt_olsr_conf_remove
	fkt_olsr_conf_write
	fkt_tunnel_start && {
		pidof olsrd >/dev/null && {
			[ "$( _vpn_proto )" = "olsr" ] && {
				_scheduler add "restart_olsr"
				return
			}
		}
		_log do $FUNC daemon debug "olsr not up or olsr-proto unwished, no need for restart of olsrd"
	}
}

func_vpn_stop ()
{
 	fkt_tunnel_conf_remove
 	fkt_olsr_conf_remove
  	fkt_tunnel_stop
}

func_vpn_status ()
{
	FUNC="vpn_status"
	
	pidof vtund >/dev/null && {
		_log do $FUNC daemon debug "daemon running"

		grep -sq ^"Interface .*tap0" /etc/olsrd.conf /var/etc/olsrd.conf || {	# fixme! more abstraction: tun/tapXY + conf-filename
			_log do $FUNC daemon debug "daemon running but tunnel-device not used by olsr"
			return 1
		}
		_log do $FUNC daemon debug "tunnel-device is in olsr.conf"
		
		ps ax | grep vtund | grep -q connecting && {
			_log do $FUNC daemon debug "daemon running but connection seems broken"
			return 1
		}
		_log do $FUNC daemon debug "connection seems active"
		
		neigh | grep -q "==1==" || {				# fixme! implement: 'neigh has_tunnel_neigh'
			_log do $FUNC daemon debug "no tunnel-olsr neighs?"
			return 1
		}
		_log do $FUNC daemon debug "tunnel-olsr neigh available"
		
		return 0
	}
	
	_log do $FUNC daemon debug "daemon NOT running"
	return 1
}

case $1 in
	start)
		fkt_build_vars
		func_vpn_start
	;;
	stop)
		fkt_build_vars $1
		func_vpn_stop
 	;;
	restart)
		fkt_build_vars
		func_vpn_status && {
	
			[ "$INETOFFER" = "false" ] && {
				_log do restart daemon debug "no more inetoffer, stop running vpn"
				func_vpn_stop
				exit
			}
		
			[ "$2" != "--force" ] && {
				_log do restart daemon debug "ignoring call"
				exit
			}
		}
		
		func_vpn_stop
		func_vpn_start
      	;;
      	status)
      		func_vpn_status
      	;;
	*)
		echo "Usage: $0 (start|stop|restart (--force)|status)"
	;;
esac
