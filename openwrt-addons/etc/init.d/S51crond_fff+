#!/bin/sh
. /tmp/loader

func_cron_daemon_start ()
{
	local funcname="cron_daemon_start"

	[ -e /etc/init.d/cron ] && {					# fixme!
		_log do $funcname daemon info "removing unneeded initfile"
		rm /etc/init.d/cron
		killall crond
	}

	pidof crond >/dev/null && {
		_log do $funcname daemon debug "already started"
		return 1
	}

	/usr/sbin/crond -L /dev/null || {
		_log do $funcname daemon debug "error"
		return 1
	}

	_log do $funcname daemon info "[OK] started"
}

cron_watchdog()
{
	local func="cron_watchdog"
	local mode="$1"		# start|stop

	_uci is_oldstyle && return		# we have crondog.o on old devices

	local interval_sec=60
	local cronpid watchdog_id
	local watchdog_id_file="/tmp/cron_watchdog.id"
	local watchdog_cronpid_file="/tmp/cron_watchdog.cronpid"
	local watchdog_pid_file="/tmp/cron_watchdog.pid"

	case "$mode" in
		start)
			cronpid="$( _system get_first_pid crond )"
			echo ${cronpid:=nonexistent} >"$watchdog_cronpid_file"

			_cron watchdog_is_running && {
				_log do $func daemon info "[OK] watchdog already exists, no need to start one"
				return
			}

			watchdog_id="$( _math random_integer 1 999999 )"
			echo $watchdog_id >"$watchdog_id_file"

			cat >/tmp/cron_watchdog.sh <<EOF
#!/bin/sh

logger -t $func -p daemon.info "checking each $interval_sec sec for crondpid $cronpid, see /tmp/cron_watchdog.sh"

while true; do {

	[ -z "\$FIRSTRUN" ] && {
		FIRSTRUN=0

		while [ "\$( date +%S )" != "55" ]; do sleep 1; done	# script should work, when its quiet...

		logger -t $func -p daemon.info "[OK] starting up with pid \$( cat $watchdog_pid_file )"
	}

	watchdog_id=$watchdog_id
	if [ -e /tmp/cron_watchdog_please_end_yourself_\$watchdog_id ]; then		# poor mens IPC
		rm /tmp/cron_watchdog_please_end_yourself_*
		. /tmp/loader
		_log do cron_watchdog daemon info "[OK] ending myself with ID \$watchdog_id"
		exit
	else
		read cronpid_to_watch <"$watchdog_cronpid_file"
		[ -d /proc/\${cronpid_to_watch:-nonexistent} ] || {
			. /tmp/loader
			_log do cron_watchdog daemon alert "no crond found, starting cron + watchdog"
			$0 start
			exit
		}
	fi

	sleep $interval_sec
} done &

echo \$! >$watchdog_pid_file
EOF
			sh /tmp/cron_watchdog.sh
		;;
		stop)
			if _cron watchdog_is_running ; then

				read watchdog_id <$watchdog_id_file

				[ -n "$watchdog_id" ] && {
					touch /tmp/cron_watchdog_please_end_yourself_$watchdog_id

					while [ -e /tmp/cron_watchdog_please_end_yourself_$watchdog_id ]; do {
						_log do cron_watchdog daemon debug "waiting for deletion of '/tmp/cron_watchdog_please_end_yourself_$watchdog_id'"
						sleep 10
					} done
				}

				_log do cron_watchdog daemon info "[OK] watchdog gone"
			else
				_log do cron_watchdog daemon info "[OK] watchdog was not active"
			fi

			rm /tmp/cron_watchdog.*
		;;
	esac
}

func_cron_daemon_stop ()
{
	local FUNC="cron_daemon_stop"
	
	pidof crond >/dev/null && {
		_log do $FUNC daemon info "killing"
		killall crond
		return
	}

	_log do $FUNC daemon debug "no daemon running"
}

func_cron_start ()
{
	func_cron_config_write $1
	func_cron_daemon_start && cron_watchdog start
}

func_cron_stop ()
{
	local option="$1"

	[ "$option" = "leave_watchdog" ] || cron_watchdog stop
	func_cron_daemon_stop
}

func_cron_status ()
{
	local FUNC="cron_status"
	
	pidof crond >/dev/null || {
		_log do $FUNC daemon debug "daemon is NOT running"
		return
	}
	
	_log do $FUNC daemon debug "daemon is running"
	func_cron_config_write status
}

func_cron_config_write ()
{
	local FUNC="cron_config_write"
	local CRONFILE

	if _uci is_oldstyle ; then
		CRONFILE="/var/spool/cron/crontabs/root"	
	else
		CRONFILE="/etc/crontabs/root"
	fi

	local CRONDIR="$( dirname $CRONFILE )"
	local OWFS="$( which owfs >/dev/null && echo -n '-a owfs' )"
	local LINE=""
	local PROFILE="$1"

	[ "$PROFILE" = "status" ] && {
		_log do $FUNC daemon debug "status: '$CRONFILE'"
		cat $CRONFILE
		return
	}

	_uci is_oldstyle || {
		PROFILE="newstyle"
	}

	case "$( uci get system.@profile[0].name )" in
		artotel*)
			PROFILE="lazy"
		;;
	esac

	  if [ "$PROFILE" = "newstyle" ]; then

		:

	elif [ "$PROFILE" = "lazy" ]; then

		:
	
	elif [ "$PROFILE" = "nano" ]; then
	  
	  	:
	
	elif [ "$PROFILE" != "minimal" ] && [ ! -e /tmp/LOWMEM ] && [ -z "$FAILSAFE" ] && [ -n "$WIFI_DEVS" ] && [ -e "/www/SOFTWARE_FULLY_INSTALLED" ]; then
	
		PROFILE="standard"
	else
		PROFILE="minimal"
	fi

	[ ! -d $CRONDIR ] && mkdir -p $CRONDIR

	local RUN_QUEUE=". /tmp/loader; _scheduler run"

	_log do $FUNC daemon debug "profile = $PROFILE"


	if [ "$PROFILE" = "minimal" ]; then

		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S minimal; $RUN_QUEUE"

	elif [ "$PROFILE" = "nano" ]; then

		echo >$CRONFILE "* * * * * /usr/sbin/cron.minutely"

	elif [ "$PROFILE" = "lazy" ]; then

		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S lazy; $RUN_QUEUE"

	elif [ "$PROFILE" = "newstyle" ]; then

		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S newstyle -O -P -f -H -w; $RUN_QUEUE"
	else
		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S oldstyle -O -P -f -u -o; $RUN_QUEUE"
	fi


	while read LINE; do {
		_log do $FUNC daemon debug "+ '$LINE'"
	} done <$CRONFILE
}

case $1 in
	start)
		func_cron_start $2
	;;
	minimal)
		func_cron_start minimal
	;;
	stop)
		func_cron_stop	
	;;
	restart)
		func_cron_stop leave_watchdog
		func_cron_start $2
	;;
	status)
		func_cron_status
	;;
	*)
		echo "Usage: $0 (stop | start [nano|minimal|standard] | restart [...] | status)"
	;;
esac

