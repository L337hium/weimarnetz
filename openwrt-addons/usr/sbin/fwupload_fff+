#!/bin/sh
. /tmp/loader

_usage ()
{
	echo "Usage: $0 ( start | list | update_my_version_string | check <functionfile> | search <string> | show_functions <specific_function> | replace <string1> <string2> | cat_func | strip_doubles_lines )"
}

update_my_version_string()
{
	local func="update_my_version_string"
	local file_orig="/etc/variables_fff+"
	local file_temp="/tmp/$func"
	local date="$( LANG=C date +%d%b%Y-%Huhr%M )"
	local unix_special="$(( $( date +%s ) / 3600 ))"

	grep  >$file_temp -v ^FFF $file_orig
	echo >>$file_temp "FFF_PLUS_VERSION=\"$unix_special\"	# $date, SVN-000"	
	tail >>$file_temp -n1 $file_orig

	_log do $func daemon info "[OK] updating myself"
	mv $file_temp $file_orig
}

_build_archiv ()
{
	local FILE LIST

	_vars
	LIST="$( _firmware filelist )"

	tar cvzf $ARCHIV $LIST

	_file include
	for FILE in $LIST; do {
		[ "$( _file size "$FILE" )" = "0" ] && {
			echo "0 Bytes: $FILE"
		}
	} done
}

_vars ()
{
	ARCHIV="/tmp/changes.tgz"
	SERVER="bastian@10.63.2.34:/tmp"
}

_upload ()
{
	_log do UPLOAD daemon info "attempting to 'scp $ARCHIV $SERVER'"

	_vars
	scp $ARCHIV $SERVER
	rm $ARCHIV
}

case $1 in
	check)
		for FILE in $( _firmware filelist "$2" ); do {
			echo "checking '$FILE':"
		
			[ "$FILE" = "/etc/kalua/tool" ]			  && continue	# fixme!
			[ "$FILE" = "/etc/init.d/S52vpn_fff+" ]		  && continue	# fixme!
		
			LIST="$( sed -n 's/^\(.*\) ().*/\1/p' "$FILE" )"
		
			for FUNCNAME in $LIST; do {
				sed "/^${FUNCNAME} ()/,/^}/!d" "$FILE" >/tmp/CHECK_$$
				echo "- checking $FUNCNAME ()"
				.  /tmp/CHECK_$$ || break
				rm /tmp/CHECK_$$
			} done
		} done
	;;
	start)
		update_my_version_string
		_build_archiv
		_upload
	;;
	list)
		FULLSIZE=0
		FULLSTRIP=0
		FULLLINES=0
	
		for FILE in $( _firmware filelist "$2" ); do {
			[ -e "$FILE" ] && {
			
			SIZE="$( _file size "$FILE" )"
			LINES="$( cat "$FILE" | wc -l )"
			FULLLINES=$(( $FULLLINES + $LINES ))
			FULLSIZE=$((  $FULLSIZE + $SIZE ))
			STRIPPED_SIZE="$( sed 's/[ 	]*$//' "$FILE" | wc -c )"
			STRIPPED_DIFF="$(( $SIZE - $STRIPPED_SIZE ))"
			[ "$STRIPPED_DIFF" -gt 0 ] && {
				FULLSTRIP=$(( $FULLSTRIP + $STRIPPED_DIFF ))
				STRIPPED_DIFF="  --> $STRIPPED_DIFF Bytes stripable"
			}
			
			case ${#SIZE} in
				4) SIZE=" $SIZE" ;;
				3) SIZE="  $SIZE" ;;
				2) SIZE="   $SIZE" ;;
				1) SIZE="    $SIZE" ;;
			esac
				
				echo "$SIZE   $FILE $STRIPPED_DIFF Bytes stripable / $LINES lines"
			}
		} done
		
		echo "size overall: $FULLSIZE bytes $FULLLINES lines ($FULLSTRIP bytes stripable)"
	;;
	search)
		for FILE in $( _firmware filelist "$3" ); do {
			[ -e "$FILE" ] && {
				grep -q "$2" "$FILE" && {
					_log do search daemon info "found in '$FILE' :"
					echo "found in '$FILE' :"

					sed -n "/$2/s/^[ 	]*\(.*\)/  : \1/p" "$FILE" 2>/dev/null || {	# remove leading whitespaces/tabs
					
						grep "$2" "$FILE"	# for special patterns
					}
					
					echo
				}
			}
		} done
	;;
	show_functions)
		for FILE in $( _firmware filelist "$3" ); do {
			LIST_FUNCTIONS="$( sed -n 's/^\([a-zA-Z_]*\) ().*/\1/p' $FILE )"
		
			[ -n "$2" ] && LIST_FUNCTIONS="$( sed -n "s/^\($2\) ().*/\1/p" $FILE )"
			
			for FUNCTION in $LIST_FUNCTIONS; do {
			
				COUNT=0
				for FILE2 in $LIST; do {
				
					[ -n "$( grep "$FUNCTION" "$FILE2" | grep -v "^${FUNCTION} ().*" )" ] && {
						echo "		found call to '$FUNCTION' in '$FILE2'"
						COUNT=$(( $COUNT + $( grep "$FUNCTION" $FILE2 | grep -v "^${FUNCTION} ().*" | sed -n '$=' ) ))
					}
				} done
				
				echo "$COUNT times found $FUNCTION (defined in '$FILE')"
			} done
		} done
	;;
	cat_func)
		FUNCNAME="$2"
		
		for FILE in $( _firmware filelist "$3" ); do {
			sed "/^${FUNCNAME}[ ]*()/,/^}/!d" $FILE
		} done
	;;
	replace)
		SEARCH="$2"
		REPLACE="$3"
		FILELIST="$4"
		
		for FILE in $( _firmware filelist "$4" ); do {
			# sed -i 's/_log do \([^ daemon info ]*\) \(.*\)/_log do \1 daemon info \2/p' "$FILE"
			sed -i "s/${SEARCH}/${REPLACE}/g" "$FILE"
		} done
	;;
	strip_doubles_lines)
		for FILE in $( _firmware filelist "$2" ); do {
			_log do strip_doubles daemon debug "working on '$FILE'"
		
			NUM=0
			while [ $NUM -lt $( _file lines "$FILE" ) ]; do {
				NUM=$(( $NUM + 1 ))
				MD5_NEW="$( sed "${NUM}q;d" "$FILE" | md5sum | cut -d' ' -f1 )"
				
				if [ "$MD5_NEW" = "$MD5_OLD" ]; then
					echo "# lasse diese zeile aus:"
					sed "${NUM}q;d"	"$FILE"
					echo "#"
				else
					sed "${NUM}q;d" "$FILE" >>"${FILE}_tmp"
				fi
				
				MD5_OLD="$MD5_NEW"
			} done
			
			[ -e "${FILE}_tmp" ] && {
				if [ $( _file size "$FILE" ) -ne $( _file size "${FILE}_tmp" ) ]; then
					echo "stripped to '$FILE' = $( _file size "$FILE" )->$( _file size "${FILE}_tmp" ) Bytes"
					echo "key!";read KEY
					mv "${FILE}_tmp" "$FILE"
					chmod 777 "$FILE"
				else
					rm "${FILE}_tmp"
				fi
			}
		} done
	;;
	update_my_version_string)
		update_my_version_string
	;;
	*)
		_usage
	;;
esac
