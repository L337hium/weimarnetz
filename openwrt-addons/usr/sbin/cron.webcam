#!/bin/sh

# todo: choose framerame according to ram_size

# eval $( ls -laR /tmp/motion | while read LINE; do set -- ${LINE:-0}; echo "SIZE=\$(( \$SIZE + ${5:-0} ));"; done ); echo $SIZE; du -s /tmp/motion
# http://stackoverflow.com/questions/12293853/how-to-use-ffmpeg-timestamp-syntax
# http://ffmpeg.org/trac/ffmpeg/wiki/x264EncodingGuide
# mplayer -tv driver=v4l2:device=/dev/video0 tv://
# v4l2-ctl --all
# fswebcam -d /dev/video0 --fps 1 -r 640x480 /www/cam.jpg
# scp .ssh/dropbear_dss_host_key.pub bastian@10.63.2.34:.ssh/authorized_keys.$HOSTNAME

# 3.9 Which are good parameters for encoding high quality MPEG-4?
# "-mbd rd -flags +mv4+aic -trellis 2 -cmp 2 -subcmp 2 -g 300 -pass 1/2"
# try: "-bf 2" - "-flags qprd" - "-flags mv0" or "-flags skiprd"

motion_generate_conf()			# resolution: (motion needs modulo 16)
{					# 1920 x 1080 = 1920 x 1072
	local width="${1:-640}"		# 1280 x  720 = 1280 x  720
	local height="${2:-480}"	#  800 x  450 =  800 x  448
	local mode="${3:-day}"		#  640 x  343 =  640 x  336
	local size_tmpfs		#     or
	local dir="/webcam"		#  800 x  600
	mkdir -p "$dir"			#  640 x  480
	local snapshot quali

	case "$mode" in
		day)
			snapshot="60"
			quali="80"
			pixel_change_in_percent_for_motion="4"
		;;
		night)
			snapshot="600"
			quali="95"
			pixel_change_in_percent_for_motion="2"
		;;
	esac

	# default is 1500 pixel, which is 0.5% for 640 x 480
	local threshold=$(( (($width * height) / 100) * $pixel_change_in_percent_for_motion ))

	grep -q ^"tmpfs /webcam " /proc/mounts || {
		size_tmpfs=$( _system ram_size )
		size_tmpfs=$(( $size_tmpfs * 1024 / 2 ))
		mount -t tmpfs -o size=${size_tmpfs},nosuid,nodev,mode=1777 tmpfs /webcam
	}

	cat <<EOF
daemon			on
quiet			on

videodevice		/dev/video0
width			$width
height			$height
quality			$quali		# jpeg compression
threshold		$threshold		# for motion $pixel_change_in_percent_for_motion% of all pixels must change

target_dir		"$dir"
snapshot_filename	webcam
snapshot_interval	$snapshot

text_left		"host: $( uci get system.@system[0].hostname ) location: ($( uci get system.@admin[0].location )) quali: $quali% mode: $mode"
#locate			off		# draw box around moved object

#pre_capture		5
framerate		1		# maximum per second, fast cpu = 30

#webcam_port		8081
#webcam_localhost	off		# allow from everywhere
EOF
}

force_apply_config()
{
	local pid

	motion_generate_conf 640 336 "$( store_startdate )"  >"/tmp/motion.conf"
	pid="$( pidof motion )" && kill -SIGHUP $pid
}

store_startdate()
{
	local config="/tmp/motion.conf"
	local mode

	date +%s     >"/tmp/webcam.startunix"
	date +%Hh%Mm >"/tmp/webcam.start"

	case "$( date +%H)" in	# 00..23
		18|19|20|21|22|23|00|01|02|03|04|05|06)
			mode="night"
		;;
		*)
			mode="day"
		;;
	esac

	echo "$mode"

	[ -e "$config" ] && {
		grep -q "mode: $mode" "$config" || {
			force_apply_config
		}
	}
}

[ -e "/tmp/motion.conf" ] || {
	. /tmp/loader
	_ntp set
	store_startdate
	force_apply_config

	[ -e "/www/webcam.jpg" ] || ln -s "/webcam/lastsnap.jpg" "/www/webcam.jpg"
}

storage_is()			# measure low/high-jump
{
	local funcname="storage_is"
	local mode="$1"		# crowded | full
	local lowram="3000000"	# bytes
	local ram_free

	set -- $( df | grep "/webcam"$ )
	STORAGE_FREE="${5%%%*}"			# global var

	while read L;do case $L in MemFree:*)set $L;M=$2;;Buffers:*)set $L;ram_free=$((($M+$2)*1024));break;esac;done</proc/meminfo

	_log do $funcname daemon info "webcam: percent_used: $STORAGE_FREE% mode: '$mode' - ram: $ram_free bytes"
	[ $ram_free -lt $lowram ] && return 0		# simulates "storage full"

	case "$mode" in
		crowded)
			test $STORAGE_FREE -ge 65
		;;
		full)
			test $STORAGE_FREE -ge 80
		;;
	esac
}

store_startdate()
{
	date +%s     >"/tmp/webcam.startunix"
	date +%Hh%Mm >"/tmp/webcam.start"
}

RUN_ENCODER=
[ -e "/tmp/webcam_rename" ] || {
	pidof motion >/dev/null || {
		[ -e "/tmp/webcam_last_event" ] && rm "/tmp/webcam_last_event"
		motion -c "/tmp/motion.conf"
	}

	if [ -e "/tmp/webcam_force_safe" ]; then
		RUN_ENCODER="true"
	else
		if storage_is crowded; then
			RUN_ENCODER="true"
		fi
	fi
}

# logger -s "RUN_ENCODER=$RUN_ENCODER"

if [ -n "$RUN_ENCODER" ]; then
	read STARTDATE <"/tmp/webcam.start"
	read STARTUNIX <"/tmp/webcam.startunix"
	FILENAME="/tmp/cam_1-stream-id_${STARTUNIX}-$( date +%Y_%b_%d )-from_${STARTDATE}_to_$( date +%Hh%Mm ).mp4"
	store_startdate

	sed -i '/^framerate/s/30/1/' /tmp/motion.conf
	kill -SIGHUP $( pidof motion )

	cd /webcam
	ls -1t *[0-9].jpg >/tmp/webcam_rename		# newest on top

	COUNT=$( wc -l </tmp/webcam_rename )

	I=0
	while read LINE; do {
		echo "mv '$LINE' '/webcam/img_$(( $COUNT - $I )).ffmpeg.jpg'"
		I=$(( $I + 1 ))
	} done </tmp/webcam_rename | grep -n '' | sort -rn | cut -d: -f2- >/tmp/webcam_rename.sh	# emulate tac
	cp /tmp/webcam_rename.sh /tmp/WEX
	. /tmp/webcam_rename.sh

	. /tmp/loader
	echo "video_encoding" >/tmp/CRON_OVERLOAD

	while [ -e "/tmp/webcam_rename.sh" ]; do {
		while storage_is full; do {
			# dont delete the newest, can confuse 'motion'
			FILE="$( ls -1t *[0-9].jpg | head -n2 | tail -n1 )"
			if [ -n "$FILE" ]; then
				_log do remove_ffmpeg daemon alert "T1: rm '$FILE' free: $STORAGE_FREE%"
			else
				# remove oldesti/first element, hopefully ffmpeg has eaten it already
				for FILE in $LIST_DELETEABLE; do {
					set -- $LIST_DELETEABLE
					shift
					LIST_DELETEABLE="$*"
					break
				} done

				_log do remove_ffmpeg daemon alert "T2: rm '$FILE' free: $STORAGE_FREE%"
			fi

			if [ -n "$FILE" ]; then
				rm "$FILE"
			else
				_log do remove_ffmpeg daemon alert "T3: no file to delete - killing motion"
				killall motion
			fi
		} done
		sleep 5
	} done &

	if storage_is full; then
		COMMAND="false"
	else
		_log do webcam_ffmpeg daemon alert "generating '$FILENAME' with $COUNT frames"
		_stopwatch start video_encoding

		# default bitrate = 200k is crap
		COMMAND="ffmpeg -f image2 -i img_%d.ffmpeg.jpg -b 2500k -vcodec mpeg4 '$FILENAME'"
	fi

	if $COMMAND; then
		_stopwatch stop video_encoding quiet "$COUNT" "frames"

		rm -f /webcam/img_*
		SIZE="$( _file size "$FILENAME" )"
		_log do webcam_ffmpeg daemon alert "generated '$FILENAME' with $SIZE bytes/$COUNT frames = $(( $SIZE / $COUNT )) bytes/frame"

		scp -i /etc/dropbear/dropbear_dss_host_key "$FILENAME" bastian@10.63.2.34:
	else
		_log do webcam_ffmpeg daemon alert "[ERROR]"
	fi

	rm -f /webcam/img_* "$FILENAME" "/tmp/CRON_OVERLOAD" /tmp/webcam_rename /tmp/webcam_rename.sh /tmp/webcam_force_safe

	sed -i '/^framerate/s/1/30/' /tmp/motion.conf
	kill -SIGHUP $( pidof motion )
else
	if [ "/webcam/lastsnap.jpg" -ot "/webcam/MARK" ]; then
		touch /webcam/MARK
	else
		cp /webcam/lastsnap.jpg /webcam/snap-${UP:-$$}.jpg
	fi

	EVENT_RECENT="$( ls -1t /webcam/[0-9]* | head -n1 | cut -d'-' -f1 )"
	[ -e "/tmp/webcam_last_event" ] && read EVENT_LAST <"/tmp/webcam_last_event"

	[ "${EVENT_RECENT:=/webcam/snap}" = "$EVENT_LAST" ] || {
		COUNT="$( ls -1 ${EVENT_RECENT}-* | wc -l )"
		FILE="$(  ls -1 ${EVENT_RECENT}-* | sed "$(( $COUNT / 2 ))q;d" )"
		. /tmp/loader
		_log do webcam_upload daemon info "file '$FILE'"

		echo "$EVENT_RECENT" >"/tmp/webcam_last_event"
		scp -i /etc/dropbear/dropbear_dss_host_key "$FILE" root@intercity-vpn.de:/var/www/1.jpg
	}
fi
