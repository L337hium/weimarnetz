#!/bin/sh
read UP REST </proc/uptime
[ ${UP%.*} -gt 129600 ] && {	# 36h
	rm "/tmp/CRON_IS_CAREFUL"
	echo "b" >/proc/sysrq-trigger
	/sbin/reboot
}

read LOAD REST </proc/loadavg
# uncomment to log freemem/uptime/load into '/tmp/MEM'
# while read L;do case $L in MemFree:*)set $L;M=$2;;Buffers:*)set $L;echo $((($M+$2)*1024)) $UP $LOAD>>/tmp/MEM;break;;esac;done</proc/meminfo
case "$LOAD" in
	1.00)
		if [ -e "/tmp/CRON_PSWORK" ]; then
			echo "b" >/proc/sysrq-trigger
			/sbin/reboot -f
		else
			touch "/tmp/CRON_PSWORK"
			ps >/dev/null
			rm "/tmp/CRON_PSWORK"

			[ -e "/bin/dmesg" ] && . /usr/sbin/cron.check_klog
			[ -e "/tmp/CRON_OVERLOAD" ] && rm "/tmp/CRON_OVERLOAD"
		fi
	;;
	1.0*|0.9*|0.8*)
		[ -e "/tmp/CRON_OVERLOAD" ] && rm "/tmp/CRON_OVERLOAD"
	;;
	0*)
		[ -e "/bin/dmesg" ] && . /usr/sbin/cron.check_klog
		[ -e "/tmp/CRON_OVERLOAD" ] && rm "/tmp/CRON_OVERLOAD"

		if [ -e /tmp/CRON_LOCK ]; then
			case "$LOAD" in
				0.00|0.01|0.02)
					echo -n '#' >>"/tmp/CRON_UNDERLOAD"
					read I <"/tmp/CRON_UNDERLOAD"
					[ ${#I} -gt 9 ] && {
						rm "/tmp/CRON_IS_CAREFUL"
						echo "b" >/proc/sysrq-trigger
						/sbin/reboot -f
					}

					. /tmp/loader
					for PRG in mv scp nc wget; do {
						pidof $PRG && _watch hanging_command $PRG
					} done
				;;
			esac
		else
			[ -e "/tmp/CRON_UNDERLOAD" ] && rm "/tmp/CRON_UNDERLOAD"

			case "$( pidof dropbear )" in						# REM
				*" "*)								# REM
				;;								# REM
				*)								# REM
					trap "rm /tmp/CRON_LOCK; exit" INT TERM EXIT
					>/tmp/CRON_LOCK

					/usr/bin/scheduler -U -S newstyle -O -P -f -H -w
					. /tmp/loader
					_scheduler run

					rm /tmp/CRON_LOCK
					trap - INT TERM EXIT
				;;								# REM
			esac									# REM
		fi
	;;
	*)
		echo -n '#' >>"/tmp/CRON_OVERLOAD"
		read I <"/tmp/CRON_OVERLOAD"

		case ${#I} in
			0|1|2|4)
			;;
			3)
				rm user-*	# maybe orphaned vds-files/ulogd
			;;
			*)
				rm "/tmp/CRON_IS_CAREFUL"
				echo "b" >/proc/sysrq-trigger
				/sbin/reboot -f
			;;
		esac
	;;
esac
