#!/bin/sh
. /tmp/loader

[ -e "/tmp/LOCKFILE_APPLY" ] && {
	_log do apply_profile daemon info "[OK] no scheduler action"
	exit 0
}

case "$( uci get wireless.@wifi-iface[0].mode )" in
	"ap")
		grep -sq "b43-phy0" /tmp/dmesg.boot && {
			iw dev $WIFIDEV set bitrates legacy-2.4 1 2 5.5
		}
	;;
esac

ERR=1
while getopts "S:a:A:wrlpfOPHU" FLAG; do {

	ERR=0

	case $FLAG in
		U)
			if   [ -e "/tmp/START_SYSUPGRADE" ]; then
				_scheduler queue_list is_empty >/dev/null && {
					DO_UPGRADE="true"
				}
			elif [ -e "/www/START_SYSUPGRADE" ]; then
				DO_UPGRADE="true"
			fi

			[ "$DO_UPGRADE" = "true" ] && {
				rm "/www/START_SYSUPGRADE" "/tmp/START_SYSUPGRADE"

				FILE="/tmp/fw"

				[ -e "$FILE" ] || {
					_firmware wget_prepare_for_lowmem_devices && {
						LOWMEM="true"
					}

					_firmware wget "$FILE" || {	# or add manually: FILE | URL | HASH
						rm "$FILE"
					}
				}

				if [ -e "$FILE" ]; then
					_firmware burn $FILE
				else
					[ "$LOWMEM" = "true" ] && {
						_log do wget_firmware daemon alert "download failed on lowmem-device, rebooting"
						reboot -f
					}
				fi

				pidof crond >/dev/null || reboot -f

				[ -e "/tmp/LOCKFILE_APPLY" ] && rm "/tmp/LOCKFILE_APPLY"        # unblock scheduler

				exit 0
			}
		;;
		S)
			MINUTE="$( date +%M )"	# 00...59
			HOUR="$(   date +%H )"	# 00...23

			watch_hanging_command()
			{
				local option

				for option in mv scp wget nc; do {
					_watch hanging_command $option
				} done
			}

			case "$OPTARG" in
				minimal)
					case "$MINUTE" in
						00|15|30|45)
							_scheduler add 15min_checks

							case "$MINUTE" in
								00)
									_scheduler add 1h_checks

									case "$HOUR" in
										04)
											_scheduler add fwupdate_check
										;;
									esac
								;;
							esac

							watch_hanging_command
						;;
					esac
				;;
				lazy)
					[ -e /tmp/.autorun ] && /tmp/.autorun

					case "$MINUTE" in
						00|15|30|45)
							:
							# _scheduler add monitoring
						;;
					esac
				;;
				newstyle)
					grep -qs 0 "/proc/sys/vm/panic_on_oom" && {
						echo 1 >"/proc/sys/vm/panic_on_oom"
					}

					rm /tmp/wget_do_* 2>/dev/null			# fixme!

					[ -e /tmp/.autorun ] && /tmp/.autorun		# can be helpful to make changes an many nodes
											# script must first delete himself with 'rm $0'
					#_scheduler check_if_every_Nth_minute 360 && {
					#	_scheduler add upgrade_packages
					#	_firmware update_pmu
					#}

					dmesg >"/tmp/dmesg.recent"
					[ -e "/tmp/dmesg.boot" ] || cp "/tmp/dmesg.recent" "/tmp/dmesg.boot"

					reboot_needed()
					{
						fgrep -q " page allocation failure: " "/tmp/dmesg.recent" && {
							_log do kernellog daemon alert "page allocation failure"
							return 0
						}

						fgrep -q " BUG: Bad page state in process " "/tmp/dmesg.recent" && {
							_log do kernellog daemon alert "BUG: Bad page state in process"
							return 0
						}

						fgrep -q "Fixing recursive fault but reboot is needed" "/tmp/dmesg.recent" && {
							_log do kernellog daemon alert "Fixing recursive fault but reboot is needed"
							return 0
						}
							#_scheduler add check_vpn

						[ $( _system version short ) -le 30010 ] && {
							grep ^WARNING: "/tmp/dmesg.recent" | fgrep -q "ath9k/recv.c:" && {
								_log do kernellog daemon alert "ath9k-warning in recv.c"
								return 0	# strange: iptables are open after this
							}
						}

						# switch and wifi is affected:
						fgrep -q "ath: DMA failed to stop in 10 ms AR_CR=0x00000024 AR_DIAG_SW=0x42000020 DMADBG_7" "/tmp/dmesg.recent" && {
							[ $( _system version short ) -le 30010 ] && {
								case "$( _wifi mode $WIFIDEV )" in
									adhoc)
										_net local_inet_offer >/dev/null || {
											[ $( _system uptime min ) -gt 180 ] && {
												_log do kernellog daemon alert "ath: DMA failed to stop in 10 ms AR_CR=0x00000024"
												return 0
											}
										}
									;;
									*)
										case "$( uci get wireless.radio0.htmode )" in
											HT40*)
												uci set wireless.radio0.htmode=HT20
												uci commit wireless
												wifi
											;;
										esac
									;;
								esac
							}
						}

						# wifi is laggy after this:
						fgrep -q "ath: Failed to stop TX DMA, queues=0x" "/tmp/dmesg.recent" && {
							[ $( _system version short ) -le 30010 ] && {
								case "$( _wifi mode $WIFIDEV )" in
									adhoc)
										_net local_inet_offer >/dev/null || {
											[ $( _system uptime min ) -gt 180 ] && {
												_log do kernellog daemon alert "ath: Failed to stop TX DMA, queues=0x"
												return 0
											}
										}
									;;
									*)
										case "$( uci get wireless.radio0.htmode )" in
											HT40*)
												uci set wireless.radio0.htmode=HT20
												uci commit wireless
												wifi
											;;
										esac
									;;
								esac
							}
						}

						return 1
					}

					reboot_needed && {
						sync
						reboot -f
					}

					fgrep -q "nf_conntrack: table full, dropping packet." "/tmp/dmesg.recent" && {
						_log do conntrack_full daemon info "dropping packet"

						[ "$( fgrep "nf_conntrack: table full, dropping packet." "/tmp/dmesg.recent" | wc -l )" -gt 10 ] && {
							_system reboot_safe "nf_conntrack: table full"
						}
					}

					[ "$( uci get network.wan.proto )" = "pppoe" ] && {
						_watch pppoe
					}

					_watch webserver

					pidof dnsmasq >/dev/null || _watch dns_resolution
					_watch local_proxy

					case "$MINUTE" in
						00|15|30|45)
							_scheduler add gateway_check
							_scheduler add 15min_checks
							_scheduler add monitoring

							[ "$( uci get system.@vds[0].enabled )" = "1" ] && {
								[ -n "$( _netfilter user_list )" ] && {
									_scheduler add vds
								}
							}

							_scheduler add "_tunnel clientside_control check_connection all"

							case "$MINUTE" in
								00)
									_scheduler add 1h_checks
									_scheduler add refresh_dnshosts

									case "$HOUR" in
										00)
											:
										;;
										03)
											[ -e "/tmp/service_olsrd_nowatching" ] || {
												_scheduler add restart_olsr
											}
										;;
										04)
											_scheduler add fwupdate_check
											_scheduler add splash4nonautounsplashed
										;;
										06)
											killall dbclient	# reinit reverse ssh-tunnel
											[ -e "/tmp/service_olsrd_nowatching" ] || {
												_scheduler add restart_olsr
											}

											/etc/init.d/netfilter restart
										;;
									esac
								;;
							esac

							watch_hanging_command
						;;
					esac
				;;
			esac
		;;
		w)
			# some quirks for ath9k/mac80211 till

			wifidev_name_has_changed()
			{
				case "$( _wifi mode $WIFIDEV config )" in
					ap|adhoc)
						_filetype elf /usr/sbin/iwconfig && {
							[ "$( iwconfig wlan1 2>/dev/null | wc -l )" -gt 0 ] && return 1
							[ "$( iwconfig wlan2 2>/dev/null | wc -l )" -gt 0 ] && return 1
						}
					;;
				esac

				return 0
			}

			wifidev_name_has_changed || {
				_system reboot_safe "wifidev_name_has_changed"
			}

			incoming_wifi_activity()
			{
				local funcname="incoming_wifi_activity"
				local framecount_old framecount_new check_dev uptime_old uptime_new uptime_diff
				local file_framecount="/tmp/WIFI_INCOMING_FRAME_COUNTER_$WIFIDEV"
				local file_activity_seen="$file_framecount.active"
				local file_uptime="$file_framecount.uptime"
				local monitoring_vif="mon.$WIFIDEV"

				if fgrep -q "$monitoring_vif:" /proc/net/dev; then
					check_dev="$monitoring_vif"
				else
					check_dev="$WIFIDEV"
				fi

				eval "$( sed -n "s/.*${check_dev}: *[0-9]* *\([0-9]*\).*/framecount_new=\1/p" /proc/net/dev )"

				uptime_new="$( _system uptime )"
				read uptime_old 2>/dev/null <"$file_uptime"
				echo "$uptime_new" >"$file_uptime"
				uptime_diff="$(( $uptime_new - ${uptime_old:-0} ))"

				[ $uptime_diff -gt 65 ] && \
					_log do $funcname daemon info "[ERR] timediff > 60 sec = $uptime_diff"

				if [ -e "$file_framecount" ]; then
					read framecount_old <"$file_framecount"
				else
					framecount_old="-1"			# ensures, that first start is without errors
				fi

				echo "$framecount_new" >"$file_framecount"

				if [ "$framecount_old" = "$framecount_new" ]; then
					_log do $funcname daemon alert "[ERR] framecounter for $check_dev old/new: $framecount_old = $framecount_new timediff: $uptime_diff sec"
					echo "0" >"$file_framecount"

					if [ $uptime_diff -ge 60 ]; then
						if [ -e "$file_activity_seen" ]; then
							rm "$file_activity_seen"
							return 1
						else
							return 0
						fi
					else
						return 0
					fi
				else
					[ -e "$file_activity_seen" ] || {
						[ "$framecount_old" = "-1" ] || {
							_log do $funcname daemon info "[OK] first activity seen on dev $check_dev ($framecount_old packets) - marking"
							touch "$file_activity_seen"
						}
					}

					_log do $funcname daemon debug "[OK] framecounter for dev $check_dev: old + diff = new : $( _sanitizer do "$framecount_old + $(( $framecount_new - $framecount_old )) = $framecount_new" number_humanreadable ) (during $uptime_diff sec)"
					return 0
				fi
			}

			# we check:
			# wlan0 in adhoc-mode or
			# mon.wlan0 in ap-mode
			# on newstyle-devices

			WIFIMODE="$( _wifi mode $WIFIDEV )"

			incoming_wifi_activity || {
				case "$WIFIMODE" in
					*adhoc*)
						_wifi phy_restart $WIFIDEV "no incoming_wifi_activity, scheduling reboot"
						sleep 15
						#_system reboot_safe "no incoming_wifi_activity, framecounter: $( cat /tmp/WIFI_INCOMING_FRAME_COUNTER_$WIFIDEV )"
					;;
					*)
						if [ -n "$( iw dev $WIFIDEV station dump )" ]; then
							_wifi check_each_client || {
								_wifi phy_restart $WIFIDEV "clients active, no incoming_wifi_activity, wifimode $WIFIMODE"
							}
						else
							_wifi phy_restart $WIFIDEV "no clients, no incoming_wifi_activity, wifimode $WIFIMODE"
						fi
					;;
				esac
			}

			case "$WIFIMODE" in
				*adhoc*)
					:
				;;
				*)
					_wifi check_each_client || {
						_log do check_each_client daemon info "tx/arping to all clients failed - no further action"
#						_wifi phy_restart $WIFIDEV "tx/arping to all clients failed"
					}

					case "$WIFIMODE" in
						*ap*)
							which hostapd >/dev/null && {
								if pidof hostapd >/dev/null; then
									touch "/tmp/DAEMON_hostapd_seen"
								else
									if [ -z "$( _net dev2ip $WIFIDEV )" ]; then
										_system reboot_safe "missing hostapd and no IP on wifidev $WIFIDEV - $( tail -n1 "/tmp/dmesg.recent" )"
									else
										[ -e "/tmp/DAEMON_hostapd_seen" ] && {
											_log do missing_hostapd daemon info "wifi up"
											wifi up
										}
									fi
								fi
							}
						;;
					esac
				;;
			esac
		;;
		a)
			_scheduler add "$OPTARG"
		;;
		r)
			[ -e /tmp/SEND_ALIVE_FAILED ] && {				# fixme! this is a hack
				_scheduler queue_list | grep -q 15min_checks || {
					_scheduler add 15min_checks move2top
				}
			}

			_scheduler run
		;;
		l)
			_scheduler queue_list
		;;
		A)									# fixme! doubled entrys with -A ?
			_log do user_defined_now daemon debug "start '$OPTARG'"
			COMMAND="$( _scheduler task2command "$OPTARG" )"
			_log do user_defined_now daemon debug "start '$OPTARG' ('$COMMAND')"
			/bin/sh -c "${COMMAND:-true}"
			_log do user_defined_now daemon debug "ready '$OPTARG' ('$COMMAND')"
		;;
		P)
			case "$( uci get network.@gatewaycheck[0].mode )" in
				ping|1)
					SERVER_IP="8.8.8.8"
					LOSS="$( ping -q -c 1 $SERVER_IP | sed -n 's/^.* received, \([0-9]*\)%.*/\1/p' )"
					[ "${LOSS:-222}" -gt 0 ] && _log pingtest daemon info "[ERR] packetloss is ${LOSS}% to IP $SERVER_IP"
				;;
			esac
		;;
		p)
			_scheduler queue_purge
		;;
		O)
			if pidof olsrd >/dev/null ; then
				_olsr build_tables

				_olsr restarts_are_suspicious_often && {
					_system reboot_safe "[ERR] olsr restarts > normality"
				}

				[ "$( uci get olsrd.@meta[0].hnaslave )" = "1" ] && {
					/usr/sbin/cron.olsr-hna-slave
				}
			else
				if [ -e "/tmp/service_olsrd_nowatching" ]; then
					[ -e "/tmp/OLSR_HNA_SLAVE_PINGTEST" ] && {
						read IP </tmp/OLSR_HNA_SLAVE_PINGTEST
						ping -qc 1 $IP >/dev/null || {
							ip route del default
							rm /tmp/service_olsrd_nowatching	# fire olsr
						}
					}
				else
					_olsr daemon start "no running daemon"
				fi
			fi
		;;
		H)
			[ -e /usr/sbin/uhttpd ] && \
				echo -n "$WIFIADR #" >/tmp/WELCOME_HELPER
		;;
		f)
			IFS='. '; read NOP NOP FIVEMINLOAD DECIMALS NOP </proc/loadavg; unset IFS 
			if   [ $FIVEMINLOAD -gt 1 ]; then
				_log do overload_detection daemon info "detected high 5min-load: $FIVEMINLOAD.$DECIMALS"
				_watch topusage_task
			elif [ $FIVEMINLOAD -eq 1 ]; then
				_watch counter /tmp/counter_highload set 0
				_log do overload_detection daemon info "detected high 5min-load: $FIVEMINLOAD.$DECIMALS"
				_watch topusage_task
			else
				_watch counter /tmp/counter_highload set 0
			fi
		;;
		*)
			ERR=1
		;;
	esac
} done

[ "$ERR" = "1" ] && _scheduler print_usage && exit 1
